import {Person} from "Ex01b_CreateDeleteFunctionallyDependentField/DeleteFunctionallyDependentField";

import {InverseRoundTrip} from "com/enfore/n4js/n4idl/roundtrip/InverseRoundTrip";

import {RoundTripMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripMigration";
import {DeleteFunctionalDependentFieldTest} from "Ex01b_CreateDeleteFunctionallyDependentField/DeleteFunctionallyDependentFieldTest"
import {InstanceAssert} from "com/enfore/n4js/n4idl/assert/InstanceAssert";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * 
 * Inverse DeleteFunctionalDependentField.
 * 
 * Person#2 -> Person#1 -> Person#2
 * 
 * Inverse round-trip of {@link DeleteFunctionalDependentFieldTest}.
 */
@VersionAware
export public class InverseDeleteFunctionalDependentFieldTest extends InverseRoundTrip<Person#1, Person#2> {
	
	@Override
	public getRoundTripMigration() : RoundTripMigration<Person#1, Person#2> {
		return new DeleteFunctionalDependentFieldTest();
	}
	
	@Override
	public instantiateOriginal() : Person#2 {
		return new Person#2({
			yearOfBirth: 1990
		});
	}
	
	@Override
	public assertMigratedInstance(migrated : Person#1) {
		InstanceAssert.hasField("age", migrated, "Migrated instance has actual 'age' field.");
		Assert.equal(migrated.age, 28, "'age' of migrated instance matches expectations.");
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : Person#2) {
		InstanceAssert.hasNoField("age", roundTrip, "Round-trip instance has no actual 'age' field (accessors instead).");
		Assert.equal(roundTrip.yearOfBirth, 1990, "'yearOfBirth' has initial value.");
	}
}

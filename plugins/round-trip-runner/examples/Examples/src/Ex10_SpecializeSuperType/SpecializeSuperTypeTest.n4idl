import {AbstractRoundTripTest} from "com/enfore/n4js/n4idl/roundtrip/AbstractRoundTripTest";
import {SpecializeSuperType} from "Ex10_SpecializeSuperType/SpecializeSuperType";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {InstanceAssert} from "com/enfore/n4js/n4idl/assert/InstanceAssert";

/**
 * SpecializeSuperType
 * 
 * SpecializeSuperType#1 -> SpecializeSuperType#2 -> SpecializeSuperType#1
 * 
 * The super type of SpecializeSuperType is specialized in version 2. 
 * That is, it changes from HighestSuperType to LessHighSuperType.
 * On an instance level this leads to the introduction of the new field 'superField'.
 * Thus, in the migration a default value has to be chosen.
 * 
 * Specialize Super Type: safely model-migrating
 * Generalize Super Type: unsafely model-migrating
 */
@VersionAware
export public class SpecializeSuperTypeTest extends AbstractRoundTripTest<SpecializeSuperType#1, SpecializeSuperType#2> {
	
	@Override
	public instantiateOriginal() : SpecializeSuperType#1 {
		return new SpecializeSuperType#1({});
	}
	
	@Override
	public migrate(o1 : SpecializeSuperType#1) : SpecializeSuperType#2 {
		return new SpecializeSuperType#2({
			superField: "defaultSuperFieldValue"
		});
	}

	@Override
	public migrateBack(o2 : SpecializeSuperType#2) : SpecializeSuperType#1 {
		return new SpecializeSuperType#1({});
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : SpecializeSuperType#1) {
		Assert.equal(InstanceAssert.getOwnPropertyNames(roundTrip).length, 0, "The round-trip instance has no fields");	
	}
	@Override
	public assertMigratedInstance(migrated : SpecializeSuperType#2) {
		Assert.equal(migrated.superField, "defaultSuperFieldValue", "The 'superField' of the migrated instance was set to a default-value.");
	}
}
	
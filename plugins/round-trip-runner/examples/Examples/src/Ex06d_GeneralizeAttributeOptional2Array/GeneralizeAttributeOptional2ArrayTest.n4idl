import {AbstractRoundTripTest} from "com/enfore/n4js/n4idl/roundtrip/AbstractRoundTripTest";
import {GeneralizeAttributeOptional2Array} from "Ex06d_GeneralizeAttributeOptional2Array/GeneralizeAttributeOptional2Array";

import {Element} from "Ex06d_GeneralizeAttributeOptional2Array/GeneralizeAttributeOptional2Array";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * GeneralizeAttributeOptional2Array
 * 
 * GeneralizeAttributeOptional2Array#1 -> GeneralizeAttributeOptional2Array#2 -> GeneralizeAttributeOptional2Array#1
 * 
 * In version 1 GeneralizeAttributeOptional2Array#1 declares an optional field 'field' of 
 * type Element. In version 2, the field is generalized to be an array of values of type Element.
 * 
 * In contrast to the scenario GeneralizeAttributeArray, in this case, the field in version 1 
 * allows for an additional 'absent'-state. Thus, the migration can better accommodate for
 * an empty array when migrating from version 2 to 1. 
 */
@VersionAware
export public class GeneralizeAttributeOptional2ArrayTest extends AbstractRoundTripTest<GeneralizeAttributeOptional2Array#1, GeneralizeAttributeOptional2Array#2> {
	
	@Override
	public instantiateOriginal() : GeneralizeAttributeOptional2Array#1 {
		return new GeneralizeAttributeOptional2Array#1({
			field: new Element#1({
				value: "SomeValue"
			})
		})
	}
	
	@Override
	public migrate(o1 : GeneralizeAttributeOptional2Array#1) : GeneralizeAttributeOptional2Array#2 {
		// Check whether o1.field is present, if so, migrate
		// to a singleton array, otherwise migrate to an empty array.
		return new GeneralizeAttributeOptional2Array#2({
			field: o1.field != undefined ? [o1.field] : new Array<Element#2>()
		});
	}

	@Override
	public migrateBack(o2 : GeneralizeAttributeOptional2Array#2) : GeneralizeAttributeOptional2Array#1 {
		// Empty array is migrated to an absent optional, while in case of 
		// a non-empty array, the first element is migrated to be the value of 'field'.
		return new GeneralizeAttributeOptional2Array#1({
			field: o2.field.length > 0 ? o2.field[0] : undefined
		})
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : GeneralizeAttributeOptional2Array#1) {
		Assert.isNotUndefined(roundTrip.field, "The value of 'field' of the migrated instance is retained.")
		Assert.equal(roundTrip.field.value, "SomeValue" ,"The value of 'field' of the round-trip instance is the original value.")
	}
	@Override
	public assertMigratedInstance(migrated : GeneralizeAttributeOptional2Array#2) {
		Assert.equal(migrated.field.length, 1, "The value of field 'field' is migrated to a singleton array.")
		Assert.equal(migrated.field[0].value, "SomeValue", "The single array value is the original value.")		
	}
}
	
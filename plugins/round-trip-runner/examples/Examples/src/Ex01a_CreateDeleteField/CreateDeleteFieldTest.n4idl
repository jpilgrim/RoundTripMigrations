import {AbstractRoundTripTest} from "com/enfore/n4js/n4idl/roundtrip/AbstractRoundTripTest";
import {AddField} from "Ex01a_CreateDeleteField/AddField";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {InstanceAssert} from "com/enfore/n4js/n4idl/assert/InstanceAssert";

/**
 * Create Field + Delete Field
 * 
 * AddField#2 -> AddField#1 -> AddField#2
 * 
 * In the second version of the class the field 'field2' is
 * introduced. As a inverse to this change, the field is removed 
 * when migrating back.
 * 
 * To migrate this change, a default value for the field 'field2' is chosen 
 * in {@link #migrateBack}. As a result the original value of 'field2' is 
 * lost in the case of a 2 -> 1 -> 2 round trip.
 * 
 * Create Field: safely model-migrating
 * Delete Field: unsafely model-migrating
 */
@VersionAware
export public class CreateDeleteFieldTest extends AbstractRoundTripTest<AddField#2, AddField#1> {
	
	@Override
	public instantiateOriginal() : AddField#2 {
		return new AddField#2({field1 : "value1", field2: "value2"});
	}
	
	@Override
	public migrate(o2 : AddField#2) : AddField#1 {
		return new AddField#1({field1: o2.field1});
	}
	
	@Override
	public migrateBack(o1 : AddField#1) : AddField#2 {
		return new AddField#2({field1: o1.field1, field2: "defaultValue2"});
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : AddField#2) {
		Assert.equal(roundTrip.field1, "value1", "Value of field1 matches");
		Assert.equal(roundTrip.field2, "defaultValue2", "Value of field2 matches");
	}
	
	@Override
	public assertMigratedInstance(migrated : AddField#1) {
		Assert.equal(migrated.field1, "value1", "Value of field1 is migrated correctly");
		InstanceAssert.hasNoField("field2", migrated, "field2 is not present in the migrated instance");
	}
}

import {ArrayUtils} from "ArrayUtils";
import {MultiGraphModel} from "GraphModel";
import {SerializedObjectGraph} from "GraphModel";
import {ROUNDTRIP_STAGES} from "RoundTripStages";
import {ROUNDTRIP_STAGE_LABELS} from "RoundTripStages";
import {Viewer} from "Viewer";
import {GraphData as data} from "demo";
import {Dia} from "jointjs";
import {Graph} from "jointjs";
import {JQueryElement} from "jquery";
import jQuery from "jquery";
import {RoundTripLayout} from "layouts/RoundTripLayouts";
import {RoundTripWithoutModificationLayout} from "layouts/RoundTripLayouts";
import {MigrationLink} from "links/MigrationLink";
import {ModificationLink} from "links/ModificationLink";
import {StageShape} from "shapes/StageShape";
import {RoundTripStackLayout} from "layouts/RoundTripLayouts";
import {createControls} from "controls";



/**
 * Initialises a new Object Graph view in the given
 * HTMLElement with the given instances model.
 *
 * @param {HTMLElement} element
 * @param {Array<Instance>} instances
 */
function initialiseViewer(element : JQueryElement, data : union{MultiGraphModel, SerializedObjectGraph}) {
	var graph = new Dia.Graph();

	var paper = new Dia.Paper({
	    el: element,
	    gridSize: 1,
	    width: element.width(),
	    height: element.height(),
	    model: graph
	});
	
	const viewer = new Viewer(paper, graph);

	let stages = new Map<string, StageShape>();

	if (!SerializedObjectGraph.isInstanceOf(data)) {
		const multiGraph = data as MultiGraphModel;
		const dynamicGraph : Object+ = multiGraph; 
		// create all known and existing stages
		for (let key : string of ROUNDTRIP_STAGES) {
			let currentGraph = dynamicGraph[key] as SerializedObjectGraph;
			
			// if this key cannot be found in data, skip it
			if (!currentGraph) {
				continue;
			}

			// If empty object graph, skip it.
			// This may happen in the case where there is no
			// modification of the migrated instance.
			if (currentGraph.registry.length == 0) {
				continue;
			}

			// skip invalid types of object graphs
			if (ROUNDTRIP_STAGES.indexOf(key) == -1) {
				continue;
			}

			let stage = viewer.initialiseRoundtripStage(currentGraph.registry, ROUNDTRIP_STAGE_LABELS[key] as string) as StageShape;
			stages.set(key, stage);
		}

		let migrate = new MigrationLink(stages.get("original"), stages.get("migrated"), "migrate")
		graph.addCell(migrate);

		// layout the created stages
		if (ArrayUtils.toArray(stages.entries()).length == 3) {
			viewer.layout(new RoundTripWithoutModificationLayout());

			let migrateBack = new MigrationLink(stages.get("migrated"), stages.get("roundTrip"), "migrate back")
			graph.addCell(migrateBack);
		} else {
			viewer.layout(new RoundTripLayout());

			let modificationLink = new ModificationLink(stages.get("migrated"), stages.get("migratedModified"));
			graph.addCell(modificationLink);

			let migrateBack = new MigrationLink(stages.get("migratedModified"), stages.get("roundTrip"), "migrate back")
			graph.addCell(migrateBack);
		}

		// create trace links, if applicable 
		viewer.createAllTraceLinks(multiGraph);

	} else { // initialise the view as a single round-trip stage
		viewer.initialiseSingleRoundtripStage((data as SerializedObjectGraph).registry)
	}

    // center content
    viewer.center();
    viewer.initPanAndZoom();

    window.graph = graph;
    window.paper = paper;

	viewer.fillSpace();
	
	createControls();
}

function savePDF() {
	window.print();
}

/**
 * Prepares the graph view for print from the browser and
 * invokes the print dialog.
 * 
 * Works best when saving to PDF.
 */
function printGraph() {
	const svgElement = jQuery(document.querySelector("#content")).find("svg");
	const saveElement = svgElement;
	
	saveElement.children("g").css({"transform": ""});
	saveElement.children("g").attr({"transform": ""});
	saveElement.children("g").css({"transform": "translate(10px, 0px)"});
	
	saveElement.find(".marker-vertices").remove();
	
	const graph : Graph = window.graph as Graph;
	const graphBBox = graph.getBBox();
	
	const width = graphBBox.width + 70;
	const height = graphBBox.height + 20;
	
	console.log(width, height);
	
	// add print-style tag in header if non-existent
	if (document.getElementById("print-style") == null) {
		const printStyle = document.createElement("style");
		printStyle.setAttribute("id", "print-style");
		document.getElementsByTagName("head")[0].appendChild(printStyle);
	}
	
	// set print style according to graph bounding box
	document.getElementById("print-style").innerHTML = 
	`
	@media print {
	    body, html {
			height:${height - 10}px; 
			margin: 0 !important; 
			padding: 0 !important;
			overflow: hidden;
			width: ${width}px;
	    }
		#content {
			width: ${width}px;
			height: ${height}px;
		}
		@page {
			margin: 0;
			padding: 0;
			overflow: hidden;
			size: ${width}px ${height}px;
		}
	}
	`
	// invoke print dialog
	window.print();
	return;
}

function setLayout(layout : string) {
	if (layout == "stack") {
		window.viewer.layout(new RoundTripStackLayout())
	} else if (layout == "regular") {
		const v = window.viewer as Viewer;
		if (v.stages.length == 3) {
			v.layout(new RoundTripWithoutModificationLayout())
		} else {
			v.layout(new RoundTripLayout())
		}
	}
}

// register global function for interfacing with container-applications of this viewer
window.jQuery = jQuery;
window.savePDF = savePDF;
window.printGraph = printGraph;
window.setLayout = setLayout;

initialiseViewer(jQuery("#content"), data);

/*
 * Set the window title to the module name of the currently 
 * displayed round-trip scenario.
 * 
 * A full module specifier is assumed to be found in the global 
 * moduleName variable.
 *  */
if (eval("moduleName") != undefined) {
	let o : Object+ = eval("moduleName");
	// find last segment of specifier
	let segments = o.split("/");
	document.title = segments[segments.length - 1];
}
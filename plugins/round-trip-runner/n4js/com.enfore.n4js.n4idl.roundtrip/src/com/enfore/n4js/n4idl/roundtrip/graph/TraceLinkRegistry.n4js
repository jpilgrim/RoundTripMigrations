import {SubGraphURI} from "com/enfore/n4js/n4idl/roundtrip/graph/SubGraphURI";
import {MultiMap} from "com/enfore/n4js/n4idl/util/MultiMap";

/**
 * A {@link TraceLinkRegistry} can be used to convert a sub-graph registry 
 * from Object-to-Object mappings ((e.g. {@link ObjectGraph#subGraphRegistry} )) 
 * to {@link SubGraphURI} mappings.
 */
export public class TraceLinkRegistry {
	private links : Array<Iterable2<string, string>> = [];
	private linkMap = new MultiMap<string, string>();
	private registry : Map<N4Object, SubGraphURI>
	
	constructor(registry: Map<N4Object, SubGraphURI>) {
		this.registry = registry;
	}
	
	/**  
	 * Add a trace link from the given Object to the other given Object.
	 * 
	 * In case the given objects are not instances of N4Objects, links are created for 
	 * all of their properties of type N4Object instead. 
	 */
	public addLink(from : Object, to : Object) {
		const fromElements : Array<N4Object> = extractMigrationArguments(from);
		const toElements : Array<N4Object> = extractMigrationArguments(to);
		
		for (let f of fromElements) {
			for (let t of toElements) {
				this.addN4ObjectLink(f, t);
			}
		}
	}
	
	/** Adds a trace link from the given N4Object to the given N4Object. */
	public addN4ObjectLink(from : N4Object, to : N4Object) {
		let toURI = this.registry.get(from);
		let fromURI = this.registry.get(to);
		
		if (!toURI || !fromURI) {
			console.error("Failed to obtain sub-graph URI for ", from, to);
			return;
		}
		
		if (toURI.equals(fromURI)) {
			console.warn("Filtered circular trace link for " + toURI.toString());
			return;
		}
		
		this.linkMap.set(fromURI.toString(), toURI.toString());
	}
	
	/** 
	 * Returns {@code true} if this registry contains any links. 
	 */
	public get empty() : boolean {
		return this.registry.entries.length > 0;
	}
	
	/**
	 * Returns the raw-data underlying this registry.
	 * 
	 * Use this value when serialising this registry.
	 */
	get rawData() : Array<Iterable2<string, string>> {
		let pairs : [[Iterable2<string, string>]] = Array.from(this.linkMap.entries()).map(entry => {
			const [from, to] = entry;
			const pairs : Array<Iterable2<string, string>> = to.map(t => [from, t]);

			return pairs;
		});
		
		return pairs.reduce((pairs, newPairs) => pairs.concat(newPairs), []);
	}
}
/**
 * Extracts the actual migration arguments from the given argument value.
 * 
 * For N4Object, the actual migration argument always corresponds to arg itself.
 * In case of plain Objects, the actual migration arguments are the N4Object-typed
 * values of the argument Object.
 */

function <Arg extends Object> extractMigrationArguments(arg : Arg) : Array<N4Object> {
	if (arg instanceof N4Object){
		return [arg as N4Object];
	} else if (Array.isArray(arg)) {
		let results : Array<N4Object> = [];
		(arg as Array<?>).forEach(e => {
			if (e instanceof Object) {
				extractMigrationArguments(e as Object).forEach(o => {
					if (results.indexOf(o) == -1) {
						results.push(o);
					}
				})
				
			}
		})
		return results;
	} else {
		let result = Object.keys(arg)
			.map(k => arg[k]) // map keys to corresponding values
			.filter(v => v instanceof N4Object) as Array<N4Object> // filter non-N4Object values;
		return result;
	}
}

import {Field} from "com/enfore/n4js/n4idl/objectgraph/Field";
import {Instance} from "com/enfore/n4js/n4idl/objectgraph/Instance";
import {InstanceProxy} from "com/enfore/n4js/n4idl/objectgraph/ObjectGraph";
import {ObjectGraphException} from "com/enfore/n4js/n4idl/objectgraph/ObjectGraph";
import {Type} from "com/enfore/n4js/n4idl/objectgraph/Type";

/** 
 * Internally-used class to travers N4JS object graphs and create its
 * meta-representation in terms of {@link ObjectGraph}, {@link Instance} and {@link Field}.
 * */
export project class ObjectGraphTraverser {
	subGraphRegistry : Map<N4Object, int> = new Map<N4Object, int>();
	instanceRegistry : Array<Instance> = new Array<Instance>();
	queue : GraphiphyQueue = new GraphiphyQueue();
	
	/**
	 * Processes the given object sub-graph.
	 */
	processSubGraph(id : int, object : N4Object) {
		const objectType = N4Type.of(object);
		
		if (!objectType.isClass) {
			throw new ObjectGraphException("Failed to graphiphy obect " + object + " as it is not an N4Class.");
		}
		
		const n4Class = objectType as N4Class;
		const instance = new Instance(n4Class.name);
		const dataFields : Array<? extends N4DataField> = n4Class.dataFields(true, true, false);
		
		for (let field of dataFields) {
			let instanceField = Field.ofObject(object, field.name);
			
			if (instanceField.value instanceof N4Enum) {
				instanceField.value = (instanceField.value as N4Enum).value;
				instance.addField(instanceField);
			} else if (!instanceField.isBuiltInType) {
				this.handleObjectField(instanceField)
					.forEach(f => instance.addField(f));
			} else if (instanceField.type == Type.ARRAY_TYPE) {
				this.handleArrayField(instanceField)
					.forEach(f => instance.addField(f));
			} else {
				instance.addField(instanceField);
			}
		}
		
		// cache result in sub-graph registry to prevent recursion
		this.subGraphRegistry.set(object, id);
		// store instance result in instance registry
		this.instanceRegistry.push(instance);
	}
	
	handleObjectField(instanceField : Field) : Array<Field> {
		const value = instanceField.value as N4Object;

		// check sub-graph registry for existing instance
		if (this.subGraphRegistry.has(value)) {
			instanceField.value = InstanceProxy.to(this.subGraphRegistry.get(value));
		} else {
			// otherwise queue up sub-graph in the list
			let futureId = this.queue.push(value);
			// replace field value with proxy
			instanceField.value = InstanceProxy.to(futureId);
		}
		
		return [instanceField];
	}
	
	handleArrayField(instanceField : Field) : Array<Field> {
		if (instanceField.value instanceof Array) {
			let elementFields = new Array<Field>();
			
			let array = (instanceField.value as Array<?>);
			
			if (array.length == 0) {
				instanceField.value = [];
				return [instanceField];
			}
			
			for (let index=0; index<array.length; index++) {
				let element = array[index];
				if (element instanceof N4Object) {
					let field = new Field(`${instanceField.name}[${index}]`, element as N4Object);
					elementFields.push(this.handleObjectField(field)[0]);
				} else {
					// if a non-object element is encountered, fall-back to string-representation of an array
					instanceField.value = array;
					console.log(instanceField.value);
					return [instanceField];
				}
			}
			
			return elementFields;
		}
		console.log(`Could not handle non-array field ${instanceField.name} in handleArrayField`)
		return [];
	}
}

export project class GraphiphyQueue {
	private instanceCounter : int = 0;
	private queue : Array<GraphiphiyQueueElement> = new Array<GraphiphiyQueueElement>();
	
	/**
	 * Add the give N4Object to the end of the queue.
	 * 
	 * Returns the object-id of the element.
	 */
	public push(object : N4Object) : int {
		const objectId = this.instanceCounter;
		this.instanceCounter++;
		this.queue.push(new GraphiphiyQueueElement(objectId, object));
		return objectId;
	}
	
	/**
	 * Returns the first element in the queue.
	 * 
	 * Returns {@code undefined} if the queue is empty.
	 */
	public pop() : GraphiphiyQueueElement {
		return this.queue.shift();
	}
	
	/**
	 * Returns the length of the queue.
	 */
	public get length() : int {
		return this.queue.length;
	}
	
	public isEmpty() : boolean {
		return this.length == 0;
	}
}

export project class GraphiphiyQueueElement {
	object : N4Object
	id : int
	
	constructor(id : int, object : N4Object) {
		this.id = id;
		this.object = object;
	}
}
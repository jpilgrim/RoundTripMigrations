import {Field} from "com/enfore/n4js/n4idl/objectgraph/Field";
import {Instance} from "com/enfore/n4js/n4idl/objectgraph/Instance";
import {ObjectGraphTraverser} from "com/enfore/n4js/n4idl/objectgraph/ObjectGraphTraverser";
/**
 * Meta-representation of an N4JS object graph. 
 * 
 * An object-graph is a finite N4JS object graph that is also able to 
 * represent recursive object dependencies. Furthermore, it allows access to the
 * type names of object fields. 
 */
export public class ObjectGraph {
	/**
	 * Returns an ObjectGraph with the given object as root.
	 */
	public static graphiphy(object : N4Object) : ~Object with {graph: ObjectGraph, subGraphRegistry: Map<N4Object, int>} {
		let factory = new ObjectGraphTraverser();
		// add root element to queue
		factory.queue.push(object);
		
		// process queue
		while(!factory.queue.isEmpty()) {
			let element = factory.queue.pop();
			factory.processSubGraph(element.id, element.object);
		}
		
		return {
			graph: new ObjectGraph(factory.instanceRegistry),
			subGraphRegistry: factory.subGraphRegistry
		};
	}
	
	/** 
	 * Returns a JSON-encoded string-representation of the ObjectGraph
	 * with the given object as root. 
	 */
	public static stringify(object : N4Object) : string {
		return JSON.stringify(ObjectGraph.graphiphy(object));
	}
	
	private registry : Array<Instance>
	
	@Internal
	public constructor(registry : Array<Instance>) {
		this.registry = registry;
	}
	
	public get root?() : Instance {
		return this.registry[0];
	}
	
	/**
	 * Resolves the given InstanceProxy or returns
	 * {@code undefined} if the proxy cannot be resolved.
	 */
	public resolve(proxy : InstanceProxy) : Instance {
		if (this.registry.length <= proxy.target) {
			return undefined;
		}
		return this.registry[proxy.target];
	}
	
	/** 
	 * Returns a new instance of instance with all fields resolved. 
	 */
	public resolveAll(instance : Instance) : Instance {
		let resolved = new Instance(instance.className);
		instance.getFields().forEach(f => {
			let value = f.value;
			if (value instanceof InstanceProxy) {
				let resolvedField = this.resolve(value as InstanceProxy);
				resolved.addField(new Field(f.name, resolvedField));
			} else {
				resolved.addField(new Field(f.name, f.value));
			}
		});
		return resolved;
	}
} 


export public class InstanceProxy {
	public static to(id : int) : InstanceProxy {
		return new InstanceProxy(id);
	}
	
	public target : int
	
	private constructor(target : int) {
		this.target = target;
	}
}

export public class ObjectGraphException {
	@Final
	message : string
	
	constructor(message : string) {
		this.message = message;
	}
}


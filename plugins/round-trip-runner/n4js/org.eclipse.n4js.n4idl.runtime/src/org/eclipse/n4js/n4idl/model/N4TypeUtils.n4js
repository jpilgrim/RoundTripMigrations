/**
 * Utility methods for handling N4JS/N4IDL classifiers and other types.
 */
export public class N4TypeUtils {
	/**
	 * Returns {@code true} if the given {@code object} is an 
	 * N4Type constructor and may thus be interpreted as {@code type{N4Object}}.
	 */
	public static isN4Type(object : Object) : boolean{
		return typeof N4TypeUtils.dynamic(object).n4type !== "undefined";
	}
	
	/** 
	 * Creates a dynamic access for the given object (disables member scoping).
	 * 
	 * Use with care, this should only be required when accessing hidden fields!
	 */
	public static dynamic(o : Object) : Object+ { return o; }
	
	/** 
	 * Returns a user-facing string representation of the given list of arguments.
	 */
	public static typesToString(args : [?]) : string{
		return args.map(arg => N4TypeUtils.typeDescription(arg)).join(", ");
	}
	
	/** Returns a user-facing string representation of the type of the given value. */
	public static typeDescription(v : any) : string {
		if (v == null) { return "null" }
		let n4Type = N4Type.of(v);
		if (n4Type != null) {
			return n4Type.name
		} else {
			return typeof v;
		}
	}
}
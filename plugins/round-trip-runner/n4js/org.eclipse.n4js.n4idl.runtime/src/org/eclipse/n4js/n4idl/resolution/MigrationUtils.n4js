import {MigrationCandidate} from "org/eclipse/n4js/n4idl/model/N4IDLMigratable";
import {N4IDLMigratable} from "org/eclipse/n4js/n4idl/model/N4IDLMigratable";
import {TypeTypeRef} from "org/eclipse/n4js/n4idl/model/N4IDLMigratable";
import {N4TypeUtils} from "org/eclipse/n4js/n4idl/model/N4TypeUtils";

/** 
 * Utility methods for handling N4IDL migrations at runtime. 
 */
export public class MigrationUtils {
	public static candidateDescriptions(candidates : [MigrationCandidate]) : string {
		return candidates
			.map(c => MigrationUtils.candidateDescription(c))
			.join(",\n")
	}
	
	public static candidateDescription(candidate : MigrationCandidate) {
		const migrationFunction : Function = candidate.migration;
		const parameterTypes = candidate.parameterTypes;
		
		const migrationName = N4TypeUtils.dynamic(migrationFunction).name || "";
		const parameterTypesDescription = parameterTypes.map(s => MigrationUtils.migrationTypeDescription(s)).join(", ");
		
		return `${migrationName} (${parameterTypesDescription})`;
	}
	
	public static migrationTypeDescription(sourceType : union{type{N4Object}, TypeTypeRef<Object>, string}) : string {
		if (typeof sourceType === 'object' && TypeTypeRef.isConstructorRef(sourceType as Object)) {
			return `type{(sourceType as TypeTypeRef<Object>).type}`;
		} else if (typeof sourceType === 'string') {
			return sourceType as string;
		} else {
			return N4TypeUtils.typeDescription(sourceType);
		}
	}
	
	/**
	 * Finds the first {@link Migratable} value (N4Object) in the given list 
	 * of arguments.
	 * 
	 * Returns {@code null} if the given arguments do not contain any migratable value/instance.
	 */
	public static findFirstMigratable(args : [?]) : N4IDLMigratable<Object> {
		const objectArguments = args
			.filter(a => (typeof a === "object" || typeof a === "function") && a != null);
		for (let i=0; i<objectArguments.length; i++) {
			let obj = objectArguments[i];
			
			let migratable = N4IDLMigratable.of(obj as Object);
			
			if (null != migratable) {
				return migratable;
			}
		}
		
		return null;
	}
	
	/** 
	 * Returns {@code true} iff the given list of arguments is considered
	 * to be well-formed.
	 */
	public static areWellformedArguments(args : [?]) : boolean {
		return args.filter((a) => MigrationUtils.isWellFormedArgument(a))
			.length == args.length;
	}
	
	/** 
	 * Returns {@code true} iff the given value is considered to be a well-formed
	 * migration argument.
	 */
	public static isWellFormedArgument(arg : any) : boolean {
		return arg != null &&
			typeof arg !== 'undefined';
	}
}

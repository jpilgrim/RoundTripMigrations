import {FunctionContextRoundTripTest} from "com/enfore/n4js/n4idl/context/FunctionContextRoundTripTest";
import {assertEqualGraph} from "graph/Node";
import {randomGraph} from "graph/RandomGraphGenerator";
import {MigrationControllerImpl} from "org/eclipse/n4js/n4idl/controller/MigrationController";
import {migrateArray} from "org/eclipse/n4js/n4idl/migrations/Migrations";
import {migrateElementAt} from "org/eclipse/n4js/n4idl/migrations/Migrations";

/**
 * Generates a random instance dependency graph using {@link randomGraph}
 * and transforms the result into a graph of model {@link StructuralNode}.
 * 
 * Performs a migration of the resulting instance of {@link StructuralNode} (2 to identical 3)
 * and transforms the result back to the original {@link Node#1} model.
 * 
 * Asserts that troughout these migrations, the graph structure is fully maintained.
 * 
 * The chain of transformations looks as follows:
 * 
 * randomGraph(...) -> Node#1 -> StructuralNode#2 -> StructuralNode#3 -> Node#1
 * 
 * Also see {@link NodeStructuralRoundTrip} for a round-trip between {@link Node#1} 
 * and {@link StructuralNode#2}.
 */
@VersionAware
export public class MigrateArbitraryFieldReferencesTest {
	
	@Test
	public testStructuralGraphIsMaintained() {
		let idCounter = 0;
		const regularGraph = randomGraph(123381226, 10, 6, () => new SubNode#1(idCounter++));
		
		const ctrl1 = MigrationControllerImpl.forTargetVersion(2);
		const structuralGraph = ctrl1.migrate([regularGraph]) as StructuralNode#2;
		
		const ctrl2 = MigrationControllerImpl.forTargetVersion(1);
		const nodeGraph = ctrl2.migrate([structuralGraph]) as SubNode#1;
		
		assertEqualGraph(regularGraph, nodeGraph, "Migration via structural-graph maintains the full graph structure.");
	}
}

/**
 * Round-trip test between {@link SubNode#1} and {@link StructuralNode#2}
 * instance graphs.
 */
@VersionAware
export public class NodeStructuralRoundTrip extends FunctionContextRoundTripTest<SubNode#1, StructuralNode#2> {
	@Override
	public instantiateOriginal() : SubNode#2 {
		let idCounter = 0;
		return randomGraph(123381226, 10, 6, () => new SubNode#1(idCounter++));
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : SubNode#1) {
		let idCounter = 0;
		const o = randomGraph(123381226, 10, 6, () => new SubNode#1(idCounter++));
		assertEqualGraph(roundTrip, o, "The round-trip instance equals the original graph.");
	}
}

export public class SubNode#1 {
	public id : int
	public successors : [SubNode]
	
	public constructor(id : int, successors : [SubNode]=) {
		this.successors = successors || [];
		this.id = id;
	}
}

/**
 * A node-like data structure which holds named
 * references for its first, second and third successor.
 * 
 * Stores all remaining successors in {@link #remainder}. 
 */
export public class StructuralNode#2 {
	public id : int
	
	public first? : StructuralNode
	public second? : StructuralNode
	public third? : StructuralNode
	
	public remainder : [StructuralNode]
}

@Migration function migrateNodeToStructuralNode(node : SubNode#1) 
	: StructuralNode#2 {
	const sn = new StructuralNode#2();
	
	sn.id = node.id;
	sn.first = migrateElementAt(node.successors, 0);
	sn.second = migrateElementAt(node.successors, 1);
	sn.third = migrateElementAt(node.successors, 2);
	
	sn.remainder = migrateArray.apply(this, [node.successors.slice(3)]) as [StructuralNode#2];
	
	return sn;
}

@Migration function migrateStructNode(node : StructuralNode#2) : StructuralNode#3 {
	// empty migration
	const sn = new StructuralNode#3();
	
	sn.id = node.id;
	sn.first = node.first;
	sn.second = node.second;
	sn.third = node.third;
	sn.remainder = migrateArray.apply(this, [node.remainder]) as [StructuralNode#3];
	
	return sn;
}

@Migration(3,1) function migrateStructNodeToNode(node : StructuralNode#3) : SubNode#1 {
	const n = new SubNode#1(node.id);
	
	const namedSuccessors = [node.first, node.second, node.third]
		.filter(v => typeof v !== 'undefined');
	
	for (let named of namedSuccessors) {
		const m : Object = migrate(named);
		n.successors.push(m as SubNode#1);
	}
	
	for (let r of node.remainder) {
		const m : Object  = migrate(r);
		n.successors.push(m as SubNode#1);
	}
	
	return n;
}
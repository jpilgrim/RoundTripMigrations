import {Node} from "graph/Node";
import {findAllNodes} from "graph/Node";
import {randomGraph} from "graph/RandomGraphGenerator";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {DirtyStateProxy} from "org/eclipse/n4js/n4idl/controller/DirtyStateProxy";

/** Test-class for simple dirty state detection. */
@VersionAware
export public class A {
	a : int
	b : string
	c : boolean
}

@VersionAware
export public class B {
	a : [A] = [];
}

/**
 * Unit-tests wrt class DirtyStateProxy.
 * 
 * Checks that the detection of a dirty state with regard to 
 * a {@link DirtyStateProxy}ed object works as intended.
 */
@VersionAware
export public class DirtyStateProxyTest {
	@Test
	testSimplePrimitiveFields() {
		const a = DirtyStateProxy.forObject(new A()); 
		assertClean("Clean after initialization", a);
		
		a.a = 3;
		a.b = "hello"
		a.c = true;
		
		assertDirty("A is dirty after initialization of a,b,c.", a);
		assertDirty("A.a is dirty after initialization.", a, "a");
		assertDirty("A.b is dirty after initialization.", a, "b");
		assertDirty("A.c is dirty after initialization.", a, "c");
		
		// take a new snapshot
		DirtyStateProxy.snapshot(a);
		assertClean("A is clean after fresh snapshot.", a);
		
		a.b = "you";
		assertDirty("A is dirty after modifying a.b.", a);
		a.c = false;
		assertDirty("A is still dirty after modifying a.c.", a);
		
		DirtyStateProxy.snapshot(a);
		assertClean("A is clean after fresh snapshot.", a);
		Reflect.set(a, "c", true, a);
		assertDirty("A is dirty after Reflect.set.", a);
	}
	
	@Test
	public testTouchObject() {
		const a = DirtyStateProxy.forObject(new A());
		a.a = 1;
		a.b = "hello";
		a.c = true;
		snapshot(a);
		
		assertClean("a is clean after initialization+snapshot", a);
		
		a.a = 1;
		assertDirty("a is dirty even though value of a.a remains unchanged (only touched).", a)
		assertDirty("a.a is dirty even though value of a.a remains unchanged (only touched).", a, "a")
		snapshot(a);
		
		assertClean("a is clean again after snapshot", a)
	}
	
	@Test
	public testNonExistentProperties() {
		const a = DirtyStateProxy.forObject(new A());
		
		assertClean("Non-existing property 'hello' on a is clean.", a, "hello");
		assertClean("Non-existing property 'hello' on a is clean.", a, "0");
	}
	
	@Test
	public testArray() {
		const ar = DirtyStateProxy.forObject([1, 2, 3, 4]);
		assertClean("Array is clean after initialization.", ar);
		
		ar[0] = 42;
		assertDirty("Array is dirty after modifying index 0", ar);
		assertDirty("Array is dirty at index 0 after modifiying it", ar, "0");
		assertClean("Array is clean for index 1 after modifying index 0", ar, "1");
		
		snapshot(ar);
		assertClean("Array is clean after fresh snapshot.", ar);
		ar.push(100);
		assertDirty("Array is dirty after pushing a new value", ar);
	}
	
	@Test
	public testNode() {
		const makeNode = Node#1.factory();
		const n = DirtyStateProxy.forObject(makeNode());
		n.successors = [
			makeNode(),
			makeNode()
		];
		
		const child1 = n.successors[0];
		const child2 = n.successors[1];
		
		assertDirty("n is dirty due to initialization.", n)
		snapshot(n);
		assertClean("n is clean after initialization+snapshot.", n)
		
		// modify a nested value
		child1.id = 42;
		assertDirty("child1 is dirty due to id-change.", child1);
		assertDirty("n is dirty due to contained change in child1.", n);
		assertClean("child2 is clean since unchanged.", child2);
		
		// take a fresh snapshot
		snapshot(n);
		assertClean("n is clean after snapshot.", n);
		assertClean("child1 is clean after snapshot on n.", child1);
		assertClean("child2 is clean since unchanged from the beginning.", child2);
		
		// modify a reference (remove child1)
		n.successors = n.successors.slice(1);
		assertClean("child1 was removed but remains unchanged itself", child1);
		assertClean("child2 remains unchanged", child1);
		assertDirty("n was changed (list of references changed)", n);
		
		// take a fresh snapshot
		snapshot(n);
		assertClean("n is clean after snapshot.", n);
		assertClean("child1 is clean after snapshot.", child1);
		assertClean("child2 is clean after snapshot.", child2);
		
		// modify removed child1
		child1.id = 123;
		assertDirty("child1 is dirty as changed.", child1);
		assertClean("child2 is not affected by changes to child1.", child2);
		assertClean("n is not affected by changes to separated child1 anymore.", n);
	}
	
	@Test
	public testLargeGraphs() {
		this.testLargeRandomGraph(78497087, 15, 4);
		this.testLargeRandomGraph(8069932, 15, 4);
		this.testLargeRandomGraph(78646687, 15, 4);
		this.testLargeRandomGraph(45707969, 15, 4);
		this.testLargeRandomGraph(75419795, 15, 4);
		this.testLargeRandomGraph(80894168, 15, 4);
		
		this.testLargeRandomGraph(93523234, 20, 10);
		this.testLargeRandomGraph(18641952, 20, 10);
		this.testLargeRandomGraph(49711645, 20, 10);
	}
	
	private testLargeRandomGraph(seed : number, numberOfStates : int, maxOutgoing : int) {
		const root = DirtyStateProxy.forObject(randomGraph(seed, numberOfStates, maxOutgoing, Node#1.factory()));
		const nodes = Array.from(findAllNodes(root));
		
		// modify each node and check that the dirty state propagates to root
		for (let n of nodes) {
			const id = n.id;
			n.id = 3;
			assertDirty("Node " + id + " is dirty after change", n);
			assertDirty("Field id of node " + id + " is dirty after change", n, "id");
			assertDirty("Root is dirty due to change to node " + id, root);
			
			// restore id and create snapshot
			n.id = id;
			snapshot(n);
			assertClean("n is clean after a new snapshot", n);
			assertClean("n.id is clean after a new snapshot", n, "id");
			assertClean("root is clean after a new snapshot of n", root);
			
			// change again (only touch this time) 
			n.id = id;
			assertDirty("n is dirty after touch of id", n);
			assertDirty("n.id is dirty after touch of id", n, "id");
			assertDirty("root is dirty after touch of n.id", root);
			
			// this time create a new snapshot of root
			snapshot(root);
			assertClean("n is clean after a new snapshot of root", n);
			assertClean("n.id is clean after a new snapshot of root ", n, "id");
			assertClean("root is clean after a new snapshot of root", root);
		}
	}
	
	@Test
	public testDirtyArray() {
		const b = new B();
		b.a.push(new A());
		
		const proxy = DirtyStateProxy.forObject(b);
		
		assertClean("Proxy of B is initially clean.", proxy);
		proxy.a[0].a = 1;
		assertDirty("Proxy of B is dirty after changing [0].a", proxy);
		
		snapshot(proxy);
		assertClean("Proxy of B is clean after snapshot.", proxy);
		
		proxy.a.push(new A());
		assertDirty("Proxy of B is dirty after adding new element to a.", proxy);
		
		snapshot(proxy);
		assertClean("Proxy of B is clean after snapshot.", proxy);
		
		proxy.a.splice(1, -1, new A());
		assertDirty("Proxy of B is dirty after splicing new element into a.", proxy);
		
		Assert.equal(proxy.a.length, 3, "b.a is of expected length.")
	}
}

/**
 * Creates a fresh snapshot of the given object.
 */
function snapshot(o : Object) {
	DirtyStateProxy.snapshot(o);
}

/**
 * Asserts that the given field is considered non-dirty (unchanged) for the given object.
 * 
 * Asserts that the given object is clean, if field is undef.
 */
function assertClean(message : string, o : Object, field : string = undefined) {
	Assert.isFalse(DirtyStateProxy.isDirty(o, field), message)
}

/**
 * Asserts that the given field is considered dirty for the given object.
 * 
 * Asserts that the given object is dirty, if field is undef.
 */
function assertDirty(message : string, o : Object, field : string = undefined) {
	Assert.isTrue(DirtyStateProxy.isDirty(o, field), message)
}
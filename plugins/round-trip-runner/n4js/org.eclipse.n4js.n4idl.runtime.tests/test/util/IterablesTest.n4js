import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {Iterables} from "org/eclipse/n4js/n4idl/util/Iterables";

/**
 * Unit test for {@link Iterable} utility class {@link Iterables}.
 */
export public class IterablesTest {
	@Test
	testArrayConcatenation() {
		Assert.equal(
			Array.from(Iterables.concat([[1,2,3],[4,5,6]])).join(","), 
			"1,2,3,4,5,6", 
			"Array concatenation (2) works.");
		Assert.equal(
			Array.from(Iterables.concat([[1],[2],[3],[],[4,5],[6]])).join(","), 
			"1,2,3,4,5,6", 
			"Array concatenation (6)");
	}
	
	@Test
	testIterableTransformation() {
		Assert.equal(
			Array.from(Iterables.map([1,2,3,4], n => n+1)), 
			"2,3,4,5", 
			"Simple array transform.");
			
		const concatIterable = Iterables.concat([[1],[2],[3],[],[4,5],[6]]);
		Assert.equal(
			Array.from(Iterables.map(concatIterable, n => n+1)), 
			"2,3,4,5,6,7", 
			"Concat array transform.");
	}
	
	@Test
	testIterableEmpty() {
		Assert.isTrue(
			Iterables.isEmpty([]), 
			"Empty array is an empty Iterable.");
		
		const emptyIterable = Iterables.iterable(() => { return {next: () => { return {done: true}}}});
		Assert.isTrue(Iterables.isEmpty(emptyIterable), "Custom empty iterable.")
		
		Assert.isFalse(
			Iterables.isEmpty([1]),
			"Non-empty array (length == 1) is non-empty iterable.");
		
		Assert.isFalse(
			Iterables.isEmpty([1,2]),
			"Non-empty array (length == 2) is non-empty iterable.");
		
		const infiniteIterable = Iterables.iterable(() => { return {next: () => { return {done: false, value: 1}}}})
		Assert.isFalse(
			Iterables.isEmpty(infiniteIterable),
			"Non-empty array is non-empty iterable.")
	}
	
	@Test
	testIterableWrapper() {
		const wrapped = Iterables.wrap([-2,-1,0,1,2,3])
		Assert.equal(wrapped
			.filter(n => n >= 0)
			.map(n => n + 3)
			.concat([[100, 101], [200, 201, 202]])
			.toArray().join(","), "3,4,5,6,100,101,200,201,202", "Iterable wrapper.");
	}
}

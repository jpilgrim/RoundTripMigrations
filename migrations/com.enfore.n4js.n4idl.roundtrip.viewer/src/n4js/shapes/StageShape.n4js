import {Util} from "jointjs";
import {BoundingBox} from "jointjs";
import {Element} from "jointjs";
import {Graph} from "jointjs";
import {Position} from "jointjs";
import {Generic} from "jointjs-shapes";
import {InstanceShape} from "shapes/InstanceShape";

/** 
 * Graph view that represents a stage in a round-trip migration
 * (e.g. original, migrated, etc.).
 */
export public class StageShape extends Generic {
	const defaults = {
			type: N4Type.of(StageShape).name,
			attrs: {
				'.roundtrip-stage-rect': {
					'stroke': 'transparent',
					'stroke-width': 1,
					'fill': '#fafafa',
					'width': 200,
					'height': 200,
					"z-index": -999
				},
				'.roundtrip-stage-name': {
					'ref': '.roundtrip-stage-rect',
					'ref-y': 2,
					'ref-x': .5,
					'text-anchor': 'middle',
					'y-alignment': 'top',
					'font-weight': 'bold',
					'fill': '#4c4b4b',
					'font-size': 12,
					'font-family': 'Helvetica'
				}
			},
			name: [],
			padding: 7,
			titleBarHeight: 15
		};

	private markup = [
			'<g class="rotatable">',
			'<g class="scalable">',
			'<rect class="roundtrip-stage-rect"/>',
			'</g>',
			'<text class="roundtrip-stage-name"/>',
			'</g>'
		].join('');

	/**
	 * Instantiates a new {@link Stage} with the given attributes.
	 */
	public constructor(attrs: Object+) {
		super(Util.assign(Util.defaultsDeep(
			// most importantly, set the type name
			{type: N4Type.of(StageShape).name}, 
			// use constructor arguments as attributes
			attrs,
			// fall-back defaults
			StageShape.defaults, 
			this)));
	}

	@Override
	public initialize() {
		var attrs : Object+ = this.get("attrs") as Object;
		attrs[".roundtrip-stage-name"].text = this.get("name");

		super.initialize.apply(this, arguments as Array<?>);
	}

	@Override
	public setEmbeddedPosition(x: int, y: int) {
		this.beforePosition(this.position(), {x: x, y: y});
		this.position(x, y);
	}

	private beforePosition(position: ~Position, newPosition: ~Position) {
		this.getEmbeddedCells().forEach((cell) => {
				if (cell instanceof Element) {
					let cellPosition = (cell as Element).position();
					let dX = cellPosition.x - position.x;
					let dY = cellPosition.y - position.y;

					(cell as Element).position(newPosition.x + dX, newPosition.y + dY);
				}
			});
	}

	/**
	 * Setups auto-scale for this {@link Stage}.
	 *
	 * That is, whenever one of the embedded cells of this stage change their position,
	 * the stage is resized to make sure, that all embedded cells are always in the bounds
	 * of the stage rectangle.
	 */
	public setupAutoScale(graph: Graph) {
		graph.on("change:position", (cell, newPosition, opt) => {
				if (opt.skipParentHandler) {
					return;
				}
				let parentId = cell.get("parent") as string;
				if (!parentId) {
					return;
				}
				let parent = graph.getCell(parentId);
				// only apply the auto-resizing to roundtrip.stage elements
				if (!(parent instanceof StageShape)) {
					return;
				}
				
				(parent as StageShape).fitEmbeddedCells();
			});
	}
	
	/**
	 * Sets the dimensions of this stage shape to contain
	 * all embedded cells with a fixed margin ({@link #attributes.padding}).
	 */
	public fitEmbeddedCells() {
		// compute bounding box for contained roundtrip.instance elements
		let bbox = computeBBox(this.getEmbeddedCells()
			.filter(c => c instanceof InstanceShape)
			.map(c => c as InstanceShape));
		let padding = this.get("padding");
		let titleBarHeight = this.get("titleBarHeight");
		
		this.set({position: {x: bbox.x - padding, y: bbox.y - padding - titleBarHeight},
			size: {width: bbox.width + 2 * padding, height: bbox.height + 2 * padding + titleBarHeight}});
	}
}

/**
 * Computes the bounding box of a given list of cells.
 *
 * @param {Array<~Object with {getBBox() : BBox}>} cells 
 *
 * @returns {{x: int, y: int, width: int, height: int}}
 */
function computeBBox(elements: [Element]): ~r~BoundingBox {
	// early-exit if there are no cells
	if (elements.length == 0) {
		return {x: 0, y: 0, width: 0, height: 0};
	}

	let firstCellBox = elements[0].getBBox();
	// initialise values with first cell
	let bbox = {
			minX: firstCellBox.x,
			minY: firstCellBox.y,
			maxX: firstCellBox.corner().x,
			maxY: firstCellBox.corner().y
		};

	for (let element: Element of elements) {
		let box = element.getBBox();

		bbox.minX = Math.min(box.x, bbox.minX);
		bbox.minY = Math.min(box.y, bbox.minY);
		bbox.maxX = Math.max(box.corner().x, bbox.maxX);
		bbox.maxY = Math.max(box.corner().y, bbox.maxY);
	}
	
	const result = {
			x: bbox.minX,
			y: bbox.minY,
			width: bbox.maxX - bbox.minX,
			height: bbox.maxY - bbox.minY
		};

	return result;
};

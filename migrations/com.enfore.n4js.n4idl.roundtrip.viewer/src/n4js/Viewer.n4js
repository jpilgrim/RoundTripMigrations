/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {InstanceProxy} from "GraphModel";
import {MultiGraphModel} from "GraphModel";
import {SerializedInstance} from "GraphModel";
import {SerializedObjectGraph} from "GraphModel";
import {InstanceUtils} from "InstanceUtils";
import {ROUNDTRIP_STAGES} from "RoundTripStages";
import {Cell} from "jointjs";
import {Dia} from "jointjs";
import {Element} from "jointjs";
import {Graph} from "jointjs";
import {Layout} from "jointjs";
import {Paper} from "jointjs";
import {UML} from "jointjs";
import {UMLComposition} from "jointjs";
import jQuery from "jquery";
import {TraceLink} from "links/TraceLink";
import {InstanceShape} from "shapes/InstanceShape";
import {StageShape} from "shapes/StageShape";
import svgPanZoom from "svg-pan-zoom";
import {Link} from "jointjs";
import {ViewerLayout} from "layouts/RoundTripLayouts";

/**
 * Layout options for the DAG-algorithm that layouts
 * the object graph elements.
 */
const layoutOptions = {
	setVertices: false,
	setLabels: true
};

var traceLinks : [Link] = [];
var showTraces = true;

/**
 * Main {@link Viewer} class.
 */
export public class Viewer {
	private paper : Paper
	private graph : Graph
	
	// indicates whether this view is currently handling mouse events
	private mouseResponder : boolean
	// indicates whether the view is currently handling a pressed mouse event
	private mouseDown : boolean
	
	// a list of all round-trip stage shapes in this viewer
	@Final public stages = new Array<StageShape>();
	
	/** Returns {@code true} iff this viewer is currently configured to display trace links. */
	public get displaysTraces() : boolean {
		return showTraces;
	}
	
	constructor(paper : Paper, graph : Graph) {
		this.paper = paper;
		this.graph = graph;
		
		jQuery(window).on("resize", (event) => this.fillSpace())
		
		// allow window-access to viewer instance (for debugging purposes)
		window.viewer = this;
	}
	
	initPanAndZoom() {
		// initialise svgPanZoom
		svgPanZoom(this.paper.$el.find("svg").get(0), {
			beforePan: () => {
				// only pan if paper is not the current responder (when moving links and cells)
				return !this.mouseResponder && ! this.mouseDown;
			},
			zoomScaleSensitivity: 0.1
		});
	
		// register listeners to avoid conflicts with svg-pan-and-zoom
		this.paper.on("cell:pointerdown", (event) => this.mouseDown = true);
		jQuery(window).on("mouseup", () => this.mouseDown = false);
	
		this.paper.on("link:mouseenter", (event) => this.mouseResponder  = true);
		this.paper.on("link:mouseleave", (event) => this.mouseResponder  = false);
	}
	
	/**
	 * Resizes the paper so that it takes up all available window space.
	 */
	fillSpace() {
		let width = jQuery(window).width();
	    let height = jQuery(window).height();
	
	    this.setSize(width, height);
	}
	
	/**
	 * Sets the size of the paper as required by the elements
	 * in graph.
	 *
	 * Uses width and height as the minimum paper dimensions.
	 *
	 * @param {Paper} paper
	 * @param {Graph} graph
	 * @param {int} width
	 * @param {int} height
	 */
	setSize(width: int, height: int) {
		this.paper.setDimensions(width, height);
	}
	
	/**
	 * Centers the cells in graph on the given paper.
	 *
	 * @param {Paper} paper
	 * @param {Graph} graph
	 */
	center() {
		let bb = this.graph.getBBox();
		
		// if graph does not contain any elements
		if (bb == null) {
			// nothing to center
			return;
		}
	
		let centerBBX = 10;
		let centerBBY = 10;
	
		let centerDX = centerBBX - bb.x;
		let centerDY = centerBBY - bb.y;
	
		this.graph.getCells().forEach(cell => {
			if (cell instanceof Dia.Element) {
				let pos = (cell as Element).position();
				(cell as Element).position(pos.x + centerDX, pos.y + centerDY);
			}
		});
	}
	
	/**
	 * Initialises this viewer to display a single round-trip stage
	 * containing the given set of instances.
	 */
	initialiseSingleRoundtripStage(instances : [SerializedInstance]) 
		: Array<InstanceShape> {
		let objectGraph = this.initialiseObjectGraph(instances);
		let classes = objectGraph.classes;
		let relations = objectGraph.relations;
		
		let all = new Array<Cell>();
		classes.forEach(c => all.push(c));
		relations.forEach(r => all.push(r));
		
		Layout.DirectedGraph.layout(all, layoutOptions);

		return classes;
	}
	
	/**
	 * Initialises a new roundtrip stage with a parent 'stage'-element
	 * as well as the given name and adds it to this viewer.
	 *
	 * @param {Array<SerializedInstance>} instances
	 * @param {string} name Graph name
	 */
	initialiseRoundtripStage(instances : [SerializedInstance], name : string) 
		: union{StageShape, Array<InstanceShape>} {
		let objectGraph = this.initialiseObjectGraph(instances);
		let classes = objectGraph.classes;
		let relations = objectGraph.relations;
	
		let stage = new StageShape({
			name: name
		});
		
		this.graph.addCell(stage);
		stage.setupAutoScale(this.graph);

		classes.forEach(c => stage.embed(c));
		relations.forEach(r => stage.embed(r));
		
		classes.forEach(c => c.toBack());
		stage.toBack();

		Layout.DirectedGraph.layout(stage.getEmbeddedCells(), layoutOptions);
		
		// fit stage dimensions to embedded cells
		stage.fitEmbeddedCells();

		// collect all initialised stages of this viewer
		this.stages.push(stage);

		return stage;
	}
	
	/**
	 * Initialises the view model for the given instances and
	 * adds them to this {@link Viewer}.
	 */
	initialiseObjectGraph(instances : [SerializedInstance])
		: ~Object with {classes: [InstanceShape], relations: [UMLComposition]} {
		var classes = new Array<InstanceShape>();
		var relations = new Array<UMLComposition>();
	
		for (let instance of instances) {
			let instanceClass = getUMLClassFromInstance(instance);
			classes.push(instanceClass);
			instance.id = instanceClass.id;
		}
		
		for (let instance of instances) {
			instance.fields
				.filter(f => !f.type.builtIn && !f.type.isEnum)
				.forEach(f => {
					let relation = new UML.Composition({
							source: {id: instance.id},
							target: {id: classes[(f.value as InstanceProxy).target].id},
							attrs: {
								".marker-arrowheads": { display: "none" },
								".link-tools": { display: "none" },
								".marker-target": {
									"transform": "scale(0.3, 0.3)"
								},
								"text": {
									"font-family": "Helvetica"
								}
							}
						});
					relation.label(0, {attrs: {text: {text: f.fieldName}}})
					relations.push(relation);
				})
		}
	
		classes.forEach(c => this.graph.addCell(c));
		relations.forEach(r => this.graph.addCell(r));
	
		// after displaying resize classes to match the size
		// of the attribute text
		this.fitInstances(classes);
	
		return {
			classes: classes,
			relations: relations
		}
	}
	
	/**
	 * Resizes the given list of {@link InstanceShape}s to 
	 * fit their contents size.
	 */
	private fitInstances(instances : [InstanceShape]) : void {
		instances.forEach(c => {
			let actualSize = c.findView(this.paper).getBBox({useModelGeometry: false})
			actualSize.width = computeInstanceWidth(c);
			
			const minWidth = 90;
			const minHeight = 10;
			
			const width = Math.max(minWidth, actualSize.width);
			const height = Math.max(minHeight, actualSize.height + 30);
			
			c.resize(width, height);
		});
	}
	
	/**
	 * Creates links for all trace links given by data.traceLinks.
	 * 
	 * Does nothing if data.traceLinks == undefined.
	 */
	createAllTraceLinks(data : MultiGraphModel) {
		// early exit, if the data does not contain any trace links
		if (!data.traceLinks) {
			return;
		}
	
		for (let [fromURI, toURI] of data.traceLinks) {
			let from = resolveSubGraphURI(data, fromURI);
			let to = resolveSubGraphURI(data, toURI);
	
			let link = new TraceLink(from, to);
			this.graph.addCell(link);
			traceLinks.push(link);
		}
	}
	
	/**
	 * Posts a viewer notification with the given text.
	 * 
	 * The notification will be hidden automatically after a while.
	 */
	postNotification(text : string) {
		let element: HTMLElement+ = document.querySelector("#notification");
		element.innerHTML = text;
		element.style.display = "inline-block";
	
		let stamp = Math.random();
		element.stamp = stamp;
	
		window.setTimeout(() => {
			if (element.stamp == stamp) {
				element.style.display = "none";
			}
		}, 5000);
	}
	
	public layout(viewerLayout: ViewerLayout) {
		viewerLayout.layout(this.stages);
	}
}

/**
 * Returns a new Shape instance that represents the
 * given Instance model element.
 *
 * @param {Instance} instance
 */
function getUMLClassFromInstance(instance : SerializedInstance) : InstanceShape {
	var attributes = instance.fields
		.filter(f => f.type.builtIn || f.type.isEnum)
		.map(f => InstanceUtils.getFieldStringDescription(f)) as [string]

	return new InstanceShape({
        name: ":" + instance.className.replace("$", "#"),
        attributes: attributes
    })
}

/**
 * @param {string} uri The sub-graph URI to resolve
 * @returns {string} The corresponding element class element in data.
 * 						Returns {@code null} if the URI cannot be resolved.
 */
function resolveSubGraphURI(data : MultiGraphModel+, uri : string) : Element{
	let segments = uri.split(".");
	
	if (segments.length != 2) {
		console.log("Failed to resolve ", uri, ": Malformed URI.");
		return null;
	}

	let stage = segments[0];
	let stageId = parseInt(segments[1]);
	
	if (stageId == NaN || stageId < 0) {
		console.log("Failed to resolve", uri, ". ", segments[1], "is not a valid stage id.");
		return null;
	}

	if (ROUNDTRIP_STAGES.indexOf(stage) == -1) {
		console.log("Failed to resolve", uri, ". '" + stage + "' is not a valid stage key.");
		return null;
	}

	let validDataKeys = Object.keys(data);

	if (validDataKeys.indexOf(stage) == -1) {
		console.log("Failed to resolve", uri, ": Unknown stage key ", stage);
		return null;
	}
	
	let stageData = data[stage] as SerializedObjectGraph;

	if (stageData.registry.length <= stageId) {
		console.log("Failed to resolve", uri, ". ", segments[1], "exceeds the registry bounds.");
		return null;
	}

	return data[stage].registry[stageId] as Element;
}

/** 
 * Toggles the visibility of trace links in the round-trip viewer. 
 */
function toggleTraceLinks() {
	showTraces = !showTraces;
	traceLinks.forEach((l) => { if (l) l.attr('./display', showTraces ? "block" : "none") })
}

/**
 * Computes the rough pixel-width of the given string, 
 * based on the default font size of 12pt.
 * 
 * However, this is just an estimate due to the use of a 
 * non-monospaced font and kerning.
 */
function stringWidth(s : string) : number {
	return s.length * 6;
}

/**
 * Computes the maximum width of any text-element that is contained by the 
 * given {@link InstanceShape} (includes attributes and name).
 */
function computeInstanceWidth(instance : InstanceShape) : number {
	const attributes = instance.get("attributes") as [string];
	const attributeWidth = 
			Math.max.apply(null, attributes.map((a : string) : number => stringWidth(a))) as int || 0;
	// if class name is the longest string, use it as width
	return Math.max(attributeWidth, stringWidth(instance.getClassName()) + 15);
}

window.toggleTraceLinks = toggleTraceLinks;
/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {ObjectGraph} from "com/enfore/n4js/n4idl/objectgraph/ObjectGraph";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {Field} from "com/enfore/n4js/n4idl/objectgraph/Field";
import {InstanceProxy} from "com/enfore/n4js/n4idl/objectgraph/ObjectGraph";
import {Instance} from "com/enfore/n4js/n4idl/objectgraph/Instance";

export public class TestObjectGraph {

	@Test
	testSimpleObject() {
		const o = new TestClass(1, "Hello");
		o.objField = new TestClass(2, "There");

		let graph = ObjectGraph.graphiphy(o).graph;

		Assert.equal(graph.root.className, "TestClass");
		Assert.equal(graph.root.getFields().length, 3);

		let fields = TestObjectGraph.fields(graph.root);

		Assert.equal(fields.get("intField").typeName, "number");
		Assert.equal(fields.get("stringField").typeName, "string");
		Assert.equal(fields.get("objField").typeName, "TestClass");
		let objField = fields.get("objField");

		Assert.isTrue(objField.getValue() instanceof InstanceProxy);
		let resolvedInstance = graph.resolve(objField.getValue() as InstanceProxy);

		Assert.isTrue(resolvedInstance instanceof Instance);

		let resolvedFields = TestObjectGraph.fields(resolvedInstance);
		Assert.equal(resolvedFields.get("intField").typeName, "number");
		Assert.equal(resolvedFields.get("stringField").typeName, "string");
		Assert.equal(resolvedFields.get("objField").typeName, "undefined");
	}

	@Test
	testResolveAll() {
		const o = new TestClass(1, "Hello");
		o.objField = new TestClass(2, "There");

		let graph = ObjectGraph.graphiphy(o).graph;
		let serializedResult = JSON.stringify(graph.resolveAll(graph.root), undefined, 4);

		let expectation = {
				"className": "TestClass",
				"fields": [
					{
		            "fieldName": "intField",
		            "type": {
		                "name": "number",
		                "builtIn": true,
		                "isEnum": false
		            },
		            "value": 1
		        },
							{
		            "fieldName": "stringField",
		            "type": {
		                "name": "string",
		                "builtIn": true,
		                "isEnum": false
		            },
		            "value": "Hello"
		        },
							{
		            "fieldName": "objField",
		            "type": {
		                "name": "Instance",
		                "builtIn": false,
		                "isEnum": false
		            },
		            "value": {
		                "className": "TestClass",
		                "fields": [
		                    {
		                        "fieldName": "intField",
		                        "type": {
		                            "name": "number",
		                            "builtIn": true,
		                            "isEnum": false
		                        },
		                        "value": 2
		                    },
		                    {
		                        "fieldName": "stringField",
		                        "type": {
		                            "name": "string",
		                            "builtIn": true,
		                            "isEnum": false
		                        },
		                        "value": "There"
		                    },
		                    {
		                        "fieldName": "objField",
		                        "type": {
		                            "name": "undefined",
		                            "builtIn": true,
		                            "isEnum": false
		                        }
		                    }
		                ]
		            }
		        }]
			};

		Assert.equal(serializedResult, JSON.stringify(expectation, undefined, 4));
	}

	@Test
	testArray() {
		const obj = new ArrayTestClass({
				array: [
					new Element(1),
					new Element(2),
					new Element(3)
				]
			});

		const graph = ObjectGraph.graphiphy(obj).graph;
		const serializedResult = JSON.stringify(graph, undefined, 4);

		const expectations = {
				"registry": [{
					"className": "ArrayTestClass",
		            "fields": [
		                {
		                    "fieldName": "array[0]",
		                    "type": {
		                        "name": "Element",
		                        "builtIn": false,
		                        "isEnum": false
		                    },
		                    "value": {
		                        "target": 1
		                    }
		                },
		                {
		                    "fieldName": "array[1]",
		                    "type": {
		                        "name": "Element",
		                        "builtIn": false,
		                        "isEnum": false
		                    },
		                    "value": {
		                        "target": 2
		                    }
		                },
		                {
		                    "fieldName": "array[2]",
		                    "type": {
		                        "name": "Element",
		                        "builtIn": false,
		                        "isEnum": false
		                    },
		                    "value": {
		                        "target": 3
		                    }
		                }
		            ]
		        },
							{
		            "className": "Element",
		            "fields": [
		                {
		                    "fieldName": "value",
		                    "type": {
		                        "name": "number",
		                        "builtIn": true,
		                        "isEnum": false
		                    },
		                    "value": 1
		                }
		            ]
		        },
							{
		            "className": "Element",
		            "fields": [
		                {
		                    "fieldName": "value",
		                    "type": {
		                        "name": "number",
		                        "builtIn": true,
		                        "isEnum": false
		                    },
		                    "value": 2
		                }
		            ]
		        },
				{
		            "className": "Element",
		            "fields": [
		                {
		                    "fieldName": "value",
		                    "type": {
		                        "name": "number",
		                        "builtIn": true,
		                        "isEnum": false
		                    },
		                    "value": 3
		                }
		            ]
		        }]
			};

		Assert.equal(serializedResult, JSON.stringify(expectations, undefined, 4),
			"Graph representation of an array instance looks as expected.");
	}

	@Test
	testEmptyGraph() {
		const graph = new ObjectGraph([]);
		Assert.equal(graph.root, undefined, "Root is undefined for empty object graph");
	}

	private static fields(instance: Instance): Map<string, Field> {
		let fields: Map<string, Field> = new Map<string, Field>();
		instance.getFields().forEach(f => fields.set(f.name, f));
		return fields;
	}
}
class TestClass {
	intField: int;
	stringField: string;
	objField: TestClass;
	constructor(i: int, s: string) {
		this.intField = i;
		this.stringField = s;
	}
}

class Element {
	value: int;
	constructor(value: int) {
		this.value = value;
	}
}

class ArrayTestClass {
	public array: Array<Element>;
	constructor(@Spec spec: ~i~this) {}
}

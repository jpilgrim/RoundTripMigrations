/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {CreateDeleteReference} from "Sce04_CreateDeleteReference/CreateDeleteReference";
import {ReferencedElement} from "Sce04_CreateDeleteReference/CreateDeleteReference";
import {InstanceAssert} from "com/enfore/n4js/n4idl/assert/InstanceAssert";
import {FunctionContextRoundTripTest} from "com/enfore/n4js/n4idl/context/FunctionContextRoundTripTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * In this scenario a reference to another class is removed from #1 -> #2.
 * 
 * To retain the value of the reference, the trace of the migrated instance
 * is used to restore the instance that was reference by 'reference' when
 * migrating back.
 */
@VersionAware
export public class CreateDeleteReferenceTest extends FunctionContextRoundTripTest<CreateDeleteReference#1, CreateDeleteReference#2> {
	
	@Override
	public instantiateOriginal() : CreateDeleteReference#1 {
		let o1 = new CreateDeleteReference#1();
	
		o1.reference = new ReferencedElement#1({
			value: "referencedElementValue"
		});
		o1.unrelated = "someUnrelatedValue";
		
		return o1;
	}
	
	
	@Override
	public assertMigratedInstance(migrated: CreateDeleteReference#2) {
		Assert.equal(migrated.unrelated, "someUnrelatedValue", "The migrated instance retains the unrelated field value.");
	}
	
	@Override
	public assertRoundTripInstance(roundTrip: CreateDeleteReference#1) {
		InstanceAssert.equalSerialisation(roundTrip, this.instantiateOriginal(), 
			"The serialisation of the round-trip matches the original serialisation.");
	}
}

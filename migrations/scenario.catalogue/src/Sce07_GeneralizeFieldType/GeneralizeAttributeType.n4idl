/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
// @section v1
export public class GeneralizeFieldType#1 {
	public field : FieldType
}

export public class SuperFieldType#1 {
	public generic : string
}

export public class FieldType#1 
	extends SuperFieldType {
		
	public specific : string 
}

// @section v2
export public class GeneralizeFieldType#2 {
	public field : SuperFieldType
}

export public class SuperFieldType#2 {
	public generic : string
}

export public class FieldType#2 
	extends SuperFieldType {
	
	public specific : string 
}


// @section migrations
@Migration
export function migrateBackSuperAttribute(a2 : SuperFieldType#2) : FieldType#1 {
	// obtain previous revision 
	const previousRevision = context.getTrace(a2)[0] as FieldType#1 || {} as FieldType#1;
	
	const a1 = new FieldType#1();
	a1.generic = a2.generic;
	a1.specific = previousRevision.specific ||Â "defaultSpecificValue";
	
	return a1;
}

@Migration
export function migrateAttribute(a1 : FieldType#1) : SuperFieldType#2 {
	const previousRevision = (context.getTrace(a1)[0] || {}) as SuperFieldType#2; 
	
	let a2 : SuperFieldType#2

	// If field has been of type SuperAttributeType but not
	// of AttributeType, and field 'specific' has not been changed
	if (previousRevision instanceof SuperFieldType#2 
		&& !(previousRevision instanceof FieldType#2)
		&& !(context.isModified(a1, "specific"))) {
		// migrate back to SuperAttribute type
		a2 = new SuperFieldType#2();
	} else { // no previous revision, or a previous revision of type AttributeType
		a2 = new FieldType#2();
		(a2 as FieldType#2).specific = a1.specific;
	}
	
	// set generic field in any case
	a2.generic = a1.generic;

	return a2;	
}

// @endsection
@Migration
export function migrateBackAttribute(a2 : FieldType#2) : FieldType#1 {
	const a1 = new FieldType#1();
	
	a1.generic = a2.generic;
	a1.specific = a2.specific;
	
	return a1;
}

@Migration
export function migrate(o1 : GeneralizeFieldType#1) : GeneralizeFieldType#2 {
	let o2 = new GeneralizeFieldType#2();

	o2.field = migrate(o1.field); 

	return o2;
}

@Migration
export function migrateBack(o2 : GeneralizeFieldType#2) : GeneralizeFieldType#1 {
	let o1 = new GeneralizeFieldType#1();

	o1.field = migrate(o2.field);
	
	return o1;
}

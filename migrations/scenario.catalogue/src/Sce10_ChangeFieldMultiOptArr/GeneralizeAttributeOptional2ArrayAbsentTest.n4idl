/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {Element} from "Sce10_ChangeFieldMultiOptArr/GeneralizeAttributeOptional2Array";
import {GeneralizeAttributeOptional2Array} from "Sce10_ChangeFieldMultiOptArr/GeneralizeAttributeOptional2Array";
import {ModificationMappingTest} from "com/enfore/n4js/n4idl/context/ModificationMappingTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * #1 -> #2 -> #1
 * 
 * In version 2 an element is added to the array 'field'.
 * As a consequence this modification is visible in #1, in that
 * the optional 'field' now has the added value.
 */
@VersionAware
export public class GeneralizeAttributeOptional2ArrayReplaceTest extends 
	ModificationMappingTest<GeneralizeAttributeOptional2Array#1, GeneralizeAttributeOptional2Array#2> {

	@Override
	public instantiateOriginal() : GeneralizeAttributeOptional2Array#1 {
		let o1 = new GeneralizeAttributeOptional2Array#1();
	
		// optional is undefined
		o1.field = undefined;
		
		return o1;
	}
	
	@Override
	public modifyMigratedInstance(migrated : GeneralizeAttributeOptional2Array#2) {
		// append a new element
		const newElement = new Element#2();
		newElement.value = "newElementValue";
		
		migrated.field.push(newElement);
	}

	@Override
	public modifyOriginalInstance(original : GeneralizeAttributeOptional2Array#1)Â {
		// only the replacing of the first elements has an effect on #1
		original.field = new Element#1();
		original.field.value = "newElementValue";
	}
	
	@Override
	public assertMigratedInstance(migrated: GeneralizeAttributeOptional2Array#2) {
		Assert.equal(migrated.field.length, 0, "The original absent 'field' has been migrated to an empty array.");
	}
}

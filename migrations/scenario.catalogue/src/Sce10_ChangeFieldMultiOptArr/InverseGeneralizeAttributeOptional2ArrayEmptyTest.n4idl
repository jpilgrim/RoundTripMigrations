/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {Element} from "Sce10_ChangeFieldMultiOptArr/GeneralizeAttributeOptional2Array";
import {GeneralizeAttributeOptional2Array} from "Sce10_ChangeFieldMultiOptArr/GeneralizeAttributeOptional2Array";
import {ModificationMappingTest} from "com/enfore/n4js/n4idl/context/ModificationMappingTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/** 
 * #2 -> #1 -> #2
 * 
 * The 'field' in #2 is an empty array. In #1 we set 'field' to a 
 * new value. Therefore, the round-trip migrated instance is expected
 * to have a single-element array with the new value as the value of 'field' 
 */
@VersionAware
export public class InverseGeneralizeAttributeOptional2ArrayChangeTest extends 
	ModificationMappingTest<GeneralizeAttributeOptional2Array#2, GeneralizeAttributeOptional2Array#1> {

	@Override
	public instantiateOriginal() : GeneralizeAttributeOptional2Array#2 {
		let o2 = new GeneralizeAttributeOptional2Array#2();
	
		o2.field = [];
		
		return o2;
	}
	
	@Override
	public modifyMigratedInstance(migrated : GeneralizeAttributeOptional2Array#1) {
		// set the field to an absent value
		migrated.field = new Element#1();
		migrated.field.value = "newValue";
	}

	@Override
	public modifyOriginalInstance(original : GeneralizeAttributeOptional2Array#2)Â {
		// add a new element with value 'newValue' to 'field'
		original.field.push(new Element#2())
		original.field[0].value = "newValue";
	}
	
	@Override
	public assertMigratedInstance(migrated: GeneralizeAttributeOptional2Array#1) {
		Assert.isNull(migrated.field, "An empty array is mapped to an absent optional.")
	}
}

/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {Type} from "com/enfore/n4js/n4idl/objectgraph/Type";

/**
 * Represents a field in a ObjectGraph instance.
 * 
 * A Field specifies value, type as well as the name of an instance field.
 */
export public class Field {
	/**
	 * Returns a field representing the field of the given 
	 * object.
	 * 
	 * @param object The object the field belongs to
	 * @param fieldName The name of the field
	 * 
	 * @returns A field instance or {@code null} if the given
	 * object does not have such a field.
	 */
	static ofObject(object : N4Object, fieldName : string) : Field {
		if (!object.hasOwnProperty(fieldName)) {
			return null;
		}
		
		let dynamicObject : Object+ = object;
		let fieldValue = dynamicObject[fieldName];
		
		return new Field(fieldName, fieldValue);
	}
	
	private fieldName : string
	@Final
	public type : Type
	value : any
	
	public constructor(fieldName : string, value : any) {
		const type = Type.of(value)
		
		this.fieldName = fieldName;
		this.type = type;
		this.value = value;
	}
	
	public get isBuiltInType() : boolean {
		return this.type.isBuiltIn();
	}
	
	public get name() : string {
		return this.fieldName;
	}
	
	public get typeName() : string {
		return this.type.getName();
	}
	
	public getValue() : any {
		return this.value;
	}
}
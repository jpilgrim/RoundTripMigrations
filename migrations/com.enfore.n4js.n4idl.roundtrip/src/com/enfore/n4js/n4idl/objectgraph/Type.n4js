/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
/** 
 * Meta-class for types in N4JS.
 * 
 * Compared to N4Type this class can also be used to represent
 * primitive types. 
 */
export public class Type {
	/**
	 * The meta-type for {@link Array}.
	 */
	public static get ARRAY_TYPE() : Type {
		return Type.getInstance("Array", true);
	};
	
	/**
	 * Returns the Type instance that describes the type of the given value.
	 */
	public static of(value : any) : Type {
		const typeofresult = typeof value;
		
		if (typeofresult == "object") {
			let n4Type = N4Type.of(value);
			
			if (!n4Type) {
				if (value instanceof Array) {
					return Type.ARRAY_TYPE;
				} else {
					return Type.getInstance("<unknown>", true);
				}
			}
			
			if (value instanceof N4Enum) {
				return Type.getInstance(n4Type.name, false, true);
			}
			
			return Type.getInstance(n4Type.name, false);
		} else {
			return Type.getInstance(typeofresult, true);
		}
	}
	
	/**
	 * Returns {@code true} if the given value is primitive.
	 */
	public static isPrimitiveValue(value : any) {
		return typeof value != "object";
	}
	
	/**
	 * Return the singleton instance of the Type with the given parameters.
	 */
	private static getInstance(name : string, primitive : boolean, isEnum : boolean = false) : Type {
		if (!Type.INSTANCES.hasOwnProperty(name)) {
			Type.INSTANCES[name] = new Type(name, primitive, isEnum);
		}
		return Type.INSTANCES[name] as Type;
	}

	private static INSTANCES : Object+ = {};
	
	private name : string
	private builtIn : boolean
	private isEnum : boolean
	
	/**
	 * Instantiates a new Type.
	 * 
	 * @param name The name of the type
	 * @param builtIn Boolean flag to indicate whether this type is a built-in type
	 */
	private constructor(name : string, builtIn : boolean, isEnum : boolean) {
		this.name = name;
		this.builtIn = builtIn;
		this.isEnum = isEnum;
	}

	/** 
	 * Returns the name of this type. 
	 */
	public getName() : string {
		return this.name;
	}
	
	/** 
	 * Returns {@code true} iff the type is of primitive nature.
	 */
	public isBuiltIn() : boolean {
		return this.builtIn;
	}
}

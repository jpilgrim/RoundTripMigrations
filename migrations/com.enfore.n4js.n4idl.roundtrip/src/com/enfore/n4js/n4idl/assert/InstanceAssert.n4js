/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * Assert class contains statics to assert truths of object structure used in round-trip tests.
 */
export public class InstanceAssert {
	
	/**
	 * Asserts that the given instance has the exact list of own properties.
	 * 
	 * This excludes inherited properties in means of the prototype chain.
	 * 
	 * The order of the names is significant to the comparison.
	 */
	public static hasOwnPropertyNames(instance : N4Object, expectation : Array<string>, message : string) {
		let names = Object.getOwnPropertyNames(instance);
		Assert.equal(names.join(","), expectation.join(","), message);
	}
	
	/**
	 * Asserts that the given instance has a field with the given name.
	 *
	 * Checks the actual runtime object and not the type of the given instance.
	 */
	public static hasField(fieldName : string, instance : N4Object, message : string) {
		let dynamicAccess : Object+ = instance;
		Assert.isNotUndefined(dynamicAccess[fieldName], message);
	}
	
	/**
	 * Asserts that the given instance does not have a field with the given name.
	 *
	 * Checks the actual runtime object and not the type of the given instance.
	 */
	public static hasNoField(fieldName : string, instance : N4Object, message : string) {
		let dynamicAccess : Object+ = instance;
		let value = dynamicAccess[fieldName];
		
		// if the value is undefined, the field does not exist
		if (typeof value == "undefined") {
			return;
		}
		
		let propertyDescriptor = InstanceAssert.getPropertyDescriptor(instance, fieldName);
		
		if (propertyDescriptor.isField) {
			Assert.fail(`Field "${fieldName}" exists: ${message}`)
		}
	}
	
	/**
	 * Asserts that the given instance has the same string serialisation as 
	 * the given expectation object.
	 * 
	 * @param message 
	 * 			A message describing this assertion in more detail in order to improve assertion failure messages
	 */
	public static equalSerialisation(instance : Object, expectation : Object, message : string) {
		let instanceJSON = JSON.stringify(instance, undefined, 4);
		let expectationJSON = JSON.stringify(expectation, undefined, 4);
		
		Assert.equal(instanceJSON, expectationJSON, message)
	}
	
	/**
	 * Invokes Object.getOwnPropertyDescriptor on every object in the prototype chain
	 * to the point were it either finds the descriptor or return {@code null} (end of the prototype chain).
	 */
	private static getPropertyDescriptor(instance : N4Object, fieldName : string) : PropertyDescriptor {
		let descriptor : PropertyDescriptor
		let object : Object = instance;
		do {
			
			descriptor = PropertyDescriptor.from(
				Object.getOwnPropertyDescriptor(object, fieldName)
			);
			
			if (typeof descriptor !== "undefined") {
				return descriptor;
			}
			
			object = object.__proto__
		} while (typeof object !== "undefined")
		
		return null;
	}
}

/**
 * Wrapper class for the return value of Object.getOwnPropertyDescriptor.
 */
class PropertyDescriptor {
	static from(object : Object) : PropertyDescriptor {
		if (typeof object === "undefined") {
			return undefined;
		}
		let d = new PropertyDescriptor();
		// transfer properties
		Object.assign(d, object);
		return d;
	}
	
	private constructor() {}
	
	public value : any
	public writable : boolean
	public get : Function
	public set : Function
	public configurable : boolean
	public enumerable : boolean
	
	/** 
	 * Returns {@code true} iff this PropertyDescriptor describes a field.
	 * 
	 * That means that the property is backed by a field rather than accessor functions. 
	 */
	public get isField() {
		return typeof this.get === "undefined" && typeof this.set === "undefined";
	}
}

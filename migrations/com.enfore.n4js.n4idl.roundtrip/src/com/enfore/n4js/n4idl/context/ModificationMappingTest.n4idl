/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {InstanceAssert} from "com/enfore/n4js/n4idl/assert/InstanceAssert";
import {FunctionContextRoundTripTest} from "com/enfore/n4js/n4idl/context/FunctionContextRoundTripTest";
import {RoundTripModificationMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripModificationMigration";

/**
 * An abstract {@link AbstractRoundTripTest} which tests the correct
 * mapping of modified states.
 * 
 * As a counterpart to the abstract super method {@link #modifyMigratedInstance} (c2)
 * this class declares {@link modifyOriginalInstance} (c1) respectively.
 * 
 * Based on the concept of successful round-trip migration with modification,
 * this test checks that it holds true that:
 * 
 * migrateBack(c2(migrate(instantiateOriginal))) == c1(instantiateOriginal)
 * 
 * Thus, this test assures that the migration and back-migration are implemented
 * in a way that maps the modifications c1 and c2 according to expectations as
 * specified by concrete sub-classes
 */
@VersionAware
export public abstract class ModificationMappingTest<T1 extends N4Object, T2 extends N4Object> 
	extends FunctionContextRoundTripTest<T1, T2>
	implements RoundTripModificationMigration<T1, T2> {
	
	/**
	 * Modify the original instance (as produced by {@link #instantiateOriginal()})
	 * in the same way the migrated instance is modified in {@link #modifyMigratedInstance(T2)}.
	 */
	public abstract modifyOriginalInstance(original : T1);
	
	/**
	 * Re-declaration of the super-method.
	 * 
	 * Counterpart to the original modification as specified by {@link #modifyOriginalInstance}. 
	 */
	@Override
	public abstract modifyMigratedInstance(migrated : T2);
	
	@Override
	public assertRoundTripInstance(roundTrip : T1) {
		// apply corresponding modification to original instance
		const originalModified = this.instantiateOriginal();
		this.modifyOriginalInstance(originalModified);
		
		InstanceAssert.equalSerialisation(roundTrip, originalModified,
			"The serialisation of the round-trip matches the original serialisation" 
				+ " after applying a equivalent modification.");
	}
}

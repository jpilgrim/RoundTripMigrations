/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {RoundTripMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripMigration";
import {RoundTripRunnerGraph} from "com/enfore/n4js/n4idl/roundtrip/RoundTripRunnerResult";
import {GraphRoundTripExecutor} from "com/enfore/n4js/n4idl/roundtrip/graph/GraphRoundTripExecutor";
import * as Request+ from "request";


@VersionAware
class RoundTripRunnerOptions {
	module : string
	className : string
}

/** 
 * Main entry-point for the RoundTrip Runner. 
 */
@VersionAware
export default public class RoundTripRunner {
	private executor = new GraphRoundTripExecutor<N4Object,N4Object>();
	
	/**
	 * This method is directly called from the plain-JS code (run.js).
	 */
	public static main(clazz : constructor{RoundTripMigration}, options : RoundTripRunnerOptions) {
		const runner = new RoundTripRunner();
		
		let instance = runner.createInstance(clazz); 
		let result = runner.executor.createRoundTripGraph(instance);
		
		runner.reportResult(result, options.module);
	}
	
	/**
	 * Constructs a new instance using the given {@link RoundTripMigration} constructor.
	 */
	public createInstance(migrationClazz : constructor{RoundTripMigration}) : RoundTripMigration<N4Object, N4Object> {
		// work around missing support for type argument in constructor{} types
		let ctor : constructor{N4Object} = migrationClazz;
		let instance = new ctor() as RoundTripMigration<N4Object, N4Object>;
		
		return instance;
	}
	
	/**
	 * Reports the execution result of the roundtrip migration 
	 * to the running RoundTrip Server (IDE).
	 */
	public reportResult(result: RoundTripRunnerGraph, modulePath : string) {
		let reportUrl = "http://localhost:2121/result?module=" + encodeURIComponent(modulePath);
		// send round trip result to runner server
		Request.post(
			reportUrl,
			{json: result},
			(error, response : Object+, body) => {
				if (!error && response.statusCode == 200) {
					// succeed silently
				} else {
					console.error("Failed to run RoundTrip execution: " + error)
				}
			}
		)
	}
}
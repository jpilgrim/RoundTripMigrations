/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {RoundTripMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripMigration";
import {RoundTripModificationMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripModificationMigration";

/**
 * An abstract framework for executing round-trip migrations.
 * 
 * This executor handles the actual execution of {@link RoundTripMigration}s and 
 * allows concrete subclasses to observe the execution via handler function (cf. method handle*Instance).
 * 
 * This executor supports round-trips with and without modification of the migrated object-graph.
 */
export public abstract class AbstractRoundTripExecutor<T1 extends N4Object, T2 extends N4Object> {
	
	/**
	 * Executes the round-trip as specified by the given {@link RoundTripMigration}.
	 * 
	 * Triggers the abstract handler methods.
	 */
	public executeRoundTrip(instance : RoundTripMigration<T1, T2>) {
		if (instance instanceof RoundTripModificationMigration) {
			this.executeRoundTripWithModification(instance as RoundTripModificationMigration<T1, T2>);
		} else {
			this.executeRoundTripRegular(instance);
		}
	}
	
	/**
	 * First round-trip handler.
	 * 
	 * Invoked for original instance.
	 * 
	 * Does nothing per default.
	 * 
	 * @param scenario The currently executed {@link RoundTripMigration} scenario.
	 * @param original The original object-graph / model instance.
	 */
	protected handleOriginalInstance(scenario : RoundTripMigration<T1, T2>, original : T1) {}
	/**
	 * Second round-trip handler. 
	 * 
	 * Invoked after migrating the instance.
	 * 
	 * Does nothing per default.
	 * 
	 * @param scenario The currently executed {@link RoundTripMigration} scenario.
	 * @param original The migrated object-graph / model instance.
	 */
	protected handleMigratedInstance(scenario : RoundTripMigration<T1, T2>, migrated : T2) {}
	
	/**
	 * Third round-trip handler.
	 * 
	 * Invoked after modifying the migrated instance.
	 * 
	 * This handler may not be invoked, as modification is optional.
	 * 
	 * Does nothing per default.  
	 * 
	 * @param scenario The currently executed {@link RoundTripMigration} scenario.
	 * @param original The modified migrated object-graph / model instance.
	 */
	protected handleModifiedMigratedInstance(scenario : RoundTripMigration<T1, T2>, modified : T2) {}
	
	/**
	 * Fourth round-trip handler.
	 * 
	 * Invoked after completing the round-trip migration.
	 * 
	 * Does nothing per default.
	 * 
	 * @param scenario The currently executed {@link RoundTripMigration} scenario.
	 * @param original The round-trip migrated object-graph / model instance.
	 */
	protected handleRoundTripInstance(scenario : RoundTripMigration<T1, T2>, roundTrip : T1) {}
	
	/**
	 * Executes the round-trip migration with a modification of the
	 * migrated instance and returns the runner result.
	 */
	public executeRoundTripWithModification(instance : RoundTripModificationMigration<T1, T2>) {
		let original  = instance.instantiateOriginal();
		this.handleOriginalInstance(instance, original);
		
		let migrated = instance.migrate(original);
		this.handleMigratedInstance(instance, migrated);
		
		// Modify migrated instance. The following method
		// is assumed to have side-effects on 'migrated'.
		instance.modifyMigratedInstance(migrated);
		this.handleModifiedMigratedInstance(instance, migrated);
		  
		
		let roundTrip = instance.migrateBack(migrated);
		this.handleRoundTripInstance(instance, roundTrip);
	}
	
	/**
	 * Executes the a regular roundtrip migration without modification of 
	 * the migrated instance and returns the runner result.
	 */
	public executeRoundTripRegular(instance : RoundTripMigration<T1, T2>) {
		let original  = instance.instantiateOriginal();
		this.handleOriginalInstance(instance, original);
		
		let migrated = instance.migrate(original);
		this.handleMigratedInstance(instance, migrated); 
		
		let roundTrip = instance.migrateBack(migrated);
		this.handleRoundTripInstance(instance, roundTrip);
	}
}

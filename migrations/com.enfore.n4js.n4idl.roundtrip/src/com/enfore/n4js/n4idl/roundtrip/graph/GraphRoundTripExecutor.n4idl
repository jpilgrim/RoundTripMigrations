/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {ContextAwareRoundTripTest} from "com/enfore/n4js/n4idl/context/ContextAwareRoundTripTest";
import {ObjectGraph} from "com/enfore/n4js/n4idl/objectgraph/ObjectGraph";
import {AbstractRoundTripExecutor} from "com/enfore/n4js/n4idl/roundtrip/AbstractRoundTripExecutor";
import {RoundTripMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripMigration";
import {RoundTripRunnerGraph} from "com/enfore/n4js/n4idl/roundtrip/RoundTripRunnerResult";
import {SubGraphURI} from "com/enfore/n4js/n4idl/roundtrip/graph/SubGraphURI";
import {TraceLinkRegistry} from "com/enfore/n4js/n4idl/roundtrip/graph/TraceLinkRegistry";
import {DirtyStateProxy} from "org/eclipse/n4js/n4idl/controller/DirtyStateProxy";

/**
 * A concrete implementation of an {@link AbstractRoundTripExecutor}.
 * 
 * This executor returns object-graphs of the different stages of a round-trip migration.
 * 
 * It also supports the inclusion of trace links, if the executed {@link RoundTripMigration}
 * provides such information (cf. {@link MigrationContext}).
 */
@VersionAware
export public class GraphRoundTripExecutor<T1 extends N4Object, T2 extends N4Object> extends AbstractRoundTripExecutor<T1, T2> {
	
	private originalObjectGraph : ObjectGraph;
	private migratedObjectGraph : ObjectGraph;
	private migratedModifiedObjectGraph : ObjectGraph;
	private roundTripObjectGraph : ObjectGraph;
	
	private subGraphRegistry = new Map<N4Object, SubGraphURI>();
	
	private traceLinkRegistry : TraceLinkRegistry 
	
	/**
	 * First round-trip handler.
	 * 
	 * Invoked for original instance.
	 */
	@Override
	protected handleOriginalInstance(scenario : RoundTripMigration<T1, T2>, original : T1) {
		let {graph, subGraphRegistry} =  ObjectGraph.graphiphy(original);
		this.originalObjectGraph = graph;
		this.addAllSubGraphURIs(subGraphRegistry, "original");
	}
	/**
	 * Second round-trip handler. 
	 * 
	 * Invoked after migrating the instance. 
	 */
	@Override
	protected handleMigratedInstance(scenario : RoundTripMigration<T1, T2>, migrated : T2) {
		let {graph, subGraphRegistry} = ObjectGraph.graphiphy(migrated);
		this.migratedObjectGraph = graph;
		this.addAllSubGraphURIs(subGraphRegistry, "migrated");
		
		if (scenario instanceof ContextAwareRoundTripTest) {
			// add all trace links recorded by the (forth) migration controller.
			const controller = (scenario as ContextAwareRoundTripTest<T1, T2>).migrationController(null);
			controller.recordedLinks.forEach((entry) => this.traceLinkRegistry.addLink(entry.keys, entry.value));
		}
	}
	
	/**
	 * Third round-trip handler.
	 * 
	 * Invoked after modifying the migrated instance.
	 * 
	 * This handler may not be invoked, as modification is optional.  
	 */
	@Override
	protected handleModifiedMigratedInstance(scenario : RoundTripMigration<T1, T2>, modified : T2) {
		let {graph, subGraphRegistry} = ObjectGraph.graphiphy(modified);
		this.migratedModifiedObjectGraph = graph;
		this.addAllSubGraphURIs(subGraphRegistry, "migratedModified"); 
	}
	
	/**
	 * Fourth round-trip handler.
	 * 
	 * Invoked after completing the round-trip migration.
	 */
	@Override
	protected handleRoundTripInstance(scenario : RoundTripMigration<T1, T2>, roundTrip : T1) {
		let {graph, subGraphRegistry} = ObjectGraph.graphiphy(roundTrip);
		this.roundTripObjectGraph = graph;
		this.addAllSubGraphURIs(subGraphRegistry, "roundTrip");
		
		if (scenario instanceof ContextAwareRoundTripTest) {
			// add all trace recorded by the back-migration controller.
			const controller = (scenario as ContextAwareRoundTripTest<T1, T2>).migrateBackController(null);
			controller.recordedLinks.forEach((entry) => this.traceLinkRegistry.addLink(entry.keys, entry.value));
		}
	}
	
	/**
	 * Executes a round-trip migration as given by the {@link RoundTripMigration} instance.
	 * 
	 * Serialises the resulting intermediate object-graphs and returns them.
	 */
	public createRoundTripGraph(instance : RoundTripMigration<T1, T2>) : RoundTripRunnerGraph{
		// clear existing object-graphs
		this.originalObjectGraph = undefined;
		this.migratedObjectGraph = undefined;
		this.migratedModifiedObjectGraph = undefined;
		this.roundTripObjectGraph = undefined;
		
		// clear trace-link registry
		this.traceLinkRegistry = new TraceLinkRegistry(this.subGraphRegistry);
		
		// Execute round-trip. 
		// This will trigger the handlers handle*Instance of this class. 
		this.executeRoundTrip(instance);
		
		let roundTripGraph : RoundTripRunnerGraph = {
			original: this.originalObjectGraph,
			migrated: this.migratedObjectGraph,
			migratedModified: this.migratedModifiedObjectGraph,
			roundTrip: this.roundTripObjectGraph
		}
		
		// add trace link information if applicable
		if (!this.traceLinkRegistry.empty) {
			roundTripGraph.traceLinks = this.traceLinkRegistry.rawData;
		}
		
		return roundTripGraph;
	}
	
	/**
	 * Adds all sub-graph URIs to {@link #subGraphRegistry} under the
	 * given stage name.
	 */
	private addAllSubGraphURIs(subRegistry: Map<N4Object, int>, stage : string) {
		subRegistry.forEach((value, key) => {
			const unwrappedKey = DirtyStateProxy.unwrap(key);
			const uri = SubGraphURI.createURI(stage, value);
			
			// store uri for both the proxy and its target
			this.subGraphRegistry.set(key, uri)
			this.subGraphRegistry.set(unwrappedKey, uri)
		})
	}
}

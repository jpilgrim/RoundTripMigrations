/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {Iterables} from "org/eclipse/n4js/n4idl/util/Iterables";
/** 
 * A set-map holds associations of ordered sets of keys to values.
 */
export public class SetMap<KeyT, ValueT> {
	private _entries = new Map<KeyT, Set<SetMapEntry<KeyT, ValueT>>>();
	
	/**
	 * Associates the given value with the given keys.
	 */
	public set(keys : [? extends KeyT], value : ValueT) : this {
		if (!keys) { 
			throw "Cannot add value for 'null' key to SetMap";
		}
		
		// obtain (possibly existing) entry
		const e = this.getEntry(keys);
		// set value
		e.value = value;
		// associate with all keys
		this.addEntry(e);
		
		return this;
	}
	
	/**
	 * Returns the value associated with the given keys.
	 */
	public get(keys : [? extends KeyT]) : ValueT {
		if (!keys) { return null; }
		// obtain a (possibly empty) entry
		const e = this.getEntry(keys);
		return e.value;
	}
	
	/**
	 * Returns {@code true} iff this map holds 
	 * a value for the given keys.
	 */
	public has(keys : [? extends KeyT]) : boolean {
		if (!keys) { return false; }
		const e = this.getEntry(keys);
		return e.value != null;
	}
	
	/**
	 * Returns all entries/mappings of this {@link SetMap}. 
	 */
	public entries() : Set<SetMapEntry<KeyT, ValueT>> {
		const all = Iterables.flatten(this._entries.values());
		return new Set<SetMapEntry<KeyT, ValueT>>(all);
	}
	
	/** Adds the given entry to the {@code entries} of this {@link SetMap}. */
	private addEntry(entry : SetMapEntry<KeyT, ValueT>) {
		entry.keys.forEach(k => this.addEntryToKey(k, entry));
	}
	
	/**
	 * Associates the given {@code key} with the given {@code entry} if 
	 * is has not yet been associated.
	 */
	private addEntryToKey(key : KeyT, entry : SetMapEntry<KeyT, ValueT>) {
		const entries = this._entries.get(key) || new Set<SetMapEntry<KeyT, ValueT>>();
		entries.add(entry);
		this._entries.set(key, entries); 
	}
	
	/** Gets or creates a map-entry for the given keys. */
	private getEntry(keys : [? extends KeyT]) : SetMapEntry<KeyT, ValueT> {
		const commonEntries = Array.from(this.getCommonEntries(keys))
			// filter out entries with the wrong number of keys
			.filter(c => c.keys.length == keys.length);
		for (let entry of commonEntries) {
			let match = true;
			
			// check all entry-keys for equality with keys
			for (let i=0; i<keys.length; i++) {
				if (keys[i] != entry.keys[i]) {
					match = false;
					break;
				}
			}
			
			// if the last entry matched, return it
			if (match) { return entry };
		}
		
		// if no existing entry has matched
		return SetMapEntry.new(keys);
	}
	
	/** Returns a list of distinct entries that are associated with all the given keys. */
	private getCommonEntries(keys : [? extends KeyT]) : Iterable<SetMapEntry<KeyT, ValueT>> {
		if (keys.length == 0) { return [] }
		// shortcut for single-valued keys
		if (keys.length == 1) {
			const singleEntry = this._entries.get(keys[0]);
			// return the single entry if existent
			if (singleEntry)Â { 
				return singleEntry.values();
			} else { 
				return []
			}
		}
		
		const allEntries = Iterables.flatten(keys.map(k => this._entries.get(k))
			.filter(entries => entries != null) as [[SetMapEntry<KeyT, ValueT>]]);
		
		// return distinct set of entries
		return new Set<SetMapEntry<KeyT, ValueT>>(allEntries).values();
	}
}

/**
 * An entry of a {@link SetMap}.
 */
export public class SetMapEntry<KeyT, ValueT> implements Iterable2<[? extends KeyT], ValueT> {
	public keys : [? extends KeyT]
	public value : ValueT
	
	/** Instantiates a new {@link Entry}. */
	public static <KeyT, ValueT> new(keys : [? extends KeyT], value : ValueT = null) : SetMapEntry<KeyT, ValueT> {
		const e = new SetMapEntry<KeyT, ValueT>();
		e.keys = keys;
		e.value = null;
		return e;
	}
	
	@Override
	public [Symbol.iterator](): Iterator<union{Array<? extends KeyT>, ValueT}> {
		return [this.keys, this.value][Symbol.iterator]();
	}
}

/** Returns {@code true} iff all values are equal (as defined by operator '==') */
function allEqual(values : [any]) {
	return new Set<any>(values).size == 1;

}

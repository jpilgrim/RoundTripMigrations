/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
/**
 * Helper methods for instances of type {@link Iterable}.
 */
export public class Iterables {

	/**
	 * Returns an {@link Iterable} which maps each of the values of the given
	 * iterable using the given transformer function.
	 */
	public static <InT, OutT> map(origin : Iterable<InT>, 
		transformer : (InT) => OutT) : Iterable<OutT> {
		return Iterables.iterable(() => {
			return new TransformingIterator<InT, OutT>(origin[Symbol.iterator](), transformer);
		});
	}
	
	/**
	 * Returns an {@link Iterable} which contains all element of the original 
	 * for which the given filter function returns {@code true}.
	 */
	public static <T> filter(original : Iterable<T>,
		filter : (T) => boolean) : Iterable<T> {
		return Iterables.iterable(() => {
			return new FilteringIterator<T>(original[Symbol.iterator](), filter);
		})
	}
	
	/**
	 * Returns an {@link Iterable} which is the concatenation of all
	 * given iterables {@code iterables}.
	 */
	public static <T> concat(iterables : Iterable<Iterable<T>>) : Iterable<T> {
		return Iterables.iterable(() => {
			const operands = Iterables.map(iterables, (i) => i[Symbol.iterator]());
			return new ConcatenatingIterator<T>(operands);
		});
	}
	
	/**
	 * Returns an iterable which aligns the elements of {@code iterable1}
	 * with the elements of {@code iterable2} and lists them as pairs.
	 * 
	 * This is an eager iterable transformation, which means, that both
	 * iterables will be fully enumerated when invoking this method.
	 */
	public static <T1, T2> align(iterable1 : Iterable<T1>, 
		iterable2 : Iterable<T2>) : Array<[T1|T2]> {
		const a1 = Array.from(iterable1);
		const a2 = Array.from(iterable2);
		
		return a1.map((i1, index) => [i1, a2[index]]);
	}
	
	/**
	 * Flattens the given nested iterable to a flat {@link Iterable}.
	 */
	public static <T> flatten(nestedIterables : Iterable<Iterable<T>>) : Iterable<T> {
		return Iterables.concat(nestedIterables);
	}
	
	/**
	 * Returns {@code true} iff the given iterable is empty.
	 */
	public static <T> isEmpty(iterable : Iterable<T>) : boolean {
		return iterable[Symbol.iterator]().next().done == true;
	}
	
	/**
	 * Creates a new anonymous {@link Iterable} which uses the given function
	 * to provide iterator instances.
	 */
	public static <T> iterable(iteratorProvider : () => Iterator<T>) : Iterable<T> {
		return {
			[Symbol.iterator]: () => {
				return iteratorProvider();
			}
		}
	}
	
	/**
	 * Wraps the given {@link Iterable} in an {@link IterableWrapper} which 
	 * allows for instance-method access on all {@link Iterables} utility methods. 
	 */
	public static<T> wrap(iterable : Iterable<T>) : IterableWrapper<T> {
		return new IterableWrapper<T>(iterable);
	}
}

/** Convenience wrapper for methods provided by {@link Iterables}. */
export public class IterableWrapper<T> {
	@Final private iterable : Iterable<T>
	
	private constructor(iterable : Iterable<T>) {
		this.iterable = iterable;
	}
	
	/** @see {@link Iterable.map} */
	public <OutT> map(transformer : (T) => OutT) : IterableWrapper<OutT> {
		return Iterables.wrap(Iterables.map(this.iterable, transformer));
	}
	
	/** @see {@link Iterable.filter} */
	public filter(filter : (T) => boolean) : IterableWrapper<T> {
		return Iterables.wrap(Iterables.filter(this.iterable, filter));
	}
	
	/** @see {@link Iterable.concat} */
	public concat(withOthers : Iterable<Iterable<T>>) : IterableWrapper<T> {
		const operands = Iterables.concat([[this.iterable], withOthers]);
		return Iterables.wrap(Iterables.concat(operands));
	}
	
	/** @see {@link Iterable.isEmpty} */
	public get empty() : boolean {
		return Iterables.isEmpty(this.iterable);
	}
	
	/** Returns the wrapped {@link Iterable} instance. */
	public get asIterable() : Iterable<T> {
		return this.iterable;
	}
	
	/**
	 * Copies the wrapped {@link Iterable} content into an array.
	 * 
	 * This has linear runtime complexity wrt iterable size and will
	 * query the whole iterable content.
	 */
	public toArray() : [T] {
		return Array.from(this.iterable);
	}
}

class FilteringIterator<T> implements Iterator<T> {
	@Final private delegate : Iterator<T>
	@Final private filter : (T) => boolean
	
	constructor(delegate : Iterator<T>, filter : (T) => boolean) {
		this.delegate = delegate;
		this.filter = filter;
	}
	
	@Override
	public next() : IteratorEntry<T> {
		const delegateNext = this.delegate.next();
		
		// if the end has been reached, return {done: true}
		if (delegateNext.done) { return delegateNext; }
		// if the filter allows for the delegate value, return the entry
		if (this.filter(delegateNext.value)) { return delegateNext; }
		
		// otherwise re-invoke next()
		return this.next();
	}
}

/**
 * An iterator which concatenates all of its operand iterators.
 */
class ConcatenatingIterator<T> implements Iterator<T> {
	@Final private operands : Iterator<Iterator<T>>
	private current : Iterator<T> = null
	
	/** TODO FIXME work-around, operands must actually be of type Iterable<Iterator<T>> */
	private constructor(operands : Object) {
		this.operands = operands[Symbol.iterator]();
	}
	
	@Override
	public next() : IteratorEntry<T> {
		if (this.current == null) {
			const nextIterator = this.operands.next();
			if (nextIterator.done) {
				return {done: true};
			} else {
				this.current = nextIterator.value;
			}
		}
		const currentNext = this.current.next();
		
		if (currentNext.done) {
			// remove current iterator
			this.current = null;
			// re-invoke next()
			return this.next();
		} else {
			return currentNext;
		}
	}
}

/**
 * An iterator which returns the values of a delegate iterator
 * but transforms all values on-demand.
 */
class TransformingIterator<InT, OutT> implements Iterator<OutT> {
	@Final private delegate : Iterator<InT>
	@Final private transformer : (InT) => OutT
	
	private constructor(iterator : Iterator<InT>, transformer : (InT) => OutT) { 
		this.delegate = iterator;
		this.transformer = transformer;
	}
	
	@Override
	public next() : IteratorEntry<OutT> {
		const r = this.delegate.next();
		if (r.done) {
			return {done: true};
		} else {
			return {done: false, value: this.transformer(r.value)};
		}
	}
}


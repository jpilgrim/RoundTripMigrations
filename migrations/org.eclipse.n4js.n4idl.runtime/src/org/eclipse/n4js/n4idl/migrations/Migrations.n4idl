/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
function <T extends Object> instantiate(ctor : constructor{T}) : T {
	let c : constructor{Object} = ctor as constructor{Object};
	return new c() as T;
}

@Migration
export public function <FromT extends Object, ToT extends ~FromT&Object> copy(ctor : constructor{ToT}, 
	from: FromT+) : ToT {
	let to : ToT+ = instantiate(ctor);
	
	// TODO replace this with a migrating deep-copy
	for (let key of Object.keys(from)) {
		const value = Reflect.get(from, key, from);
		Reflect.set(to, key, value, to);
	}
	
	return to;
}

/**
 * Migrates the element at the given array index or returns {@code defaultValue} instead, 
 * if the array has no element for the given {@code index}.
 */
@Migration
export public function <SourceT, TargetT> migrateElementAt(array : [SourceT], index : number, defaultValue : TargetT=) : TargetT {
	if (array.length > index) {
		const sourceElement = array[index];
		if (sourceElement) {
			return migrate(sourceElement) as TargetT;
		}
	}
	return defaultValue;
}

/**
 * Migrates the given array in the given {@link MigrationContext}.
 * 
 * Handles empty arrays in that it migrates them always to an empty array.
 * If this behaviour is not desired, this method should not be used.
 */
@VersionAware
@This(MigrationController)
export public function <SourceT, TargetT> migrateArray(array : [SourceT]) : [TargetT] {
	if (array.length == 0) {
		return [];
	} else {
		const result : [TargetT] = []
		for (let e of array) {
			result.push(this.migrate([e]));
		}
		return result;
	}
}

/**
 * Migrates the given iterable of elements.
 * 
 * Handles empty iterables in that it always migrates them to an empty iterable.
 * If this behaviour is not desired, this method should not be used.
 */
@VersionAware
@This(MigrationController)
export public function <SourceT, TargetT> migrateIterable(iterable : Iterable<SourceT>) : Iterable<TargetT> {
	const result : [TargetT] = [];
	for (let e of iterable) {
		result.push(this.migrate([e]) as TargetT);
	}
	return result;
}

/**
 * Migrates the given optional value using the given {@code migration} function
 * or returns {@code null} if the given value is {@code null}.
 */
@VersionAware
export public function <SourceT, TargetT> migrateOptional(controller : MigrationController, 
	optionalValue : SourceT, migration : {@This(MigrationController) function(SourceT): TargetT}) : TargetT {
	if (optionalValue == null || typeof optionalValue === 'undefined') {
		return null;
	} else {
		// use specified migration function
		return migration.apply(controller, [optionalValue]) as TargetT;
	}
}

/**
 * Copies the given optional primitive value using the given {@code valueMigration} function
 * or returns {@code defaultValue} if the given value is {@code null}.
 */
@Migration
export public function <SourceT extends TargetT, TargetT extends boolean|number|int|string> 
	copyOptionalOrDefault(optionalValue : SourceT, defaultValue : TargetT, valueMigration : (SourceT) => TargetT = (v) => v) : TargetT {
	
	if (optionalValue == null) {
		return defaultValue;
	} else {
		return valueMigration(optionalValue);
	}
}

/**
 * Returns the value of the given {@code property} of the given {@code object} that can be
 * obtained by following the trace link of {@code object} and accessing the very same property
 * on the instance of the previous model version.
 * 
 * Returns {@code defaultValue} in case no such value can be retrieved via the trace links.
 */
@VersionAware
export public function <T> getTraceOrDefault(controller : MigrationController, object : Object, property : string, defaultValue : T) : T {
	const previousRevision : Object+ = (controller.context.getTrace(object)[0] || {}) as Object ;
	const previousRevisionValue = Reflect.get(previousRevision, property, previousRevision);
	
	if (typeof previousRevisionValue === 'undefined') {
		return defaultValue;
	} else {
		return previousRevisionValue as T;
	}
}

/**
 * Returns an initializer object based on the given default initializer.
 * 
 * Given the {@code object} that is being migrated, the previous revision is obtained.
 * For each key in the default initializer, this helper obtains the corresponding value in the
 * previous revision of the instance.
 * 
 * The returned initializer contains the value of the previous revision if present and the value
 * of the default initializer otherwise.
 */
@VersionAware
export public function <T extends ~Object> getTraceOrDefaultInitializer(controller : MigrationController, 
	object : Object, defaultInitializer : ~T) : ~T {
	const initializer = {};
	const keys = Object.keys(defaultInitializer as Object);
	const previousRevision : Object+ = (controller.context.getTrace(object)[0] || {}) as Object ;

	for (let key of keys) {
		const defaultValue = Reflect.get(defaultInitializer as Object, key);
		const previousRevisionValue = Reflect.get(previousRevision, key, previousRevision);
		
		if (typeof previousRevisionValue === 'undefined') {
			Reflect.set(initializer, key, defaultValue, initializer);
		} else {
			Reflect.set(initializer, key, previousRevisionValue, initializer);
		}
	}
	return initializer;
}

/** 
 * Migrates and returns the value of the given {@code property} on the 
 * given {@code object}.
 * 
 * Using this migration results in a behaviour in which only modified values are
 * actually migrated. In other cases, the value of the previous revision is simply
 * copied over. If no previous revision exists, the current value of the specified
 * property is always copied over.
 * 
 * @param object The object for which the property is defined.
 * @pram property The name of the property to migrate.
 * @trace The previous revision of {@code object} to look for the same property in. If omitted, this 
 * 	migration assumes the correponding previous revision to be context.getTrace(object)[0] by default.  
 */
@Migration
export public function <ValueT> migrateIfModified(object : Object, property : string, 
	trace : Object = null) : ValueT {
	
	// obtain the property value for the current model version
	const currentValue = Reflect.get(object, property, object) as ValueT;
	
	if (context.isModified(object, property)) {
		// migrate by using the current value
		return currentValue;
	} else {
		const previousRevision = trace || context.getTrace(object)[0] as Object;
		if (previousRevision) {
			// obtain previous value and make sure undefined is converted to null 
			const previousValue = Reflect.get(previousRevision, property);
			// migrate by using the previous revision value 
			return previousValue as ValueT;
		} else {
			// fall-back to migrating by copying the current value
			return currentValue;
		}
	}
}

/** 
 * Migrates all specified fields by obtaining the corresponding
 * property of object {@code from} and migrating it to {@code to}.
 * 
 * For this migration-helper to be applicable, all specified fields must
 * be guaranteed to exist for both the source and target types and the types 
 * of the corresponding fields of object {@code to} must be assignment compatible
 * with the value in object {@code from}.
 * 
 * Array and object values are migrated by dispatching a migrate-call, primitive values 
 * are simply copied over to the {@code to} object.
 * 
 * Optional fields are migrated to a {@code null} value if absent.
 */
@VersionAware
export public function migrateFields(controller : MigrationController, 
	fields : [string], from : Object, to : Object) {
	for (let field of fields) {
		const value = Reflect.get(from, field);
		
		if (value === null) {
			// migrate optional fields to null
			Reflect.set(to, field, null, to);
		}
		else if (typeof value === 'array' || value instanceof Array) {
			// migrate array values using migrateArray
			Reflect.set(to, field, migrateIterable.call(controller, value as [any]), to);
		} else if (typeof value === 'object') {
			// migrate object values by dispatching it via a migrate-call
			Reflect.set(to, field, controller.migrate([value]), to);
		} else {
			// migrate primitive values by copying
			Reflect.set(to, field, value);
		}
	}
}
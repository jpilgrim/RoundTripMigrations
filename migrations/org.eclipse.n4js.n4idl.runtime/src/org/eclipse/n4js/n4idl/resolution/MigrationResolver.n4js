/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {MigrationProvider} from "org/eclipse/n4js/n4idl/controller/MigrationProvider";
import {AmbiguousMigrationCallException} from "org/eclipse/n4js/n4idl/controller/MigrationRuntimeException";
import {N4IDLClassifier} from "org/eclipse/n4js/n4idl/model/N4IDLClassifier";
import {MigrationCandidate} from "org/eclipse/n4js/n4idl/model/N4IDLMigratable";
import {N4IDLMigratable} from "org/eclipse/n4js/n4idl/model/N4IDLMigratable";
import {N4TypeUtils} from "org/eclipse/n4js/n4idl/model/N4TypeUtils";
import {MigrationDistanceComputer} from "org/eclipse/n4js/n4idl/resolution/MigrationDistanceComputer";
import {MigrationMatcher} from "org/eclipse/n4js/n4idl/resolution/MigrationMatcher";
import {MigrationUtils} from "org/eclipse/n4js/n4idl/resolution/MigrationUtils";
import {SuperClassifierIterator} from "org/eclipse/n4js/n4idl/resolution/SuperClassifierIterator";
import {Iterables} from "org/eclipse/n4js/n4idl/util/Iterables";

/**
 * The {@link MigrationResolver} is a {@link MigrationProvider} that can be used to 
 * locate/resolve the best-matching migration for a given list of arguments based on their type.
 * 
 * The resolution is based on multiple parameters such as target version, argument types 
 * and if required type distance computation to select the best-matching migration from multiple
 * competing candidates.
 */
export public class MigrationResolver implements MigrationProvider {
	// the target version for which this resolver resolves migrations for
	private targetVersion : int
	
	/** 
	 * Instantiates a new {@link MigrationResolver} for the 
	 * given target version.
	 */
	public constructor(targetVersion : int) {
		this.targetVersion = targetVersion
	}
	
	/**
	 * Finds the best-matching migration for the given arguments to migrate
	 * to the given target version. 
	 */
	@Override
	public getMigration(args : [?]) : Function? {
		const candidates = Iterables.wrap(this.findAllMigrations(args));
		
		if (candidates.empty) {
			return null;
		}
		
		let distanceComputer = new MigrationDistanceComputer();
		const argumentTypes = distanceComputer.computeArgumentTypes(args);
		
		let matcher = MigrationMatcher.emptyMatcher();
		
		// avoid computing type distance for a single candidate
		for (let candidate of candidates.asIterable) {
			// compute distance for the current candidate
			const distance = distanceComputer.compute(argumentTypes, candidate);
			
			matcher = matcher.match(candidate, distance);
			
			if (matcher.hasPerfectMatch) {
				// shortcut: if we have found the best match, just return it
				return matcher.anyMatch.migration;
			}
		}
		
		const matches : [MigrationCandidate] = matcher.allMatches;
		
		// if there is more than one match
		if (matches.length > 1) {
			throw new AmbiguousMigrationCallException(matches,
				`Ambiguous migration call: Arguments of type ${N4TypeUtils.typesToString(args)} ` + 
				`are matched equally well by the following migration candidates (distance = ${matcher.distance}):\n` + 
				`${MigrationUtils.candidateDescriptions(matches)}`);
		}
		
		// otherwise return the single match
		return matches[0].migration;
	}
	
	/**
	 * Returns all applicable migration candidates for the given migration arguments.
	 */
	public findAllMigrations(args : [?]) : Iterable<MigrationCandidate> {
		const migratable = MigrationUtils.findFirstMigratable(args);
		
		// If no migratable argument can be extracted, 
		// the resolver cannot provide any migration candidates.
		if (!migratable) {
			return [];
		}
		
		return Iterables.concat([
			this.getCandidates(args, migratable), 
			this.findAllSuperMigrations(args, N4IDLClassifier.of(migratable.type))
		]);
	}
	
	/**
	 * Returns an iterable of migration candidates for the given target version, 
	 * arguments and {@link N4IDLMigratable}. 
	 */
	private getCandidates(args : [?],
		migratable : N4IDLMigratable<Object>) : Iterable<MigrationCandidate> {
		// multi-dispatching function which returns migration candidates
		const migrationSwitch = migratable.migrations(this.targetVersion);
		return migrationSwitch(args);
	}
	
	/**
	 * Returns a (lazily-resolving) iterable of all migration candidates of 
	 * super-classifiers of the given base classifier.
	 */
	private findAllSuperMigrations(args : [?], 
		baseClassifier : N4IDLClassifier<Object>) : Iterable<MigrationCandidate> {
		
		const superClassifiers = SuperClassifierIterator.for(baseClassifier.type);
		
		const superMigrations = Iterables.wrap(superClassifiers)
			.filter(classifier => {
				// filter initial base class
				return classifier.ctor != baseClassifier.type
			})
			// find migratable meta-representation of the classifiers
			.map((classifier) : N4IDLMigratable<Object> => N4IDLMigratable.of(classifier.ctor))
			// filter non-migratable classifiers
			.filter(m => m != null)
			// find all migrations for remaining super classifiers
			.map((migratable : N4IDLMigratable<Object>) : Iterable<MigrationCandidate> => {
				return this.getCandidates(args, migratable)
			})

		
		return Iterables.concat(superMigrations.asIterable);
	}
	
	@Override
	public toString() : string {
		return `[MigrationResolver targetVersion=${this.targetVersion}]`;
	}
}

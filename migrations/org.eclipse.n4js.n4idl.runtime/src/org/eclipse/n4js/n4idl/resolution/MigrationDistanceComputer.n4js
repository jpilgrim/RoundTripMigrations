/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {MigrationCandidate} from "org/eclipse/n4js/n4idl/model/N4IDLMigratable";
import {MigrationArgumentType} from "org/eclipse/n4js/n4idl/resolution/MigrationArgumentType";
import {MigrationArgumentTypeDescription} from "org/eclipse/n4js/n4idl/resolution/MigrationArgumentType";
import {TypeDistanceComputer} from "org/eclipse/n4js/n4idl/resolution/TypeDistanceComputer";
import {Iterables} from "org/eclipse/n4js/n4idl/util/Iterables";

/**
 * A type distance computer for migration candidates and a given list of arguments.
 * 
 * Uses {@link TypeDistanceComputer} for N4 types but also handles
 * primitive types and type{}-types.
 */
export public class MigrationDistanceComputer {
	
	private typeDistanceComputer = new TypeDistanceComputer();
	
	/**
	 * Computes the distance of the given migration candidate to the given 
	 * set of migration argument types.
	 */
	public compute(argumentTypes : [MigrationArgumentTypeDescription], migration : MigrationCandidate) : number {
		const parameterTypes = migration.parameterTypes;
		
		if (parameterTypes.length != argumentTypes.length) {
			// the migration is incompatible with the given arguments
			return Infinity;
		}
		
		const migrationParameterTypes = this.computeMigrationArgumentTypes(migration);
		
		const distanceVector = Iterables.align(argumentTypes, migrationParameterTypes)
			.map((pair) : number => this.computeDistance(pair[0], pair[1]));
			
		return this.norm(distanceVector);
	}
	
	/** Simple norm for a type distance vector (sum). */
	private norm(distanceVector : [number]) : number {
		return distanceVector.reduce((a : number, b : number) => a + b);
	}
	
	/** 
	 * Computes the type distance between two {@link MigrationArgumentTypeDescription}s.
	 * 
	 * Returns {@code Infinity} if the argument types do not match up.
	 */
	private computeDistance(t1 : MigrationArgumentTypeDescription, t2 : MigrationArgumentTypeDescription) : number {
		if (t1.type != t2.type) {
			// type incompatibility yields an infinite distance
			return Infinity;
		}
		
		if (t1.type == MigrationArgumentType.PRIMITIVE) {
			// All primitive types are considered to be the same
			// at migration runtime
			return 0;
		} else if (t1.type == MigrationArgumentType.INSTANCE) {
			return this.typeDistanceComputer.compute(
				t1.metaRepresentation as type{Object},
				t2.metaRepresentation as type{Object})
		} else if (t1.type == MigrationArgumentType.TYPE) {
			return this.typeDistanceComputer.compute(
				t1.metaRepresentation as type{Object},
				t2.metaRepresentation as type{Object})
		} else {
			throw "Unsupported MigrationArgumentType " + t1.type + " wrt migration distance computation."
		}
		
	}
	
	public computeMigrationArgumentTypes(migration : MigrationCandidate) : [MigrationArgumentTypeDescription] {
		return migration.parameterTypes.map(p => MigrationArgumentTypeDescription.fromMeta(p));
	}
	
	/** 
	 * Returns an array of {@link MigrationArgumentType} which describe the
	 * types of the given list of migration arguments.*/
	public computeArgumentTypes(args : [?]) : [MigrationArgumentTypeDescription] {
		return args.map(a => MigrationArgumentTypeDescription.fromValue(a));
	}
}

/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {MigrationCandidate} from "org/eclipse/n4js/n4idl/model/N4IDLMigratable";
/**
 * A {@link MigrationMatcher} accumulates all matches handed to its {@link match}
 * method and keeps track of the best match (and thus distance) matched so far.
 */
export public class MigrationMatcher {

	/**
	 * Creates a new empty {@link MigrationMatcher}.
	 */
	public static emptyMatcher() : MigrationMatcher {
		return new MigrationMatcher(null, Infinity);
	}

	private bestDistance : number
	private matches : Set<MigrationCandidate>
	
	/**
	 * Initializes a new {@link MigrationMatcher}.
	 * 
	 * @param match The first match or {@code null} for an empty matcher.
	 * @param distance The initially best distance (for empty matcher, pass Infinity).
	 */
	private constructor(match : MigrationCandidate, distance : number) {
		this.bestDistance = distance;
		this.matches = new Set<MigrationCandidate>(match != null ? [match] : [] as [MigrationCandidate]);
	}
	
	/**
	 * Matches the given match and distance with this matcher.
	 * 
	 * Returns an {@link MigrationMatcher} which also considers the given
	 * match.
	 */
	public match(match : MigrationCandidate, distance : number) : MigrationMatcher {
		if (this.bestDistance < distance) {
			// the match is worse than existing matches, do not record it
			return this;
		} else if (this.bestDistance == distance) {
			// we found an equally-good match
			this.matches.add(match);
			return this;
		} else { // this.bestDistance > distance
			// we found a better match
			return new MigrationMatcher(match, distance);
		}
	}
	
	/**
	 * Returns {@code true} iff this matcher has found the 
	 * perfect match (best distance == 0). 
	 */
	public get hasPerfectMatch() {
		return this.distance == 0;
	}
	
	/**
	 * Returns the best distance this matcher has matched.
	 * 
	 * {@link #allMatches} can be assumed to be of this distance.
	 */
	public get distance() : number {
		return this.bestDistance;
	}
	
	/** 
	 * Returns all matches matched by this {@link MigrationMatcher}.
	 * 
	 * All returned candidates can be assumed to be of the same {@link #distance}.
	 */
	public get allMatches() : [MigrationCandidate] {
		return Array.from(this.matches.values());
	}
	
	public get anyMatch() : MigrationCandidate {
		return this.allMatches[0];
	}
	
	/** 
	 * Returns {@code true} iff this matcher has not matched any migration yet. 
	 */
	public get empty() : boolean {
		return this.matches.size == 0;
	}
}
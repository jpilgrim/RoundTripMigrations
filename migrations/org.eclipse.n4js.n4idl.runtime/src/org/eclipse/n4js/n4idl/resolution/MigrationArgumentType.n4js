/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {TypeTypeRef} from "org/eclipse/n4js/n4idl/model/N4IDLMigratable";
import {N4TypeUtils} from "org/eclipse/n4js/n4idl/model/N4TypeUtils";

/**
 * Supported migration argument types.
 */
export public enum MigrationArgumentType {
	// primitive arguments
	PRIMITIVE,
	// instance arguments
	INSTANCE,
	// type-reference arguments
	TYPE
}

/** 
 * This error may be thrown when converting values/types to instance
 * of {@link MigrationArgumentTypeDescription}.
 */
export public class MigrationArgumentConversionError extends Error {}

export public abstract class MigrationArgumentTypeDescription {
	public static fromMeta(metaRepresentation : union{type{N4Object}, TypeTypeRef<Object>, string}) : MigrationArgumentTypeDescription {
		if (typeof metaRepresentation === 'string') { // detects generated "primitive" string literal
			return PrimitiveArgumentType.INSTANCE;
		} else if (typeof metaRepresentation == 'object' ||  typeof metaRepresentation == 'function') { // detects type{Object} references (e.g. A$1)
			// if the meta-representation is a direct constructor reference (indicates parameter being a value of that type).
			if (N4TypeUtils.isN4Type(metaRepresentation as Object)) {
				return new InstanceArgumentType(metaRepresentation as type{N4Object});
			}
			// if the meta-representation is a {@link ConstructorRef} (indidcates parameter being of type type{Object}).
			if (TypeTypeRef.isConstructorRef(metaRepresentation as Object)) {
				const typeRef = metaRepresentation as TypeTypeRef<Object>;
				return new TypeArgumentType(typeRef.type);
			}
		}
		return null;
	}
	
	/** Returns the {@link MigrationArgumentType} of the given value {@code v}. */
	public static fromValue(v : any) : MigrationArgumentTypeDescription {
		if (typeof v === 'object' || typeof v === 'function') {
			if (v == null) {
				throw new MigrationArgumentConversionError("Cannot detect migration argument type of null.")
			}
			if (N4TypeUtils.isN4Type((v as Object).constructor)) {
				return new InstanceArgumentType((v as Object).constructor)
			} else if (N4TypeUtils.isN4Type(v as Object)) {
				return new TypeArgumentType(v as type{Object});
			} else {
				throw new MigrationArgumentConversionError("Unsupported migration argument value " + v + " of type " + N4TypeUtils.typeDescription(v));
			}
			
		} else {
			return new PrimitiveArgumentType();
		}
	}
	
	public abstract get metaRepresentation() : any
	public abstract get type() : MigrationArgumentType
}

export public class PrimitiveArgumentType extends MigrationArgumentTypeDescription {
	public static INSTANCE = new PrimitiveArgumentType();
	
	// always use singleton INSTANCE
	private constructor() {}
	
	@Override @Final public metaRepresentation = "primitive";
	@Override @Final public type = MigrationArgumentType.PRIMITIVE; 
}

abstract class AbstractTypeBasedArgumentType extends MigrationArgumentTypeDescription {
	@Override @Final public metaRepresentation : type{Object}
	
	private constructor(type : type{Object}) {
		this.metaRepresentation = type;
	}
}
export public class InstanceArgumentType extends AbstractTypeBasedArgumentType {
	@Override @Final public type = MigrationArgumentType.INSTANCE;
}
export public class TypeArgumentType extends AbstractTypeBasedArgumentType {
	@Override @Final public type = MigrationArgumentType.TYPE;
}
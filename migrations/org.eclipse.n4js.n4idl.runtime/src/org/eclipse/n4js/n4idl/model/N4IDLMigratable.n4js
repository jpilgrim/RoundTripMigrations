/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {N4TypeUtils} from "org/eclipse/n4js/n4idl/model/N4TypeUtils";
/** 
 * Meta-representation of migratable N4IDL types.
 * 
 * Allows to access registered migrations for a given migratable N4IDL type.
 */

export public class N4IDLMigratable<TypeT extends Object> {
	private const MIGRATIONS_STATIC_FIELD = "$migrations__n4";
	
	/**
	 * Dynamic type-checking function to determine whether a given type object
	 * is eligible to be wrapped as an {@link N4IDLMigratable}.
	 */
	protected static isMigratable(n4Object : type{Object}) : boolean {
		return n4Object.hasOwnProperty(N4IDLMigratable.MIGRATIONS_STATIC_FIELD);
	}
	
	/**
	 * Returns a new {@link N4IDLMigratable} instance for the given
	 * {@link N4Object} or {@code type{N4Object}}.
	 * 
	 * Returns {@code null} if the n4Object is not a valid migratable object.
	 */
	public static <T extends Object> of(n4Object : T|type{T}) : N4IDLMigratable<T> {
		// early exit for null-value
		if (n4Object == null) { return null; }
		
		// depending on n4Object being an instance  of constructor, obtain constructor
		const objectConstructor : type{T} = N4TypeUtils.isN4Type(n4Object) ? 
			n4Object as type{T} :
			n4Object.constructor;
		
		if (!N4IDLMigratable.isMigratable(objectConstructor)) {
			return null;
		}
		
		return new N4IDLMigratable<T>(objectConstructor);
	}
	
	@Final
	protected wrappedType : type{TypeT}
	
	/** Initializes a new {@link N4IDLMigratable} which wraps around the given type. */
	protected constructor(wrappedType : type{TypeT}) {
		this.wrappedType = wrappedType;
	}
	
	/** 
	 * Returns a migration type switch function for the given target version.
	 * 
	 * A migration type switch function has the signature {@code (args : [any]) => [MigrationCandidate]}.
	 * 
	 * For a given list of arguments, it returns the {@link MigrationCandidate} that fit
	 * the list of arguments (in terms of types). In case no fitting migration can be found, the returned array may be empty.
	 */
	public migrations(targetVersion: int) : (...any) => [MigrationCandidate] {
		const migratable : Object+ = N4TypeUtils.dynamic(this.wrappedType)[N4IDLMigratable.MIGRATIONS_STATIC_FIELD] as Object;
		
		return migratable[targetVersion] as (...any) => [MigrationCandidate] || 
			function(...args : any) : [MigrationCandidate] { return []; };
	}
	
	/**
	 * The type that this meta-class describes.
	 */
	public get type() : type{TypeT} {
		return this.wrappedType;
	}
}

export public class ~MigrationCandidate {
	/** Migration function */
	public migration : Function
	
	/** Array of type{N4Object}, ConstructorRef<N4Object> or type-describing strings. */
	public parameterTypes : Array<union{type{N4Object}, TypeTypeRef<Object>, string}>
}

export public class ~TypeTypeRef<T> {
	public type : type{T}
	
	/** Returns {@code true} iff the given object can be considered a {@link ConstructorRef}. */
	public static isConstructorRef(o : Object) : boolean {
		return o.hasOwnProperty("type");
	}
}
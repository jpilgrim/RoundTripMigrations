/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {MigrationContextImpl} from "org/eclipse/n4js/n4idl/context/MigrationContextImpl";
import {DirtyStateProxy} from "org/eclipse/n4js/n4idl/controller/DirtyStateProxy";
import {MigrationProvider} from "org/eclipse/n4js/n4idl/controller/MigrationProvider";
import {MigrationProxy} from "org/eclipse/n4js/n4idl/controller/MigrationProxy";
import {MalformedMigrationArgumentsException} from "org/eclipse/n4js/n4idl/controller/MigrationRuntimeException";
import {NoSuchMigrationException} from "org/eclipse/n4js/n4idl/controller/MigrationRuntimeException";
import {N4TypeUtils} from "org/eclipse/n4js/n4idl/model/N4TypeUtils";
import {MigrationResolver} from "org/eclipse/n4js/n4idl/resolution/MigrationResolver";
import {MigrationUtils} from "org/eclipse/n4js/n4idl/resolution/MigrationUtils";
import {SetMap} from "org/eclipse/n4js/n4idl/util/SetMap";
import {SetMapEntry} from "org/eclipse/n4js/n4idl/util/SetMap";

/**
 * A {@link MigrationController} executes migration requests in a managed
 * fashion.
 * 
 * This implementation resolves migration based on migration arguments using 
 * a {@link MigrationResolver} as a default migration provider.
 * 
 * Furthermore it uses {@link DirtyStateProxy} to support modification detection
 * during the migration.
 * 
 * See {@link MigrationContextImpl} for the corresponding implementation of a migration context.
 */
export public class MigrationControllerImpl implements MigrationController {
	
	/**
	 * Static factory which creates a new {@link MigrationControllerImpl} instance 
	 * which migrates instances to the specified model target version.
	 */
	public static forTargetVersion(targetVersion : int, 
		context : MigrationContextImpl = undefined) : MigrationControllerImpl {
		return new MigrationControllerImpl(new MigrationResolver(targetVersion), context);
	}
	
	/** 
	 * Set of trace links from the source model instances in this controller
	 * to their counterparts in the target model of this controller.
	 *  
	 * Migrations which are executed in this context leave their trace
	 * in this map.
	 */
	private _recordedLinks = new SetMap<any, Object>();
	
	/** Set of currently migrated sub-graphs of the source model */
	private activeMigrationCalls = new SetMap<any, Function>();

	/** Set of sub-graphs which are fully resolved (no {@link MigrationProxy} instances) */
	private resolvedSubGraphs = new Set<any>();
	
	/** migration context to use for executing migrations with this controller */
	private _context : MigrationContextImpl
	
	/** the migration provider which is used to resolve migrations */ 
	private migrationProvider : MigrationProvider

	@Override
	public get context() : MigrationContextImpl {
		return this._context;
	}

	/**
	 * Instantiates a new {@link MigrationControllerImpl} with the 
	 * given {@code context}.
	 * 
	 * @param migrationProvider The migration provider which is used by this 
	 * 		controller to resolve migrations (e.g. depending on a specific target version).
	 * @param context Optional parameter to specify which migration context instance to use. By 
	 * 		default a new context is created.
	 */
	public constructor(migrationProvider : MigrationProvider, context : MigrationContextImpl = new MigrationContextImpl()) {
		this._context = context;
		this.migrationProvider = migrationProvider;
	}

	/**
	 * Migrates the given list of arguments with the given migration function.
	 * 
	 * Resolves all migration proxies if this is the root migration.
	 * 
	 * @param root Indicates whether this is the migration of the migration root.
	 */
	@Override
	public <TargetType extends Object> migrateWith(migration: Function, 
		args : [?], root : boolean = true) : TargetType {
		// Do not migrate if the recorded traces indicate that we have
		// already executed a migration with this exact list of arguments
		const recordedTrace = this.getRecordedTrace(args);
		if (recordedTrace) {
			return recordedTrace as TargetType;
		}
		
		// catch migration cycles (recursion guard against same arguments and migration)
		if (this.activeMigrationCalls.get(args) == migration) {
			return MigrationProxy.new(args) as TargetType;
		}
		// mark currently migrated sub-graph
		this.activeMigrationCalls.set(args, migration);
		
		// execute actual migration procedure
		const result = migration.apply(new SubMigrationControllerImpl(this), args) as TargetType;
	
		// if this yields a valid result (non-null/undef)
		if (result) {
			// store trace link from arguments to result
			this._recordedLinks.set(args, result);
		}
		
		// mark current sub-graph as migrated
		this.activeMigrationCalls.set(args, null);
		
		// If we just successfully migrate the migration root,
		// resolve all proxies.
		if (result /* valid result */ && root /* at the migration root */
			&& typeof result == 'object' /* result of object type */) {
			
			// attempt to resolve all proxies in the result
			this.resolve(result);
			// root migration result in dirty-state proxy to detect modifications
			const wrapped = this.wrapInDirtyStateProxy(result);
			return wrapped;
		}
		
		return result;
	}
	
	@Override
	public <TargetType extends Object> migrate(args : [?], root : boolean = true) : TargetType {
		// obtain the corresponding migration procedure via the MigrationResolver
		const migration : Function+ = this.migrationProvider.getMigration(args);
		
		// check whether the migration provider actually returned a migration
		if (migration == null) {
			// check whether the arguments are fully well-formed (e.g. do not contain null/undefined values)
			if (!MigrationUtils.areWellformedArguments(args)) {
				throw new MalformedMigrationArgumentsException(N4TypeUtils.typesToString(args));
			}
			
			// otherwise, it seems that no migration has been declared for these arguments 
			throw new NoSuchMigrationException("Failed to locate migration for arguments " + N4TypeUtils.typesToString(args) 
				+ " and migration provider " + this.migrationProvider + ": No migration has been declared for the given list of arguments.");
		}
		
		// delegate actual execution
		return this.migrateWith(migration, args, root);
	}
	
	/**
	 * Returns the set of trace links that have been recorded
	 * by this migration context.
	 */
	public get recordedLinks() : Set<SetMapEntry<any, Object>> {
		return this._recordedLinks.entries();
	}

	/**
	 * Wraps the given migration result(s) (single or multi-valued result)
	 * in an {@link DirtyStateProxy}.
	 */
	private <T extends Object> wrapInDirtyStateProxy(result : T) : T {
		return DirtyStateProxy.forObject(result);
	}
	
	/** 
	 * Tries to resolve a maximum-number of proxies in the
	 * given object or array.
	 *
	 * Recursively resolves sub-graphs.
	 * 
	 * @returns {@code true} iff the given sub-graph may still contain proxies
	 */
	private resolve(object : Object) {
		if (object === null) {
			console.error("Cannot resolve null");
			return;
		}
		if (typeof object !== 'object') {
			console.error("Cannot resolve non-object typed value " + object);
			return;
		}
		Object.keys(object)
			.forEach(k =>  this.resolveKey(object, k));
	}
	
	/**
	 * Returns {@code true} if the sub-graph with {@code object[key]} as root
	 * may be considered resolved.
	 */
	private resolveKey(object : Object, key : string) {
		const valueOrProxy = Reflect.get(object, key, object);
		
		if (valueOrProxy instanceof MigrationProxy) {
			// attempt to resolve proxy
			const result = this._recordedLinks.get(
				(valueOrProxy as MigrationProxy).migrationArguments);
			
			// fall-back to proxy if the value is not available yet
			object[key] = result || valueOrProxy; 

			// return {@code true} if the proxy could successfully be resolved
			if (result != null) {
				this.resolvedSubGraphs.add(object[key]);
			}
			return;
		}
		
		// recursively resolve sub-graphs if they were not marked as resolved yet
		if (valueOrProxy != null
			&& typeof valueOrProxy === 'object' 
			&& !this.resolvedSubGraphs.has(valueOrProxy)
		) {
			this.resolve(valueOrProxy as Object);
		}
	}
	
	/**
	 * Returns the recorded traces of the given object {@code o}.
	 */
	private getRecordedTrace(migrationArgs : [?]) : Object {
		return this._recordedLinks.get(migrationArgs);
	}
}

/**
 * Sub-migration controller for fulfilling nested {@code migrate}-calls 
 * during a migration.
 * 
 * Delegates all migration to the delegate controller but does not 
 * resolve proxies after completing the migration of sub-graphs.
 */
class SubMigrationControllerImpl implements MigrationController {
	@Final private delegate : MigrationControllerImpl
	
	private constructor(delegate : MigrationControllerImpl) { 
		this.delegate = delegate;
	}
	
	@Override
	public get context() : MigrationContextImpl {
		return this.delegate.context;
	}
	
	@Override
	public <TargetType extends Object> migrate(args : [?]) : TargetType {
		return this.delegate.migrate(args, false);
	}
	
	@Override
	public <TargetType extends Object> migrateWith(migration: Function, 
		args : [?], root : boolean = true) : TargetType {
		return this.delegate.<TargetType>migrateWith(migration, args, false);
	}
}
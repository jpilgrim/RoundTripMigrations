/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {randomGraph} from "graph/RandomGraphGenerator";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {MigrationControllerImpl} from "org/eclipse/n4js/n4idl/controller/MigrationController";

/** 
 * Test data model which can be used to represents a (connected) graph.
 */
export public class Node#1 {
	public id : int
	public successors : [Node]
	
	public constructor(id : int, successors : [Node]=) {
		this.successors = successors || [];
		this.id = id;
	}
	
	/**
	 * Returns a new factory for instances of {@link Node}.
	 * 
	 * The factory assures that new nodes are always initialized
	 * with a so-far unused ID.
	 */
	public static factory() : () => Node {
		let idCounter = 0;
		return () => new Node(idCounter++);
	}
}

export public class Node#2 {
	public id : int
	public successors : [Node] = []
}

/** Migrates graph node and all its successors. */
@Migration function migrateNode(n : Node#1) : Node#2 {
	const n2 = new Node#2();
	n2.id = n.id;
	// migrate all successor nodes
	for (let suc of n.successors) {
		n2.successors.push(migrate(suc));
	}
	return n2;
}

/**
 * Returns a non-circular representation of the graph by traversing it, starting
 * with the given root node.
 * 
 * Circular edges are indicated by link elements that refer to sub-graphs
 * via the node id.
 *
 * Example:
 * 		Graph <code>{(0,1), (1,0)}</code> is represented as 
 * 		<code>{id: 0, successors: {id: 1, successors: {link: 0}}}</code>
 */
@VersionAware
export public function <N extends ~Object with {id : int, successors: [N]}> 
	nonCircularRepresentation(root : N, cache = new Set<any>()) : Object {
	
	cache.add(root);
	if (typeof root.successors === "undefined" || typeof root.id === "undefined") {
		throw "Invalid node object in graph " + root;
	}
	return {id: root.id, successors: (root.successors || [])
		.map((n : N) => {
			if (cache.has(n)) {
				return {link: n.id};
			} else {
				return nonCircularRepresentation(n, cache);
			}
		})
	};
}

/**
 * Traverses the graph beginning with the given root node and
 * returns a set of all traversed nodes.
 */
@VersionAware
export public function findAllNodes(root : Node#1, nodes = new Set<Node#1>()) : Set<Node#1> {
	if (nodes.has(root)) { return nodes; }
	nodes.add(root);
	root.successors.forEach(s => findAllNodes(s, nodes));
	return nodes;
}

/**
 * Asserts that the migration of of a (seeded) random graph with the
 * given parameters correctly maintains the structure of the graph. 
 */
@VersionAware
export public function assertMigrationMaintainsGraph(seed : int, numberOfNodes : int, maxOutgoingEdges : int) {
	// keep a counter for node IDs
	let idCounter = 0;
	// generate (seeded) random graph using parameters 
	const graph = <Node#1>randomGraph(seed, numberOfNodes, 
		maxOutgoingEdges, () => new Node#1(idCounter++));
	
	const c = MigrationControllerImpl.forTargetVersion(2);
	const migratedGraph = c.migrate([graph]) as Node#2;
	
	<Node#1, Node#2>assertEqualGraph(graph, migratedGraph, "The migration retains the graph structures for parameters " + 
		`seed=${seed}, numberOfNodes=${numberOfNodes}, maxOutgoingEdges=${maxOutgoingEdges}.`);
}

/**
 * Asserts that the graphs represented by {@code n1} and {@code n2}
 * are identical in their structure (including the node IDs).
 */
@VersionAware
export public function <N1 extends ~Object with {id : int, successors: [N1]}, N2 extends ~Object with {id : int, successors: [N2]}> 
	assertEqualGraph(n1 : N1, n2 : N2, message : string) {
	
	const graph1 = JSON.stringify(nonCircularRepresentation(n1));
	const graph2 = JSON.stringify(nonCircularRepresentation(n2));
	
	if (graph1 != graph2) {
//		console.log(graph1);
//		console.log(graph2);
		Assert.equal(graph1, graph2, message);
	}
}
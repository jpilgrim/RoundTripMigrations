/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {assertMigrationMaintainsGraph} from "graph/Node";
import {PseudoRandomNumberGenerator} from "graph/RandomGraphGenerator";

// the upper bound for the random generation of seeds
const upperSeedBound = 18301395124;

/**
 * Generates random graphs of increasing size and complexity and 
 * migrates them using a {@link MigrationContextImpl}.
 * 
 * Asserts that all the migrated graphs maintain the 
 * structure of the original input.
 */
@VersionAware
export public class GraphMigrationFuzzTest {
	
	@Test
	public test5000GraphsNodes10Edges5() {
		maintainsGraph(7591725, 5000, 10, 5);
	}
	
	@Test
	public test5000GraphsNodes20Edges5() {
		maintainsGraph(70806920, 5000, 20, 5); }
	
	@Test
	public test5000GraphsNodes20Edges10() {
		maintainsGraph(28020865, 5000, 20, 10);
	}
	
	@Test
	public test5000GraphsNodes20Edges20() {
		maintainsGraph(69661188, 5000, 20, 20);
	}
	
	@Test
	public test5000GraphsNodes30Edges10() {
		maintainsGraph(69661188, 5000, 30, 10);
	}
	
	@Test
	public test5000GraphsNodes30Edges20() {
		maintainsGraph(115673003, 5000, 30, 20);
	}
	
	@Test
	public test5000GraphsNodes30Edges30() {
		maintainsGraph(40785353, 5000, 30, 30);
	}
}

/**
 * Runs {@code repetitions} many repetitions of an 
 * {@code assertMigrationMaintainsGraph} assertions with
 * randomly generated seeds (seed-generation is seeded by {@code seed}).
 */
@VersionAware
function maintainsGraph(seed : number, repetitions : number, 
	numberOfStates : number, numberOfOutgoingEdges : number) {
		
	// initialize new PRNG for the generation of seeds
	const prng = new PseudoRandomNumberGenerator(seed);
		
	for (let i=0; i<repetitions; i++) {
		assertMigrationMaintainsGraph(prng.randomInt(upperSeedBound), numberOfStates, numberOfOutgoingEdges);
	}
}

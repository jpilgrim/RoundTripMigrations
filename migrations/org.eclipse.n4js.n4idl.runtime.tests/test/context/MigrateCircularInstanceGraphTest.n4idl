/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {MigrationControllerImpl} from "org/eclipse/n4js/n4idl/controller/MigrationController";

class C#1 {
	initial? : boolean
	c? : C
}

class C#2 {
	initial? : boolean
	c? : C
}

@Migration function m(c : C#1) : C#2 {
	const c2 = new C#2();
	c2.initial = c.initial;
	if (c.c) {	
		c2.c = migrate(c.c);
	}
	return c2;
}

@Migration function mBack(c : C#2) : C#1 {
	const c1 = new C#1();
	c1.initial = c.initial;
	if (c.c) {	
		c1.c = migrate(c.c);
	}
	return c1;
}

@VersionAware
export public class MigrateCularInstanceGraphTest {
	@Test
	public testCircularInstanceGraph() {
		// setup circular graph
		const c = new C#1();
		c.c = c;
		
		const controller = MigrationControllerImpl.forTargetVersion(2);
		const c2 = controller.migrate([c]) as C#2;
		
		Assert.equal(c2.c, c2, "Circular structure is represented in migrated instance graph.");		
	}
	
	@Test
	public testChainOfC() {
		const CHAIN_ELEMENTS = 100;
		
		// setup circular chain graph
		const chain = chainOf(CHAIN_ELEMENTS);
		// connect end and beginning
		followC(CHAIN_ELEMENTS - 1, chain).c = chain;
		
		const controller = MigrationControllerImpl.forTargetVersion(2);
		const c2 = controller.migrate([chain]) as C#2;
		
		Assert.equal(c2, followC(CHAIN_ELEMENTS, c2), "End and beginning of the chain are connected in the migrated instance graph.")
	}
}

/** 
 * Follows c.c {@code times} many times and returns 
 * the resulting instance of C
 */
@VersionAware
function <CType extends C#1|C#2> followC(times : int, c : CType) : CType {
	if (times == 0) { return c} return followC(times - 1, c.c as CType);
}

@VersionAware
function chainOf(length : int, element : C#1 = new C#1()) : C#1 {
	if (length == 0) {
		return null;
	}
	element.c = chainOf(length - 1);
	return element;
}
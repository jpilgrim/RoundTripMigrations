/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {MigrationContextImpl} from "org/eclipse/n4js/n4idl/context/MigrationContextImpl";
import {MigrationControllerImpl} from "org/eclipse/n4js/n4idl/controller/MigrationController";

class A#1 { b1 : B; b2 : B }
class B#1 { value : string }
class A#2 { renamedB1 : B; renamedB2 : B; }
class B#2 { renamedValue : string }

@Migration function migrateA(a : A#1) : A#2 {
	const a2 = new A#2();
	a2.renamedB1 = migrate(a.b1);
	a2.renamedB2 = migrate(a.b2);
	return a2;
}

@Migration function migrateB(b : B#1) : B#2 {
	const b2 = new B#2();
	b2.renamedValue = b.value;
	return b2;
}

class MultiContainer#1 {
	m1 : MultiA
	m2 : MultiB
	m3 : MultiA
	m4 : MultiB
}

class MultiA#1 { v : string }
class MultiB#1 { v : string }

class MultiA#2 { v : string }
class MultiB#2 { v : string }

@Migration function migrateMultiContainer(c : MultiContainer#1) : MultiContainer#2 {
	const c2 = new MultiContainer#2();
	
	const multis1 = migrate(c.m1, c.m2);
	const multis2 = migrate(c.m1, c.m2);
	
	c2.m1 = multis1.a;
	c2.m2 = multis1.b;
	c2.m3 = multis2.a;
	c2.m4 = multis2.b;
	
	return c2;
}

@Migration function migrateMultiAB(a : MultiA#1, b : MultiB#1) : ~Object with {a : MultiA#2, b : MultiB#2} {
	const a2 = new MultiA#2();
	const b2 = new MultiB#2();
	a2.v = a.v;
	b2.v = b.v; 
	return {a: a2, b: b2};
}

@VersionAware
export public class MigrateNonTreeGraphsTest {
	@Test
	public testMultiArgumentTree() {
		const c = new MultiContainer#1();
		c.m1 = new MultiA#1();
		c.m2 = new MultiB#1();
		c.m3 = c.m1;
		c.m4 = c.m2;
		
		c.m1.v = "m1Value";
		c.m2.v = "m2Value";
		
		const controller = MigrationControllerImpl.forTargetVersion(2);
		const c2 : MultiContainer#2 = controller.migrate([c]) as MultiContainer#2;
		
		Assert.equal(c2.m1, c2.m3, "m1 == m3");
		Assert.equal(c2.m2, c2.m4, "m2 == m4");
		
		const reverseContext = MigrationContextImpl.newContext(controller);
		
		const traceA = reverseContext.getTrace(c2.m1) as [[Object]];
		const traceB = reverseContext.getTrace(c2.m2) as [[Object]];;
		
		Assert.equal(traceA.length, 2, "c2.m1 has two trace links.");
		Assert.equal(traceB.length, 2, "c2.m2 has two trace links.");
	
		Assert.deepEqual(traceA, [c.m1, c.m2], "c2.m1 has a trace link with targets (c.m1, c.m2).")
		Assert.deepEqual(traceB, [c.m1, c.m2], "c2.m2 has a trace link with targets (c.m1, c.m2).")
	}
	@Test
	public testNonTree() {
		const a = new A#1();
		a.b1 = new B#1();
		a.b2 = a.b1;
		
		a.b1.value = "b1Value";
		
		const controller = MigrationControllerImpl.forTargetVersion(2);
		const a2 : A#2 = controller.migrate([a]) as A#2;
		
		Assert.equal(a2.renamedB1, a2.renamedB2, "renamedB1 and renamedB2 are the same instance in the migrated instance graph.");
	}
}
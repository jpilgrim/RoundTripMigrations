/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */

import {Node} from "graph/Node";
import {assertEqualGraph} from "graph/Node";
import {assertMigrationMaintainsGraph} from "graph/Node";
import {nonCircularRepresentation} from "graph/Node";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {MigrationControllerImpl} from "org/eclipse/n4js/n4idl/controller/MigrationController";
/**
 * Test to assure that {@link MigrationContextImpl} migrates arbitrarily connected
 * instance graphs correctly by maintaining the whole graph structure (including cycles).
 * 
 * Depends on the {@link Node} model.
 * 
 * In parts, this test uses a (seeded) random generator to generate 
 * large graphs based on a seed and parameters. The generated graphs 
 * can be visualized using tools in the testhelpers project.
 */
@VersionAware
export public class MigrateArbitrarilyConnectedGraphTest {
	@Test
	public testSimpleNodeStructure() {
		const newNode = Node#1.factory();
		const n = newNode();
		n.successors = [
			newNode(),
			newNode()
		];
		
		n.successors.push(n);
		
		const controller = MigrationControllerImpl.forTargetVersion(2);
		const n2 = controller.migrate([n]) as Node#2;
		
		assertEqualGraph(n, n2, "graph structure is maintained throughout the migration.")
	}
	
	@Test
	public testSimpleNonEqualGraphs() {
		const newNode = Node#1.factory();
		const graph1 = newNode();
		graph1.successors = [newNode()]
		
		const newNode2 = Node#1.factory();
		const graph2 = newNode2();
		graph2.successors = [newNode2()]
		graph2.successors.push(graph2);
		
		const finiteSerialisation1 = JSON.stringify(nonCircularRepresentation(graph1));
		const finiteSerialisation2 = JSON.stringify(nonCircularRepresentation(graph2));
		
		Assert.notEqual(finiteSerialisation1, finiteSerialisation2, "Non-equal graphs do differ in their finite representation.")
	}
	
	@Test
	public testRandomGraph30NodesSimpleStructure() {
		assertMigrationMaintainsGraph(69890781, 30, 4);
		assertMigrationMaintainsGraph(83196389, 30, 4);
		assertMigrationMaintainsGraph(45063157, 30, 4);
		assertMigrationMaintainsGraph(56474223, 30, 4);
		assertMigrationMaintainsGraph(24926345, 30, 4);
		assertMigrationMaintainsGraph(98431298, 30, 4);
		assertMigrationMaintainsGraph(74582359, 30, 4);
		assertMigrationMaintainsGraph(56785491, 30, 4);
		assertMigrationMaintainsGraph(56117726, 30, 4);
	}
	
	@Test
	public testRandomGraph30NodesComplexStructure() {
		assertMigrationMaintainsGraph(36426732, 30, 10);
		assertMigrationMaintainsGraph(122082353, 30, 10);
		assertMigrationMaintainsGraph(13600352, 30, 30);
		assertMigrationMaintainsGraph(45801970, 30, 10);
		assertMigrationMaintainsGraph(21411282, 30, 10);
		assertMigrationMaintainsGraph(589821, 30, 10);
		assertMigrationMaintainsGraph(49520406, 30, 10);
		assertMigrationMaintainsGraph(99590576, 30, 10);
	}
	
	@Test
	public testRandomGraph30NodesHighlyComplexStructure() {
		assertMigrationMaintainsGraph(43336052, 30, 30);
		assertMigrationMaintainsGraph(123385875, 30, 30);
		assertMigrationMaintainsGraph(122357167, 30, 30);
		assertMigrationMaintainsGraph(79653277, 30, 30);
		assertMigrationMaintainsGraph(111162151, 30, 30);
	}
	
	@Test
	public testRandomGraph100NodesComplexStructure() {
		assertMigrationMaintainsGraph(106614956, 100, 10);
		assertMigrationMaintainsGraph(122357167, 100, 10);
		assertMigrationMaintainsGraph(21411282, 100, 10);
		assertMigrationMaintainsGraph(88926882, 100, 10);
	}
}

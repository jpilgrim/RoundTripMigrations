/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {findAllMigrations} from "migrations/MigrationResolverTestHelpers";
import {findMigration} from "migrations/MigrationResolverTestHelpers";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/** 
 * Unit-test which assures that the emitted code of the N4IDL-ES transpiler
 * and the {@link MigrationResolver} inter-operate in that all registered migration
 * can be found and are dynamically dispatched. 
 */
@VersionAware
export public class MigrationResolverTest {
	@Test
	public testSimpleMigrationResolution() {
		Assert.equal(findMigration(2, [new A#1()]), m_a, "(A#1 -> 2) => m_a");
		Assert.equal(findMigration(2, [new B#1()]), m_b, "(B#1 -> 2) => m_b");
		Assert.equal(findMigration(2, [new C#1()]), m_c, "(C#1 -> 2) => m_c");
		Assert.equal(findMigration(2, [new D#1()]), m_d, "(D#1 -> 2) => m_d");
		Assert.equal(findMigration(2, [new OA#1()]), m_oa, "(OA#1 -> 2) => m_oa");
		Assert.equal(findMigration(2, [new OB#1()]), m_ob, "(OB#1 -> 2) => m_ob");
		Assert.equal(findMigration(2, [new OC#1()]), m_oc, "(OC#1 -> 2) => m_oc");
		Assert.equal(findMigration(2, [new OD#1()]), m_od, "(OD#1 -> 2) => m_od");
	}
	
	@Test
	public testSimpleDynamicDispatchResolution() {
		let b1 : A#1 = new B#1();
		let c1 : A#1 = new C#1();
		let d1 : A#1 = new D#1();
		
		Assert.equal(findMigration(2, [b1]), m_b, "(B#1 as (A#1) -> 2) => m_b");
		Assert.equal(findMigration(2, [c1]), m_c, "(C#1 as (A#1) -> 2) => m_c");
		Assert.equal(findMigration(2, [d1]), m_d, "(D#1 as (A#1) -> 2) => m_d");
	}
	
	@Test
	public testNoSuchMigration() {
		Assert.equal(findAllMigrations(3, [new A#1()]).length, 0, "No migration for A#1 -> 3");
		Assert.equal(findAllMigrations(3, [new B#1()]).length, 0, "No migration for B#1 -> 3");
		Assert.equal(findAllMigrations(3, [new C#1()]).length, 1, "One migration for C#1 -> 3");
		Assert.equal(findAllMigrations(3, [new D#1()]).length, 1, "One migration for D#1 -> 3");
	}
}

class A#1 {}
class B#1 extends A {}
class C#1 extends B {}
class D#1 extends C {}

class OA#1 {}
class OB#1 extends A {}
class OC#1 extends B {}
class OD#1 extends C {}

@Migration function m_a(a1 : A#1) : A#2 { return null; }
@Migration function m_b(b1 : B#1) : B#2 { return null; }
@Migration function m_c(c1 : C#1) : C#2 { return null; }
@Migration function m_d(a1 : D#1) : D#2 { return null; }

@Migration function m_oa(a1 : OA#1) : OA#2 { return null; }
@Migration function m_ob(b1 : OB#1) : OB#2 { return null; }
@Migration function m_oc(c1 : OC#1) : OC#2 { return null; }
@Migration function m_od(a1 : OD#1) : OD#2 { return null; }

@Migration function m_c3(c1 : C#1) : C#3 { return null; }
/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {TypeDistanceComputer} from "org/eclipse/n4js/n4idl/resolution/TypeDistanceComputer";


class Top {}
class Level1 extends Top {}
class Level2 extends Level1 {}
class Level3 extends Level2 {}
class Level4 extends Level3 {}
class Level5 extends Level4 {}
class Level6 extends Level5 {}
class Level7 extends Level6 {}

class Branch3 extends Level2 {}
class Branch4 extends Branch3 {}
class Branch5 extends Branch4 {}

/**
 * Test which checks that the {@link TypeDistanceCompute} works
 * as expected for class-only hierarchies.
 */
export public class ClassTypeDistanceTest {
	private computer = new TypeDistanceComputer();
	
	@Test
	public testBasicClassDistance() {
		// make sure that a more generic type has always a type distance of Infinity
		Assert.equal(this.d(Top, Level1), Infinity);
		Assert.equal(this.d(Top, Level2), Infinity);
		Assert.equal(this.d(Top, Level5), Infinity);
		Assert.equal(this.d(Top, Level6), Infinity);
		
		// type distance to top class
		Assert.equal(this.d(Top, Top), 0);
		Assert.equal(this.d(Level1, Top), 1);
		Assert.equal(this.d(Level2, Top), 2);
		Assert.equal(this.d(Level3, Top), 3);
		Assert.equal(this.d(Level4, Top), 4);
		Assert.equal(this.d(Level5, Top), 5);
		Assert.equal(this.d(Level6, Top), 6);
		Assert.equal(this.d(Level7, Top), 7);
		
		// between multiple levels
		Assert.equal(this.d(Level1, Level1), 0);
		Assert.equal(this.d(Level7, Level5), 2);
		Assert.equal(this.d(Level2, Level7), Infinity);
		Assert.equal(this.d(Level3, Level1), 2);
		
		// between branches
		Assert.equal(this.d(Branch3, Level3), Infinity);
		Assert.equal(this.d(Branch3, Level2), 1);
		Assert.equal(this.d(Branch4, Level2), 2);
		Assert.equal(this.d(Level7, Branch4), Infinity);
		Assert.equal(this.d(Level2, Branch5), Infinity);
	}
	
	@Test
	public testBasicInstanceTypeDistance() {
		// make sure that a more generic type has always a type distance of Infinity
		Assert.equal(this.dInstance(new Top(), Level1), Infinity);
		Assert.equal(this.dInstance(new Top(), Level2), Infinity);
		Assert.equal(this.dInstance(new Top(), Level5), Infinity);
		Assert.equal(this.dInstance(new Top(), Level6), Infinity);
		
		// type distance to top class
		Assert.equal(this.dInstance(new Top(), Top), 0);
		Assert.equal(this.dInstance(new Level1(), Top), 1);
		Assert.equal(this.dInstance(new Level2(), Top), 2);
		Assert.equal(this.dInstance(new Level3(), Top), 3);
		Assert.equal(this.dInstance(new Level4(), Top), 4);
		Assert.equal(this.dInstance(new Level5(), Top), 5);
		Assert.equal(this.dInstance(new Level6(), Top), 6);
		Assert.equal(this.dInstance(new Level7(), Top), 7);
		
		// between multiple levels
		Assert.equal(this.dInstance(new Level1(), Level1), 0);
		Assert.equal(this.dInstance(new Level7(), Level5), 2);
		Assert.equal(this.dInstance(new Level2(), Level7), Infinity);
		Assert.equal(this.dInstance(new Level3(), Level1), 2);
		
		// between branches
		Assert.equal(this.dInstance(new Branch3(), Level3), Infinity);
		Assert.equal(this.dInstance(new Branch3(), Level2), 1);
		Assert.equal(this.dInstance(new Branch4(), Level2), 2);
		Assert.equal(this.dInstance(new Level7(), Branch4), Infinity);
		Assert.equal(this.dInstance(new Level2(), Branch5), Infinity);
	}
	
	/** Computes the type distance from {@code t1} to {@code t2}. */
	private d(t1 : type{? extends Object}, t2 : type{? extends Object}) : int {
		return this.computer.compute(t1, t2);
	}
	
	/** Computes the type distance from {@code t1} to {@code t2}. */
	private dInstance(o : Object, t2 : type{? extends Object}) : int {
		return this.computer.computeObject(o, t2);
	}
}
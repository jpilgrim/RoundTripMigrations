/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {LoggingMigrationController} from "migrations/LoggingMigrationContext";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {AmbiguousMigrationCallException} from "org/eclipse/n4js/n4idl/controller/MigrationRuntimeException";

@VersionAware
export public class MigrateCallResolutionTest {
	@Test
	testMigrateCallResolution() {
		const controller = new LoggingMigrationController(2);
		
		assertLastMigrateCall = assertLastMigrateCall.bind(controller); 
		// invoke 'client' test migration (assertions are to be found inside the 'client' migration)
		controller.migrateWith(client, [new Client#1()]);
	}
}

class A#1 { 	field : B }
class A#2 { field : B }

class B#1 {}
class B#2Â {}

class C#1 extends B {}
class C#2 extends B {}

class D#1 extends C {}
class D#2 extends C {}

class Client#1 {}

@Migration function mA(a : A#1) : A#2 { return null; }
@Migration function mB(a : B#1) : B#2 { return null; }
@Migration function mC(a : C#1) : C#2 { return null; }

@Migration function mAA(a1 : A#1, a2 : A#1) : A#2 { return null; }
@Migration function mAB(a : A#1, b : B#1) : A#2 { return null; }
@Migration function mAC(a : A#1, c : C#1) : A#2 { return null; }

@Migration function mBA(b : B#1, a : A#1) : B#2 { return null; }
@Migration function mBB(b1 : B#1, b2 : B#1) : B#2 { return null; }
@Migration function mBC(b : B#1, c : C#1) : B#2 { return null; }

@Migration function mCA(b : C#1, a : A#1) : B#2 { return null; }
@Migration function mCB(b1 : C#1, b2 : B#1) : B#2 { return null; }
@Migration function mCC(b : C#1, c : C#1) : B#2 { return null; }

@Migration function mAint(a : A#1, i : int) : A#2 { return null; }
@Migration function mAstring(a : A#1, s : string) : A#2 { return null; }
@Migration function mAtype(a : A#1, t : type{B#1}) : A#2 { return null; }

@Migration function primitiveFirst(i : int, a : A#1) : A#2 { return null; }

@Migration function typesOnlyA(t : type{A#1}) : type{A#2} { return null; }
@Migration function typesOnlyB(t : type{B#1}) : type{B#2} { return null; }

@Migration function multiTypesOnlyA(t1 : type{A#1}, t2 : type{B#1}) : type{A#2} { return null; }
@Migration function multiTypesOnlyB(t1 : type{B#1}, t2 : type{A#1}) : type{B#2} { return null; }

@Migration function unambiguousTypesOnly1(t1 : type{B#1}, t2 : type{C#1}) : type{B#2} { return null; }
@Migration function unambiguousTypesOnly2(t1 : type{C#1}, t2 : type{B#1}) : type{B#2} { return null; }


@Migration function client(c : Client#1) : Client#2 {
	
	// instances as single arguments
	migrate(new A#1());
	assertLastMigrateCall(mA);
	migrate(new B#1());
	assertLastMigrateCall(mB);
	migrate(new C#1());
	assertLastMigrateCall(mC);
	
	migrate(new A#1(), new A#1());
	assertLastMigrateCall(mAA);
	migrate(new A#1(), new B#1());
	assertLastMigrateCall(mAB);
	migrate(new A#1(), new C#1());
	assertLastMigrateCall(mAC);
	
	migrate(new B#1(), new A#1());
	assertLastMigrateCall(mBA);
	migrate(new B#1(), new B#1());
	assertLastMigrateCall(mBB);
	migrate(new B#1(), new C#1());
	assertLastMigrateCall(mBC);
	
	migrate(new C#1(), new A#1());
	assertLastMigrateCall(mCA);
	migrate(new C#1(), new B#1());
	assertLastMigrateCall(mCB);
	migrate(new C#1(), new C#1());
	assertLastMigrateCall(mCC);
	
	// no migrations were explicitly declared for D (fall-back to C)
	migrate(new D#1());
	assertLastMigrateCall(mC);
	migrate(new A#1(), new D#1());
	assertLastMigrateCall(mAC);
	migrate(new B#1(), new D#1());
	assertLastMigrateCall(mBC);
	migrate(new C#1(), new D#1());
	assertLastMigrateCall(mCC);
	migrate(new D#1(), new D#1());
	
	// with primitives
	migrate(new A#1(), 12);
	assertLastMigrateCall(mAint);
	
	migrate(new A#1(), "hello");
	assertLastMigrateCall(mAstring);
	
	// with type{} values
	migrate(new A#1(), D#1);
	assertLastMigrateCall(mAtype);
	migrate(new A#1(), C#1);
	assertLastMigrateCall(mAtype);
	
	// type{} arguments only
	migrate(A#1);
	assertLastMigrateCall(typesOnlyA);
	migrate(B#1);
	assertLastMigrateCall(typesOnlyB);
	migrate(C#1);
	assertLastMigrateCall(typesOnlyB);
	
	migrate(A#1, B#1);
	assertLastMigrateCall(multiTypesOnlyA);
	migrate(B#1, A#1);
	assertLastMigrateCall(multiTypesOnlyB);
	
	// use eval here to prevent warning wrt ambiguity in this file
	Assert.throws(() => { eval("this.migrate([D$1, D$1])") }, 
		AmbiguousMigrationCallException, 
		"(D#1, D#1) cannot be un-ambiguously resolved.");  
	
	// primitives as first arguments
	migrate(1, new A#1());
	assertLastMigrateCall(primitiveFirst);
	
	return null;
}

@VersionAware
@This(LoggingMigrationController)
function assertLastMigrateCall(migration : Function) {
	const log = this.log;
	Assert.equal(log[log.length - 1], migration, "Most-recent migration call does not match expectations.");
}
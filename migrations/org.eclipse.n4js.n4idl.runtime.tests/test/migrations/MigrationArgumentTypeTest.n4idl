/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {TypeTypeRef} from "org/eclipse/n4js/n4idl/model/N4IDLMigratable";
import {MigrationArgumentConversionError} from "org/eclipse/n4js/n4idl/resolution/MigrationArgumentType";
import {MigrationArgumentType} from "org/eclipse/n4js/n4idl/resolution/MigrationArgumentType";
import {MigrationArgumentTypeDescription} from "org/eclipse/n4js/n4idl/resolution/MigrationArgumentType";

class A#1 implements I {}
class B#1 extends A {}
interface I#1 {}


@VersionAware
export public class MigrationArgumentTypeTest {
	@Test
	public testFromMetaRepresentation() {
		Assert.isTrue(fromMeta("primitive").type == MigrationArgumentType.PRIMITIVE, "primitive");
		Assert.isTrue(fromMeta("a").type == MigrationArgumentType.PRIMITIVE, "a");
		
		Assert.isTrue(fromMeta(I#1).type == MigrationArgumentType.INSTANCE, "I#1");
		Assert.isTrue(fromMeta(A#1).type == MigrationArgumentType.INSTANCE, "A#1");
		Assert.isTrue(fromMeta(B#1).type == MigrationArgumentType.INSTANCE, "B#1");
		
		Assert.isTrue(fromMeta({type: A#1}).type == MigrationArgumentType.TYPE);
		Assert.isTrue(fromMeta({type: I#1}).type == MigrationArgumentType.TYPE);
		Assert.isTrue(fromMeta({type: B#1}).type == MigrationArgumentType.TYPE);
	}
	
	@Test
	public testFromValue() {
		Assert.equal(fromValue("hello").type, MigrationArgumentType.PRIMITIVE, "string");
		Assert.equal(fromValue(12).type, MigrationArgumentType.PRIMITIVE, "int");
		Assert.equal(fromValue(false).type, MigrationArgumentType.PRIMITIVE, "boolean");
		
		// TODO FIXME, support for object prototype instances
		Assert.throws(() => fromValue({}), MigrationArgumentConversionError, "");
		
		Assert.equal(fromValue(new A#1()).type, MigrationArgumentType.INSTANCE, "new A#1()");
		Assert.equal(fromValue(new B#1()).type, MigrationArgumentType.INSTANCE, "new B#1()");
	}
}

function fromValue(v : any) : MigrationArgumentTypeDescription {
	return MigrationArgumentTypeDescription.fromValue(v);
}

function fromMeta(meta : any) : MigrationArgumentTypeDescription {
	return MigrationArgumentTypeDescription.fromMeta(meta as union{type{N4Object}, TypeTypeRef<Object>, string});
}

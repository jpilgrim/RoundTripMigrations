/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {TypeDistanceComputer} from "org/eclipse/n4js/n4idl/resolution/TypeDistanceComputer";

export public interface Root#1 {
	public member : int
}

interface I1_Level1#1 extends Root {}
interface I2_Level1#1 extends Root {}
interface I3_Level1#1 extends Root {}

interface I1_2_Level2#1 extends I1_Level1, I2_Level1 {}
interface I2_3_Level2#1 extends I2_Level1, I3_Level1 {}

interface I1_2_23_Level2#1 extends I1_Level1, Root, I2_3_Level2 {}

interface Branch_Level1#1 extends I1_Level1 {}
interface Branch_Level2#1 extends Branch_Level1 {}
interface Branch_Level3#1 extends Branch_Level2 {}
interface Branch_Level4#1 extends Branch_Level3, I1_2_23_Level2 {}

/**
 * Test which checks that the {@link TypeDistanceCompute} works
 * as expected for interface-only hierarchies.
 */
@VersionAware
export public class ClassTypeDistanceTest {
	
	private computer = new TypeDistanceComputer();
	
	@Test
	public testInterfaceTypeDistance() {
		Assert.equal(this.d(I1_Level1#1, Root#1), 1, "I1_Level1 -> Root");
		Assert.equal(this.d(I2_Level1#1, Root#1), 1, "I2_Level1 -> Root");

		Assert.equal(this.d(I1_2_Level2#1, Root#1), 2, "I1_2_Level2 -> Root");
		Assert.equal(this.d(I2_3_Level2#1, Root#1), 2, "I2_3_Level2 -> Root");
		
		// multiple-inheritance hierarchy with 3 different ways to reach root
		Assert.equal(this.d(I1_2_23_Level2#1, Root#1), 1, "I2_23_Level2 -> Root");
		Assert.equal(this.d(I1_2_23_Level2#1, I2_Level1#1), 2, "I2_23_Level2 -> I2_Level1");
		Assert.equal(this.d(I1_2_23_Level2#1, I1_Level1#1), 1, "I2_23_Level2 -> I1_Level1");
		Assert.equal(this.d(I1_2_23_Level2#1, I2_3_Level2#1), 1, "I2_23_Level2 -> I2_3_Level2")
		
		Assert.equal(this.d(Branch_Level1#1, Root#1), 2, "Branch_Level1 -> Root");
		Assert.equal(this.d(Branch_Level2#1, Root#1), 3, "Branch_Level2 -> Root");
		Assert.equal(this.d(Branch_Level3#1, Root#1), 4, "Branch_Level3 -> Root");
		Assert.equal(this.d(Branch_Level4#1, Root#1), 2, "Branch_Level4 -> Root");
	}
	
	/** Computes the type distance from {@code t1} to {@code t2}. */
	private d(t1 : type{? extends Object}, t2 : type{? extends Object}) : int {
		return this.computer.compute(t1, t2);
	}
}
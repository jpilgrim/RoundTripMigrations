/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {N4IDLClassifier} from "org/eclipse/n4js/n4idl/model/N4IDLClassifier";

class A#1 implements I, K{}
class B#1 implements IJK {}
class C#1 implements K {}

interface I#1 {}
interface J#1 extends I {}
interface K#1 extends J {}

interface IJK#1 extends I, J, K {}

class JImpl#1 implements J {}
class IImpl#1 implements I {}

@Migration
function m1(a1 : A#1, i : I#1) : A#2 {
	return null;
}

@Migration
function m2(a1 : A#1, j : J#1) : A#2 {
	return null;
}

@VersionAware
export public class N4IDLClassifierTest {
	@Test
	public testImplementedInterfacesAccess() {
		Assert.equal(N4IDLClassifier.of(I#1).implementedInterfaces.length, 0, "I#1 does not have any implemented interfaces.");		
		Assert.equal(names(N4IDLClassifier.of(J#1).implementedInterfaces), "I$1", "J#1 has one implemented interface.")
		Assert.equal(names(N4IDLClassifier.of(K#1).implementedInterfaces), "J$1", "K#1 has one implemented interface.")
		
		Assert.equal(names(N4IDLClassifier.of(IJK#1).implementedInterfaces), "I$1, J$1, K$1", "IJK#1 has 3 implemented interfaces.")
		
		Assert.equal(names(N4IDLClassifier.of(A#1).implementedInterfaces), "I$1, K$1", "A#1 has 2 implemented interfaces.")
		Assert.equal(names(N4IDLClassifier.of(B#1).implementedInterfaces), "IJK$1", "B#1 has 1 implemented interface.")
		Assert.equal(names(N4IDLClassifier.of(C#1).implementedInterfaces), "K$1", "C#1 has 1 implemented interface.")
	}
	
	@Test
	public testMigrationsAccess() {
		const v2Switch = N4IDLClassifier.of(A#1).migrations(2);

		const resultsForI = v2Switch([new A#1(), new IImpl#1()]);
		
		Assert.equal(resultsForI.length, 1, "Switch returns a single migration candidate for arguments of type (A,I)");
		Assert.isTrue(resultsForI[0].migration == m1, "Switch returns m1 for arguments of type (A,I)");
		
		const resultsForJ = v2Switch([new A#1(), new JImpl#1()]);
		
		Assert.equal(resultsForJ.length, 2, "Switch returns two migration candidates for arguments of type (A,J)");
		Assert.isTrue(resultsForJ[0].migration == m1, "Switch returns m1 for arguments of type (A,J)");
		Assert.isTrue(resultsForJ[1].migration == m2, "Switch returns m2 for arguments of type (A,J)");
	}
}

function names(n4Types : [type{? extends Object}]) : string {
	return n4Types.map(t => N4Type.of(t).name).join(", ");
}
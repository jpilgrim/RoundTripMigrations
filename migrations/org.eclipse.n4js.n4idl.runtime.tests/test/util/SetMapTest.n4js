/*
 * Copyright (c) 2018 Luca Beurer-Kellner
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Luca Beurer-Kellner - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {SetMap} from "org/eclipse/n4js/n4idl/util/SetMap";
export public class SetMapTest {
	/**
	 * Tests {@link SetMap} with regard to inserting single and multiple keys
	 * and checking for their values (#get) and existence (#has).
	 */
	@Test
	public test1toManySetAndGet() {
		const m = new SetMap<any, any>();
		
		// use primitive value as key
		const k1 = 1;
		// use function as key
		const k2 = function f() {};
		// use object as key
		const k3 = {obj: "object"};
		
		// unused key
		const unused = {unusedKey: true};
		
		m.set([k1], "value k1");
		m.set([k2], "value k2");
		m.set([k3], "value k3");
		
		m.set([k1,k1], "value k1, k1");
		m.set([k1,k2], "value k1, k2");
		m.set([k1,k3], "value k1, k3");
		
		m.set([k2,k1], "value k2, k1");
		m.set([k2,k2], "value k2, k2");
		m.set([k2,k3], "value k2, k3");
		
		m.set([k3,k1], "value k3, k1");
		m.set([k3,k2], "value k3, k2");
		m.set([k3,k3], "value k3, k3");
		
		Assert.equal(m.get([k1]), "value k1", "value of k1.");
		Assert.equal(m.get([k2]), "value k2", "value of k2.");
		Assert.equal(m.get([k3]), "value k3", "value of k3.");
		
		Assert.equal(m.get([k1,k1]), "value k1, k1", "value of k1, k1");
		Assert.equal(m.get([k1,k2]), "value k1, k2", "value of k1, k2");
		Assert.equal(m.get([k1,k3]), "value k1, k3", "value of k1, k3");
		
		Assert.equal(m.get([k2,k1]), "value k2, k1", "value of k2, k1");
		Assert.equal(m.get([k2,k2]), "value k2, k2", "value of k2, k2");
		Assert.equal(m.get([k2,k3]), "value k2, k3", "value of k2, k3");
		
		Assert.equal(m.get([k3,k1]), "value k3, k1", "value of k3, k1");
		Assert.equal(m.get([k3,k2]), "value k3, k2", "value of k3, k2");
		Assert.equal(m.get([k3,k3]), "value k3, k3", "value of k3, k3");
		
		Assert.isTrue(m.has([k3,k1]), "m has value for k3,k1");
		Assert.isTrue(m.has([k1,k1]), "m has value for k1,k1");
		Assert.isFalse(m.has([k1, k1, k1]), "m has no value for k1, k1, k1");
		Assert.isFalse(m.has([unused]), "m has no value for unused");
		Assert.isFalse(m.has([k3, unused]), "m has no value for k3, unused");
		Assert.isFalse(m.has([k3, k1, unused]), "m has no value for k3, k1, unused");
	}
	
	@Test
	public testOverrideEntry() {
		const m = new SetMap<any, any>();
		
		// use primitive value as key
		const k1 = 1;
		// use function as key
		const k2 = function f() {};
		// use object as key
		const k3 = {obj: "object"};
		
		// set initial value 1
		m.set([k1], 1);
		Assert.isTrue(m.has([k1]), "m has value for k1");
		Assert.equal(m.get([k1]), 1, "m has value 1 for k1");
		
		// override k1
		m.set([k1], 2);
		Assert.equal(m.get([k1]), 2, "m has overridden value 2 for k1");
		Assert.isTrue(m.has([k1]), "m has value for k1");
		
		// set initial value 42
		m.set([k1, k2, k3], 42);
		Assert.isTrue(m.has([k1, k2, k3]), "m has value for k1, k2, k3");
		Assert.equal(m.get([k1, k2, k3]), 42, "m has value 1 for k1, k2, k3");
		
		// override k1, k2, k3
		m.set([k1, k2, k3], 43);
		Assert.equal(m.get([k1, k2, k3]), 43, "m has overridden value for k1, k2, k3");
		Assert.isTrue(m.has([k1, k2, k3]), "m has value for k1, k2, k3");
	}
	
	@Test
	public testNullAndUndefined() {
		const m = new SetMap<any, any>();
		
		// use primitive value as key
		const k1 = 1;
		
		// set null value
		m.set([k1], null);
		Assert.isFalse(m.has([k1]), "m has no (null) value for k1");
		Assert.equal(m.get([k1]), null, "m returns null/falsy value for k1");
		
		// set undefined value
		m.set([k1], undefined);
		Assert.isFalse(m.has([k1]), "m has no (undefined) value for k1");
		Assert.equal(m.get([k1]), null, "m returns null/falsy value for k1");
		
		// set actual value
		m.set([k1], 1);
		Assert.isTrue(m.has([k1]), "m has value for k1");
		Assert.equal(m.get([k1]), 1, "m returns correct value for k1");
		
		// override value with null (delete it)
		m.set([k1], null);
		Assert.isFalse(m.has([k1]), "m has no value for k1");
	}
	
	// test set null and undefined values
}
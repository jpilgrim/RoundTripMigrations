import {DirtyStateProxy} from "org/eclipse/n4js/n4idl/controller/DirtyStateProxy";
import {MigrationControllerImpl} from "org/eclipse/n4js/n4idl/controller/MigrationController";

/**
 * A reference implementation of a {@link MigrationContext}.  
 */
export public class MigrationContextImpl implements MigrationContext {
	
	/** 
	 * Creates a new {@link MigrationContextImpl} based on the execution data
	 * to be found in the given {@code controller}.
	 * 
	 * Creates a new empty context, if {@code controller} is omitted.
	 */
	public static newContext(controller : MigrationControllerImpl=) : MigrationContextImpl {
		const reversed = new MigrationContextImpl();
		
		if (controller) {
			for (let [keys, value] of controller.recordedLinks) {
				const results = findTraceableOutputs(value);
				
				for (let result of results) {
					reversed._links.set(result, keys);
				}
			}
		}
		
		return reversed;
	}
	
	// Set of trace links from the source model instances of this context
	// to their previous revisions
	private _links = new Map<Object, Array<?>>();
	
	// user data storage
	private userData = new Map<string, any>();
	
	@Override
	public getTrace(arg : Object) : [?] {
		// remove potential DirtyStateProxy around the given arguments
		const unwrapped = DirtyStateProxy.unwrap(arg)
		return this._links.get(unwrapped) || [];
	}
	
	@Override
	public isModified(object : Object, property : string = undefined) : boolean {
		// use DirtyStateProxy to detect modification to migrated instances
		return DirtyStateProxy.isDirty(object, property);
	}
	
	@Override
	public setUserData(key : string, value : any) {
		this.userData.set(key, value);
	}
	
	@Override
	public getUserData(key : string) : any {
		return this.userData.get(key);
	}
}

/** Returns {@code true} iff all values are equal (as defined by operator '==') */
function allEqual(values : [any]) {
	return new Set<any>(values).size == 1;
}

/**
 * Finds traceable keys in the given migration output.
 * 
 * In case of N4Types this method returns just {@code value}.
 * 
 * For plain-objects it considers {@code value} to be the output
 * of a migration with multiple target types. Thus it returns a list
 * of all values of the top-level key-value pairs of the given 
 * plain-object instance. 
 */
function findTraceableOutputs(value : Object) : [Object] {
	if (N4Type.of(value) != null) {
		return [value];
	} else {
		
		const values = Object.keys(value)
			.map(k => value[k])
			.filter(v => typeof v === 'object') as [Object];
		return values;
	}
}
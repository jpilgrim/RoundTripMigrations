import {N4IDLClassifier} from "org/eclipse/n4js/n4idl/model/N4IDLClassifier";

/**
 * An iterator which iterates over all super classifiers of a 
 * given base constructor.
 * 
 * The iterator always begins with the base constructor itself.
 * 
 * This iterator traverses the class hierarchy in a breadth-first fashion.
 */
export public class SuperClassifierIterator implements Iterator<SuperClassifierIteratorEntry> {
	
	/** Creates a super-classifier iterable for the given constructor instance. */
	public static for(constructorObject : type{? extends Object}) : Iterable<SuperClassifierIteratorEntry> {
		return {
			[Symbol.iterator]: () => new SuperClassifierIterator(constructorObject) 
		};
	}
	
	private queue = new Array<SuperClassifierIteratorEntry>();
	
	constructor(constructorObject : type{? extends Object}) {
		this.queue.push({ctor: constructorObject, level: 0});
	}
	
	@Override
	public next() : IteratorEntry<SuperClassifierIteratorEntry> {
		if (this.queue.length == 0) {
			return {done: true};
		}
		
		const next = this.queue.shift();
		
		// add super-classifiers of next to the traversal queue.
		this.getSuperClassifiers(next.ctor)
			.filter(c => null != c) // enqueue all non-null super classifiers
			.forEach(c => this.queue.push({ctor: c, level: next.level + 1}));
		
		return {done: false, value: next};
	}
	
	getSuperClassifiers(constructorObject : Object) : [type{Object}] {
		const n4Type = N4Type.of(constructorObject);
		
		if (!n4Type) {
			// If the constructor is not of an N4Type, return its
			// prototype since it is its only super classifier that we know of
			// at runtime.
			return [constructorObject.__proto__ as type{Object}];
		}
		
		if (n4Type.isInterface) {
			// If the constructor is an N4 interface, return the implemented interfaces
			// of the interface.
			return this.getSuperInterfaces(constructorObject as type{N4Object})
		}

		if (n4Type.isClass) {
			// If the constructor is an N4 class, return the implemented interfaces
			// of the class and its super class.
			return spread([constructorObject.__proto__ as type{Object}], 
				this.getSuperInterfaces(constructorObject as type{N4Object}))
		}
		
		throw new SuperClassifierIteratorException("Cannot obtain super classifiers of unknown object: " + constructorObject);
	}
	
	/** 
	 * Returns the super-interface of the given interface constructor.
	 */
	private getSuperInterfaces(ctor : type{N4Object}) : [type{Object}] {
		const n4idlClassifier = N4IDLClassifier.of(ctor);
		return n4idlClassifier != null ? n4idlClassifier.implementedInterfaces : [] as [type{Object}]
	}
}

export public class ~SuperClassifierIteratorEntry {
	/** The constructor of the super classifier. */
	public ctor : type{? extends Object}
	/** 
	 * The level on which the super classifier resides on relative to 
	 * the traversal root (base constructor).
	 */
	public level : int
}

/** 
 * Custom exception that is thrown when the classifier hierarchy 
 * traversal fails in a {@link SuperClassifierIterator}. 
 */
export public class SuperClassifierIteratorException extends Error {
	constructor(message : string) {
		super(message);
	}
}

/**
 * Spreads all given arrays into a single array.
 */
function <T> spread(...arrays : Array<T>) : [T] { 
	let merged : [T] = [];
	arrays.forEach(array => {
		array.forEach(e => merged.push(e));
	});
	return merged; 
}

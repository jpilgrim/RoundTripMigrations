/**
 * A {@link Proxy} handler which allows to detect changes to an
 * object since the lastÂ {@link #snapshot}.
 * 
 * The dirty state is entered for any 'set'-operation. This includes
 * overriding the value of a field with the same value (cf. touch the object).
 */
export public class DirtyStateProxy<T extends Object> {
	/** Identifier symbol to detect instances of {@link DirtyStateAwareProxy}s. */
	private static IDENTIFIER : symbol = Symbol("DirtyStateAwareProxy");

	private static proxyIdCounter = 0;

	// proxy id to keep track of difference proxy instances
	private id : int

	// target object of this proxy
	private target : T
	
	// Maintain a map of proxies in the object graph of {@code target}
	// This allows to maintain equality between proxied objects in the object graph.
	private proxyPool : Map<Object, Object>;
	
	/**
	 * Returns a (transparently) proxied {@link DirtyStateAwareProxy}
	 * for the given target object.
	 * 
	 * This automatically creates an implicit initial {@link #snapshot}.
	 */
	public static <T extends Object> forObject(target : T, proxyPool = new Map<Object, Object>()) : T {
		// do not proxy null/undef targets
		if (!target) {
			return target;
		}
		
		const handler = new DirtyStateProxy<T>(target, proxyPool);
		const proxiedObject : Object = new Proxy<T>(target, handler as ProxyHandler<T>);
		
		// register proxy with target in the pool
		handler.proxyPool.set(target, proxiedObject);
		
		return proxiedObject as T;
	}
	
	/**
	 * Unwraps the given proxy. That is returns a reference to the 
	 * original proxy target.
	 * 
	 * Modifications to that raw reference will not be detected by 
	 * this {@link DirtyStateProxy}.
	 */
	public static <T> unwrap(proxiedObject : T) : T {
		// only handle non-null object values
		if (typeof proxiedObject !== 'object' || proxiedObject == null) {
			return proxiedObject;
		}
		const proxy = DirtyStateProxy.getProxy(proxiedObject as Object);
		if (proxy) {
			return proxy.target as T;
		} else {
			return proxiedObject;
		}
	}
	
	/** 
	 * Creates a new snapshot of the given (proxied) 
	 * object instance. That is, the current dirty state 
	 * is declared to be the new base state.
	 * 
	 * @param object The object take a snapshot of
	 * @param recursionGuard An optional recursion guard against traversal cycles.
	 */
	public static snapshot(object : Object, recursionGuard = new Set<Object>()) {
		const proxy = DirtyStateProxy.getProxy(object);
		if (proxy) {
			// clear dirty fields set
			proxy.dirtyFields.clear();
			
			// mark object as visited
			recursionGuard.add(object);
			
			// invoke snapshots on all enumerable fields of object
			DirtyStateProxy.getEnumerableFields(object)
				.filter(v => !recursionGuard.has(v)) // guard against cycles
				.forEach(s => DirtyStateProxy.snapshot(s, recursionGuard))
		} else {
			throw new Error("DirtyStateProxy: Cannot create snapshot of non-proxied object " + object);
		}
	}
	
	/** 
	 * Returns {@code true} if the given property on the given object can be considered
	 * dirty (changed since the last snapshot).
	 * 
	 * Returns always {@code true} if the given object is not proxied by a {@link DirtyStateProxy}
	 * 
	 * @param object The object to check for being dirty (changed since snapshot).
	 * @param property The property to check on object (if undef/null, all properties are checked)
	 * @param recursionGuard A recursion guard set, to prevent cycles 
	 */
	public static <T extends Object> isDirty(object : T, 
		property : union{string,symbol}=,
		recursionGuard = new Set<Object>()) : boolean {
		const proxy = DirtyStateProxy.getProxy(object);
		
		if (!property) {
			// if no proxy can be found, we assume an (untracked) dirty state
			if (!proxy) {
				return true;
			}
			// if object has already been checked
			if (recursionGuard.has(object)) {
				return false;
			}
			// mark object as visited
			recursionGuard.add(object);
			
			// if object is dirty
			if (proxy.dirtyFields.size > 0) {
				return true;
			}
			
			// check all enumerable fields of object
			const objectFields = DirtyStateProxy.getEnumerableFields(object)
				.filter(v => !recursionGuard.has(v)); // guard against cycles 
			
			// check all non-visited references for being dirty
			for (let o of objectFields) {
				if (DirtyStateProxy.isDirty(o, null, recursionGuard)) { return true; }
			}
		}
		
		if (proxy) {
			// first check for changes on the level of this proxy
			if (proxy.dirtyFields.has(property)) {
				return true;
			}
			// then follow nested-proxy and recursively check for changes
			const value = Reflect.get(object, property, this);
			// only follow for object-values
			if (typeof value !== 'object') { return false; }
			
			return DirtyStateProxy.isDirty(value as Object, null, recursionGuard);
		} else {
			return true;
		}
	}
	
	/**
	 * Returns the {@link DirtyStateProxy} instance wrapping around the 
	 * object.
	 * 
	 * Returns {@code undefined} if the given object is not proxied by
	 * a {@link DirtyStateProxy}.
	 */
	private static <T extends Object> getProxy(object : T) : DirtyStateProxy<T> {
		if (object === null) {
			return undefined;
		}
		const proxy = object[DirtyStateProxy.IDENTIFIER];
		
		if (proxy instanceof DirtyStateProxy) {
			return proxy as DirtyStateProxy<T>;
		} else {
			return undefined;
		}
	}
	
	private static getEnumerableFields(object : Object) : [Object|Array<?>] {
		// traverse all enumerable object properties
		return Object.keys(object) // obtain object-keys
			.map(k => object[k]) // obtain corresponding values
			// filter for enumerable-values
			.filter(v => typeof v === 'object' || typeof v === 'array' ) as [Object|Array<?>] 
	}
	
	/** Set of fields of the proxied object that are considered dirts (changed since the last snapshot). */
	private dirtyFields = new Set<union{string, symbol}>(); 
	
	/**
	 * Setter trap which keeps track of all fields that are set/changed in this instance.
	 */
	public set = (object : T, property : union{string, symbol}, 
		value : any, receiver : Object) : boolean => {
		
		this.dirtyFields.add(property as string);
		// actually set field
		Reflect.set(object, property, value);
		return true;
	}
	
	/**
	 * Getter trap which re-directs all property accesses but the ones
	 * for symbol {@link DirtyStateProxy.IDENTIFIER} which returns the proxy handler instance (this). 
	 */
	public get = (object : T, property : union{string, symbol}, receiver : Object) => {
	    if (property === DirtyStateProxy.IDENTIFIER) {
			return this;
		} else {
			const result = Reflect.get(object, property, receiver);
			
			// only handle object and arrays here
			if (typeof result !== 'object' && typeof result !== 'array') {
				return result;
			} else { 
				// For property accesses that yield objects,
				// make sure the returned value is proxied as well
				const proxy = DirtyStateProxy.getProxy(result as Object);
				if (proxy) {
					return result;
				} else {
					const newProxy = this.getOrCreateProxy(result as Object);
//					// replace value on object with created proxy
//					Reflect.set(object, property, newProxy);
					return newProxy;
				}
			}
		}
	}
	
	/** Instantiates a new {@link DirtyStateProxy} with the given target. */
	private constructor(target : T, proxyPool : Map<Object, Object>) {
		this.target = target;
		this.proxyPool = proxyPool;
		
		this.id = DirtyStateProxy.proxyIdCounter++;
	}
	
	/** 
	 * Gets the proxy instance for the given value from the current {@code this.proxyPool}.
	 * 
	 * Creates a new {@link DirtyStateProxy}, if there already exists a proxied instance 
	 * of {@code value} in the current pool. 
	 */
	private <ProxiedT extends Object> getOrCreateProxy(value : ProxiedT) : ProxiedT {
		// check for an existing proxy of {@code value}
		const existingProxy : Object = this.proxyPool.get(value);
		if (existingProxy) {
			return existingProxy as ProxiedT;
		} else {
			// otherwise create a new one, remember it and pass on our current proxyPool
			const proxy = DirtyStateProxy.forObject(value, this.proxyPool);
			this.proxyPool.set(value, proxy);
			return proxy;
		}
	}
}
import {InstanceAssert} from "com/enfore/n4js/n4idl/assert/InstanceAssert";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {MigrationContextImpl} from "org/eclipse/n4js/n4idl/context/MigrationContextImpl";
import {MigrationControllerImpl} from "org/eclipse/n4js/n4idl/controller/MigrationController";

/** 
 * Tests for {@link MigrationContext}.
 */
@VersionAware
export public class MulitpleArgumentMigrationTest {
	static initialiseOriginal() : Composite#1 {
		let c1 = new Composite#1();
		c1.b1 = new Sub#1();
		c1.b1.value = 1;
		c1.b1.deletedField = "recoverMe";
		
		c1.b2 = new Sub#1();
		c1.b2.value = 2;
		c1.b2.deletedField = "recoverMe2";
		
		return c1;
	}
	
	@Test
	testMultipleArgumentMigration() {
		const c1 = MulitpleArgumentMigrationTest.initialiseOriginal();
		const controller = MigrationControllerImpl.forTargetVersion(2);
		let c2 = controller.migrateWith(migrateComposite, [c1]) as Composite#2;
		
		Assert.equal(c2.allB.value1, 1);
		Assert.equal(c2.allB.value2, 2);
		
		// obtain reverse-context for c1
		let reverseContext : MigrationContextImpl = MigrationContextImpl.newContext(controller);
		
		const c2Trace = Array.from(reverseContext.getTrace(c2));
		
		InstanceAssert.equalSerialisation(c2Trace[0] as Object, c1, "c2 has a trace link to c1.")
		// make sure there is a top-level trace link from c2 to c1
		Assert.strictEqual(c2Trace[0], c1, "c2 has a trace link to c1.");
		
		// make sure there is trace link from c1.b1 to c2.allB
		Assert.strictEqual(
			Array.from(reverseContext.getTrace(c2.allB))[0],
			c1.b1, "c2.allB has trace link to c1.b1."
		)
		// make sure there is trace link from c1.b2 to c2.allB
		Assert.strictEqual(
			Array.from(reverseContext.getTrace(c2.allB))[1], 
			c1.b2, "c2.allB has trace link to c1.b2."
		);
		
		// finally round-trip migrate c2
		const reverseController = MigrationControllerImpl.forTargetVersion(1, reverseContext);
		let roundTripComposite = reverseController.migrate([c2]) as Composite#1;
		
		Assert.equal(roundTripComposite.b1.deletedField, "recoverMe", "'c.b1.deleteField' has been recovered.");
		Assert.equal(roundTripComposite.b1.value, 1, "'c.b1.value' was retained while round-trip migrating.");
		
		Assert.equal(roundTripComposite.b2.deletedField, "recoverMe2", "'c.b2.deleteField' has been recovered.");
		Assert.equal(roundTripComposite.b2.value, 2, "'c.b2.value' was retained while round-trip migrating.");
	}
}

///** 
// * {@link RoundTripMigration} class that allows to debug this test visually.
// */
//@VersionAware
//export public class MultipleArgumentRoundTripMigration extends FunctionContextRoundTripTest<Composite#1, Composite#2> {
//	@Override
//	public instantiateOriginal() : Composite#1 {
//		return MulitpleArgumentMigrationTest.initialiseOriginal();
//	}
//}

class Composite#1 {
	b1 : Sub
	b2 : Sub
}

class Composite#2 {
	allB : Sub
}

class Sub#1 {
	value : int
	deletedField : string
}

class Sub#2 {
	value1 : int
	value2 : int
}

@Migration
function migrateComposite(o1 : Composite#1) : Composite#2 {
	let o2 = new Composite#2();
	
	o2.allB = migrate(o1.b1, o1.b2);
	
	return o2;
}

@Migration
function migrateTwoSub(b1 : Sub#1, b2 : Sub#1) : Sub#2 {
	let s2 = new Sub#2();
	
	s2.value1 = b1.value;
	s2.value2 = b2.value;
	
	return s2;
}

@Migration
function migrateBackTwoSub(source: Sub#2) : ~Object with {b1 : Sub#1, b2 : Sub#1} {
	
	// convenience pseudo-initialization in case of missing trace links (TODO generate this)
	
	const {b1, b2} = (()Â => {
		const previousRevision  = context.getTrace(source) || [];
		
		if (previousRevision.length == 0) {
			return {b1: {}, b2: {}};
		} else {
			return {b1: previousRevision[0] as Sub#1, b2: previousRevision[1] as Sub#1, };
		}
	})() as ~Object with {b1: Sub#1, b2: Sub#1};
	
	let s1 = new Sub#1();
	s1.value = source.value1;
	s1.deletedField = b1.deletedField || "defaultDeleted1";
	
	let s2 = new Sub#1();
	s2.value = source.value2;
	s2.deletedField = b2.deletedField || "defaultDeleted2";
	
	return {b1 : s1, b2: s2};
}

@Migration
function migrateBackComposite(o2 : Composite#2) : Composite#1 {
	let o1 = new Composite#1();
	
	let {b1, b2} = migrate(o2.allB);
	o1.b1 = b1;
	o1.b2 = b2;
	
	return o1; 
}
import {InstanceAssert} from "com/enfore/n4js/n4idl/assert/InstanceAssert";
import {LoggingMigrationController} from "migrations/LoggingMigrationContext";
import {A} from "migrations/TestModel";
import {Sub} from "migrations/TestModel";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {MigrationContextImpl} from "org/eclipse/n4js/n4idl/context/MigrationContextImpl";

/** 
 * Simple test class which ensure the resolution of migrations works 
 * as intended for simple migration declarations and their execution using 
 * a {@link MigrationContext}.
 */
@VersionAware
export public class MigrationResolverSystemTest {
	private static initializeA() : A#1 {
		let a1 = new A#1();
		a1.field1 = "testValue";
		
		a1.sub1 = new Sub#1();
		a1.sub1.value = "subValue1";
		
		a1.sub2 = new Sub#1();
		a1.sub2.value = "subValue2";
		
		return a1;
	}
	
	@Test
	public testSimpleMigrationResolution() {
		const a1 = MigrationResolverSystemTest.initializeA();
		const controller = new LoggingMigrationController(2);
		
		const a2 = controller.migrate([a1]);
		
		InstanceAssert.equalSerialisation(a2, 
			{
				field2 : "testValue",
				combined: {
					value1: "subValue1",
					value2: "subValue2"
				}
			}, "Migrated instance looks as expected")
	}
		@Test
	public testMigrationRegistry() {
		const a1 = MigrationResolverSystemTest.initializeA();
		
		InstanceAssert.equalSerialisation(a1, {
			field1: "testValue",
			sub1: {value: "subValue1"},
			sub2: {value: "subValue2"}
		}, "The initial instance is populated correctly");
		
		const controller = new LoggingMigrationController(2);
		const a2 : A#2 = controller.migrate([a1]) as A#2;
		
		InstanceAssert.equalSerialisation(a2, {
			field2: "testValue",
			combined: {value1: "subValue1", value2: "subValue2"}
		}, "The migrated instance was migrated correctly");
		
		// round-trip migrate a2 back to A#1
		const backController = new LoggingMigrationController(1, 
			MigrationContextImpl.newContext(controller));
		const rtA1 = backController.migrate([a2]);
		
		InstanceAssert.equalSerialisation(rtA1, {
			field1: "testValue",
			sub1: {value: "subValue1"},
			sub2: {value: "subValue2"}
		}, "The round-trip instance has the expected values and fields.");

		Assert.equal(controller.log.map(m => m.name).join(", "),
			[// migrate A#1 -> A#2
			 "migrateA1To2", 
			 "migrate2Sub1toCombined"].join(", "),
			 "The executed migrations of from version 1 to 2 are executed in the correct order."
		);
		
		Assert.equal(backController.log.map(m => m.name).join(", "), 
			[// migrate back A#2 -> A#1
			 "migrateA2To1", 
			 "migrateCombinedto2Sub1"].join(", "),
			 "The executed migrations are executed in the correct order.");
	}
}

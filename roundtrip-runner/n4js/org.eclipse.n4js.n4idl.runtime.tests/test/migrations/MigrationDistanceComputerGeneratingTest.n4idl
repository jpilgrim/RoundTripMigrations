import {DistanceProband} from "migrations/MigrationDistanceTestHelpers";
import {combinations} from "migrations/MigrationDistanceTestHelpers";
import {d} from "migrations/MigrationDistanceTestHelpers";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {TypeTypeRef} from "org/eclipse/n4js/n4idl/model/N4IDLMigratable";
import {Iterables} from "org/eclipse/n4js/n4idl/util/Iterables";

class A#1 implements I {}
class B#1 extends A implements I {}
class C#1 extends B {}

interface I#1 {}

/**
 * A test class which generates all potential migration signatures 
 * and argument types and computes corresponding migration distance values.
 */
@VersionAware
export public class MigrationDistanceComputerGeneratingTest {
	
	/**
	 * In this test case all possible combinations of (4) argument types (selection of A, B, or C) and
	 * parameter types are generated and invariants are enforced on the corresponding distance results.
	 */
	@Test
	public testDistanceOrder() {
		const typeCombinations : [[constructor{N4Object}]] = 
			combinations([[A#1, B#1, C#1], [A#1, B#1, C#1], [A#1, B#1, C#1], [A#1, B#1, C#1]])
		const argumentCombinations : [[any]] = typeCombinations.map(comb => comb.map(ctor => new ctor()));
		const argumentParameterPairs = combinations([argumentCombinations as [any], typeCombinations as [any]]);
		
		// compute distance for each pair of argument and parameter types
		const pair = argumentParameterPairs
			.map((e) : DistanceProband => { 
				return DistanceProband.new(
					e[1] as [type{N4Object} | TypeTypeRef<Object> |string], // parameterTypes 
					d(e[0] as [any], e[1] as [any]), // distance
					e[0] as [any] // argument values 
				);
			});
		
		// sort resulting pairs by distance
		const sortedProbands = pair.sort((c1, c2) => c1.distance - c2.distance);
		
		// helper function to determine speciality (height in the hierarchy) of A, B or C
		const specialityScore = (type : type{N4Object}) : number => {
			if (type == A#1) {
				return 1;
			} else if (type == B#1) {
				return 2
			} else if (type == C#1) {
				return 3;
			}
			throw "Unhandled type in generality score computation " + type
		}
	
		// enforce invariants on all pairs and the computed distances
		for (let i=0; i<sortedProbands.length; i++) {
			const current = sortedProbands[i];
			
			const args = current.arguments;
			
			const argumentTypes : [type{N4Object}] = args.map(v => (v as Object).constructor as constructor{N4Object})
			const parameterTypes: [type{N4Object}] = current.parameterTypes as [type{N4Object}];
			
			const argumentScore = argumentTypes.map(t => specialityScore(t)).reduce((a,b) => a + b) as number;
			const parameterScore = parameterTypes.map(t => specialityScore(t)).reduce((a,b) => a + b) as number;
			
			if (current.distance < Infinity) {
				// assert that the argument types are always more specific than the parameter types
				Assert.isTrue(argumentScore >= parameterScore, 
				`Invalid match for ${current.toString()}: ${argumentScore} vs ${parameterScore}`)
			} else { // distance is Infinity
				// assert that at least one argument type is more generic than the corresponding parameter type
				const argumentsMoreGenericThanParameters = Iterables.wrap(Iterables.align(argumentTypes, parameterTypes))
					.map((pair) : [number] => [specialityScore(pair[0]), specialityScore(pair[1])])
					.filter(pair => pair[0] < pair[1])
					.empty
				
				Assert.isFalse(argumentsMoreGenericThanParameters, 
					`Invalid distance result for ${current.toString()}: ${argumentScore} vs ${parameterScore}`)
			}
		}
	}
	
	/**
	 * In this test case all possible variations of migration signatures with
	 * 4 parameters (of type A, B or C) are generated and matched against fixed
	 * argument types.
	 */
	@Test
	public testMigrationOrder() {
		const availableMigrationSignatures : [[type{N4Object}]] = combinations([[A#1, B#1, C#1], [A#1, B#1, C#1], [A#1, B#1, C#1]]);
		
		{
			// find matching migrations for args (A#1, A#1, A#1)
			const args : [any] = [new A#1(), new A#1(), new A#1()];
			const candidates : [DistanceProband] = availableMigrationSignatures
				.map((m : [type{N4Object}]) : DistanceProband => DistanceProband.new(m, d(args, m), args))
				.sort(DistanceProband.sortByDistance);
				
			const first = candidates.shift();
			Assert.equal(first.distance, 0, "First proband matches perfectly.")
			candidates.forEach(c => Assert.equal(c.distance, Infinity, "Proband must not match: " + c.toString()));
		}
		
		{
			// find matching migrations for args (B#1, C#1, A#1)
			const args : [any] = [new B#1(), new C#1(), new A#1()];
			const candidates : [DistanceProband] = availableMigrationSignatures
				.map((m) : DistanceProband => DistanceProband.new(m, d(args, m), args))
				.sort(DistanceProband.sortByDistance);
				
			const matching = candidates.filter(c => c.distance != Infinity);
			const matchingExpectation = 
				["B$1, C$1, A$1 -> B$1, C$1, A$1 (d=0)",
				 "B$1, C$1, A$1 -> B$1, B$1, A$1 (d=1)",
				 "B$1, C$1, A$1 -> A$1, C$1, A$1 (d=1)",
				 "B$1, C$1, A$1 -> A$1, B$1, A$1 (d=2)",
				 "B$1, C$1, A$1 -> B$1, A$1, A$1 (d=2)",
				 "B$1, C$1, A$1 -> A$1, A$1, A$1 (d=3)"];
			Assert.equal(matching.map(m => m.toString()), matchingExpectation.join(","), "Matching candidates for arguments (B#1, C#1, A#1) match expectations.");
			
			// assert that remaining candidates do not match
			candidates.slice(matchingExpectation.length)
				.forEach(c => Assert.equal(c.distance, Infinity, "Proband must not match: " + c.toString()));
		}
		
		{
			// find matching migrations for args (B#1, C#1, A#1)
			const args : [any] = [new A#1(), new C#1(), new C#1()];
			const candidates : [DistanceProband] = availableMigrationSignatures
				.map((m) : DistanceProband => DistanceProband.new(m, d(args, m), args))
				.sort(DistanceProband.sortByDistance);
				
			const matching = candidates.filter(c => c.distance != Infinity);
			
			const matchingExpectation = 
				["A$1, C$1, C$1 -> A$1, C$1, C$1 (d=0)", 
				 "A$1, C$1, C$1 -> A$1, C$1, B$1 (d=1)",
				 "A$1, C$1, C$1 -> A$1, B$1, C$1 (d=1)", 
				 "A$1, C$1, C$1 -> A$1, C$1, A$1 (d=2)",
				 "A$1, C$1, C$1 -> A$1, B$1, B$1 (d=2)", 
				 "A$1, C$1, C$1 -> A$1, A$1, C$1 (d=2)",
				 "A$1, C$1, C$1 -> A$1, B$1, A$1 (d=3)", 
				 "A$1, C$1, C$1 -> A$1, A$1, B$1 (d=3)",
				 "A$1, C$1, C$1 -> A$1, A$1, A$1 (d=4)"];
			
			Assert.equal(matching.map(m => m.toString()), matchingExpectation.join(","), "Matching candidates for arguments (B#1, C#1, A#1) match expectations.");
			
			// assert that remaining candidates do not match
			candidates.slice(matchingExpectation.length)
				.forEach(c => Assert.equal(c.distance, Infinity, "Proband must not match: " + c.toString()));
		}
		
	}
}

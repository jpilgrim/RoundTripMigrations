import {assertMigrationFails} from "migrations/MigrationResolverTestHelpers";
import {assertMigrationSucceeds} from "migrations/MigrationResolverTestHelpers";
import {MalformedMigrationArgumentsException} from "org/eclipse/n4js/n4idl/controller/MigrationRuntimeException";
import {NoSuchMigrationException} from "org/eclipse/n4js/n4idl/controller/MigrationRuntimeException";
class A#1 {}
class B#1 extends A {}
class C#1 extends B {}

class NonMigratable#1 {}

@Migration function mA(a : A#1) : A#2 { return null; }

/** 
 * This tests ensures that the {@link MigrationResolver} handles common
 * invalid arguments values (such as null and undefined) gracefully (exceptions). 
 */
@VersionAware
export public class MigrationResolverInvalidArgumentTypesTest {
	@Test
	public testInvalidMigrationArguments() {
		assertMigrationSucceeds(2, [new A#1()]);
		assertMigrationSucceeds(2, [new B#1()]);
		assertMigrationSucceeds(2, [new C#1()]);
		
		assertMigrationFails(2, [null], MalformedMigrationArgumentsException);
		assertMigrationFails(2, [undefined], MalformedMigrationArgumentsException);
		assertMigrationFails(2, [12], NoSuchMigrationException);

		assertMigrationFails(2, [new A#1(), null], MalformedMigrationArgumentsException);
		assertMigrationFails(2, [new A#1(), null, new A#1()], MalformedMigrationArgumentsException);
		assertMigrationFails(2, [new A#1(), new A#1()]);
		
		assertMigrationFails(3, [new A#1(), new A#1()], NoSuchMigrationException);
		assertMigrationFails(3, [new A#1(), null], MalformedMigrationArgumentsException);
		assertMigrationFails(10, [new A#1(), null], MalformedMigrationArgumentsException);
		
	}
}
import {assertAmbiguousWith} from "migrations/MigrationResolverTestHelpers";
import {assertMigrationFails} from "migrations/MigrationResolverTestHelpers";
import {assertMigrationSucceeds} from "migrations/MigrationResolverTestHelpers";
import {findAllMigrations} from "migrations/MigrationResolverTestHelpers";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {MigrationUtils} from "org/eclipse/n4js/n4idl/resolution/MigrationUtils";

class A#1 {}

class B#1 extends A {}
class C#1 extends B {}

class OA#1 {}
class OB#1 extends OA {}
class OC#1 extends OB {}

class Unrelated#1 {}

@Migration function m_A_OB(a : A#1, oa : OB#1) : A#2 { return null }
@Migration function m_B_OA(a : B#1, oa : OA#1) : A#2 { return null }

@Migration function mPrimitiveInt(a : A#1, b : int) : A#2 { return null }
@Migration function mPrimitiveBoolean(a : A#1, b : boolean) : A#2 { return null }
@Migration function mPrimitiveString(a : A#1, b : string) : A#2 { return null }

@VersionAware
export public class MigrationConflictTest {
	@Test
	public testAllMigrations() {
		const targetVersion = 2;
		const args : [any] = [new B#1(), new OB#1()];
		
		const allMigrations_B_OB = findAllMigrations(targetVersion, args);
		
		// find all migrations
		Assert.equal(MigrationUtils.candidateDescriptions(allMigrations_B_OB),[
				"m_B_OA (B$1, OA$1)",
				"m_A_OB (A$1, OB$1)"
			].join(",\n"));
		
		
	}
	
	@Test
	public testAmbiguousCandidates() {
		assertAmbiguousWith(2, [new B#1(), new OB#1()], [m_B_OA, m_A_OB]);
		assertAmbiguousWith(2, [new C#1(), new OB#1()], [m_B_OA, m_A_OB]);
		assertAmbiguousWith(2, [new C#1(), new OC#1()], [m_B_OA, m_A_OB]);
		
		assertMigrationSucceeds(2, [new A#1(), new OC#1()]);
	}
	
	/** Assures that migration which only differ in the primitive type
	 * of one parameter, can be distniguished. */
	@Test
	public testMigrationConflictPrimitives() {
		const targetVersion = 2;
		const args : [any] = [new B#1(), 1];
		
		// assert that only mPrimitiveInt is deemed a compatible migration for args
		const allMigrations_B_OB = findAllMigrations(targetVersion, args);
		Assert.equal(MigrationUtils.candidateDescriptions(allMigrations_B_OB),"mPrimitiveInt (A$1, primitive)");
		
		// make sure the migrate call is unambiguous
		assertMigrationSucceeds(targetVersion, args);
		assertMigrationSucceeds(targetVersion, [new B#1(), ""]);
	}
	
	@Test
	public testNoMigrationExists() {
		assertMigrationFails(2, [new A#1()]);
		assertMigrationFails(2, [new B#1()]);
		// invalid target version
		assertMigrationFails(3, [new B#1()]);
		
		assertMigrationFails(2, [new A#1(), new A#1()]);
		assertMigrationFails(2, [new A#1(), new OA#1()]);
	}
}
import {d} from "migrations/MigrationDistanceTestHelpers";
import {migrationArguments} from "migrations/MigrationDistanceTestHelpers";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

class A#1 implements I {}
class B#1 extends A implements I {}
class C#1 extends B {}

interface I#1 {}

/**
 * Unit-test wrt {@link MigrationDistanceComputer}.
 */
@VersionAware
export public class MigrationDistanceComputerTest {
	@Test
	public testComputeMigrationArguments() {
		// this is more thoroughly tested in MigrationArgumentTypeTest
		Assert.equal(
			migrationArguments([A#1, A#2, "primitive"]).map(a => a.type.toString()).join(","),
			["INSTANCE", "INSTANCE", "PRIMITIVE"].join(","));
		Assert.equal(
			migrationArguments([A#1]).map(a => a.type.toString()).join(","),
			["INSTANCE"].join(","));
	}
	
	@Test
	public testBasicInstanceMigrationDistance() {
		assertMigrationDistance(d(args("new A#1()"), types("A#1")), 0, "A#1 -> A#1");
		assertMigrationDistance(d(args("new B#1()"), types("A#1")), 1, "B#1 -> A#1");
		assertMigrationDistance(d(args("new C#1()"), types("A#1")), 2, "C#1 -> A#1");
		
		assertMigrationDistance(d(args("new A#1()"), types("I#1")), 1, "A#1 -> I#1");
		assertMigrationDistance(d(args("new B#1()"), types("I#1")), 1, "B#1 -> I#1");
		assertMigrationDistance(d(args("new C#1()"), types("I#1")), 2, "C#1 -> I#1");
		
		assertMigrationDistance(d(args("new A#1()"), types("C#1")), MAX_DISTANCE, "A#1 -> C#1");
		assertMigrationDistance(d(args("new A#1()"), types("B#1")), MAX_DISTANCE, "A#1 -> B#1");
		assertMigrationDistance(d(args("new B#1()"), types("C#1")), MAX_DISTANCE, "B#1 -> C#1");
		
		// two parameters
		
		assertMigrationDistance(d(args("new A#1()", "new A#1()"), types("A#1", "A#1")), 0, "A#1, A#1 -> A#1, A#1");
		assertMigrationDistance(d(args("new A#1()", "new B#1()"), types("A#1", "A#1")), 1, "A#1, B#1 -> A#1, A#1");
		assertMigrationDistance(d(args("new B#1()", "new B#1()"), types("A#1", "A#1")), 2, "B#1, B#1 -> A#1, A#1");
		assertMigrationDistance(d(args("new C#1()", "new A#1()"), types("A#1", "A#1")), 2, "C#1, A#1 -> A#1, A#1");
		assertMigrationDistance(d(args("new A#1()", "new C#1()"), types("A#1", "A#1")), 2, "A#1, C#1 -> A#1, A#1");
		assertMigrationDistance(d(args("new B#1()", "new C#1()"), types("A#1", "A#1")), 3, "B#1, C#1 -> A#1, A#1");
		assertMigrationDistance(d(args("new C#1()", "new C#1()"), types("A#1", "A#1")), 4, "C#1, C#1 -> A#1, A#1");
		
		assertMigrationDistance(d(args("new A#1()", "new A#1()"), types("B#1", "A#1")), MAX_DISTANCE, "A#1, A#1 -> B#1, A#1");
		assertMigrationDistance(d(args("new A#1()", "new A#1()"), types("B#1", "B#1")), MAX_DISTANCE, "A#1, A#1 -> B#1, B#1");
		assertMigrationDistance(d(args("new A#1()", "new A#1()"), types("C#1", "A#1")), MAX_DISTANCE, "A#1, A#1 -> C#1, B#1");
		assertMigrationDistance(d(args("new A#1()", "new A#1()"), types("C#1", "B#1")), MAX_DISTANCE, "A#1, A#1 -> C#1, B#1");
		assertMigrationDistance(d(args("new A#1()", "new A#1()"), types("C#1", "C#1")), MAX_DISTANCE, "A#1, A#1 -> C#1, C#1");
		
		assertMigrationDistance(d(args("new B#1()", "new A#1()"), types("C#1", "A#1")), MAX_DISTANCE, "B#1, A#1 -> C#1, A#1");
		assertMigrationDistance(d(args("new B#1()", "new A#1()"), types("C#1", "B#1")), MAX_DISTANCE, "B#1, A#1 -> C#1, B#1");
		assertMigrationDistance(d(args("new B#1()", "new B#1()"), types("C#1", "B#1")), MAX_DISTANCE, "B#1, B#1 -> C#1, B#1");
		assertMigrationDistance(d(args("new B#1()", "new C#1()"), types("C#1", "C#1")), MAX_DISTANCE, "B#1, C#1 -> C#1, C#1");
		assertMigrationDistance(d(args("new A#1()", "new C#1()"), types("C#1", "C#1")), MAX_DISTANCE, "A#1, C#1 -> C#1, C#1");
		
		// three parameters
		
		assertMigrationDistance(d(args("new A#1()", "new A#1()", "new A#1()"), types("A#1", "A#1", "A#1")), 0, "A#1, A#1, A#1 -> A#1, A#1, A#1");
		assertMigrationDistance(d(args("new A#1()", "new B#1()", "new A#1()"), types("A#1", "A#1", "A#1")), 1, "A#1, B#1, A#1 -> A#1, A#1, A#1");
		assertMigrationDistance(d(args("new A#1()", "new B#1()", "new B#1()"), types("A#1", "A#1", "A#1")), 2, "A#1, B#1, B#1 -> A#1, A#1, A#1");
		assertMigrationDistance(d(args("new B#1()", "new B#1()", "new B#1()"), types("A#1", "A#1", "A#1")), 3, "B#1, B#1, B#1 -> A#1, A#1, A#1");
	}
	
	@Test
	public testPrimitiveParameterTypes() {
		// all primitive values have a distance of 0 to the corresponding 'primitive' type description
		assertMigrationDistance(d(args("1"), types("int")), 0, "1 -> int");
		assertMigrationDistance(d(args("'str'"), types("string")), 0, "'str' -> string");
		assertMigrationDistance(d(args("true"), types("boolean")), 0, "true -> boolean");
		
		// non-primitive values have a distance of MAX_DISTANCE
		
		assertMigrationDistance(d(args("new A#1()"), types("int")), MAX_DISTANCE, "new A#1() -> int");
		assertMigrationDistance(d(args("new B#1()"), types("boolean")), MAX_DISTANCE, "new B#1() -> boolean");
		assertMigrationDistance(d(args("new C#1()"), types("string")), MAX_DISTANCE, "new C#1() -> string");
		
		// primitive argument values have a distance of MAX_DISTANCE to non-primitive parameter types
		assertMigrationDistance(d(args("1"), types("A#1")), MAX_DISTANCE, "1 -> A#1");
		assertMigrationDistance(d(args("'str'"), types("A#1")), MAX_DISTANCE, "'str' -> A#1");
		assertMigrationDistance(d(args("true"), types("A#1")), MAX_DISTANCE, "true -> A#1");
	}
	
	@Test
	public testPrimitiveAndInstanceParameterTypes() {
		// mix-in primitive arguments and parameter types
		assertMigrationDistance(d(args("new A#1()", "2", "new A#1()"), types("A#1", "int", "A#1")), 0, "A#1, 1, A#1 -> A#1, primitive, A#1");
		assertMigrationDistance(d(args("new A#1()", "'a'", "new A#1()"), types("A#1", "string", "A#1")), 0, "A#1, 'a', A#1 -> A#1, primitive, A#1");
		assertMigrationDistance(d(args("new A#1()", "true", "new A#1()"), types("A#1", "boolean", "A#1")), 0, "A#1, true, A#1 -> A#1, primitive, A#1");
		
		assertMigrationDistance(d(args("new B#1()", "2", "new C#1()"), types("A#1", "int", "A#1")), 3, "B#1, 1, C#1 -> A#1, primitive, A#1");
		assertMigrationDistance(d(args("new B#1()", "'a'", "new B#1()"), types("A#1", "string", "A#1")), 2, "B#1, 'a', B#1 -> A#1, primitive, A#1");
		assertMigrationDistance(d(args("new C#1()", "true", "new C#1()"), types("A#1", "boolean", "A#1")), 4, "C#1, true, C#1 -> A#1, primitive, A#1");
		
		// non-matching migration signatures with primitives (parameters and/or arguments)
		assertMigrationDistance(d(args("new B#1()", "1"), types("C#1", "int")), MAX_DISTANCE, "B#1, 1 -> C#1, primitive");
		assertMigrationDistance(d(args("new B#1()", "1"), types("C#1", "int")), MAX_DISTANCE, "B#1, 1 -> C#1, primitive");
		assertMigrationDistance(d(args("new B#1()", "true"), types("C#1", "B#1")), MAX_DISTANCE, "B#1, true -> C#1, B#1");
		assertMigrationDistance(d(args("new B#1()", "'a'"), types("C#1", "string")), MAX_DISTANCE, "B#1, 'a' -> C#1, primitive");
		assertMigrationDistance(d(args("new A#1()", "'a'"), types("C#1", "string")), MAX_DISTANCE, "A#1, 'a' -> C#1, primitive");
	}
}

function assertMigrationDistance(actualDistance : int, expectedDistance: int, message : string) {
	Assert.equal(actualDistance, expectedDistance, message);
}

export public const MAX_DISTANCE = Infinity; 

function args(...params : string) : Array<any> {
	return params.map(p => eval(p.replace(new RegExp("#", "g"), "$")));
}

function types(...typeDescriptions : string) : [any] {
	return typeDescriptions.map(d => toType(d));
}
function toType(description : string) : any {
	if (description == "int" 
		|| description == "boolean" 
		|| description == "number"
		|| description == "string"
	) {
		return "primitive";
	} else {
		return eval(description.replace(new RegExp("#", "g"), "$"));
	}
}
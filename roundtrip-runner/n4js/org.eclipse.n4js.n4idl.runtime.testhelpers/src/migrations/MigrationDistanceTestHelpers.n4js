import {TypeTypeRef} from "org/eclipse/n4js/n4idl/model/N4IDLMigratable";
import {MigrationCandidate} from "org/eclipse/n4js/n4idl/model/N4IDLMigratable";
import {N4TypeUtils} from "org/eclipse/n4js/n4idl/model/N4TypeUtils";
import {MigrationArgumentTypeDescription} from "org/eclipse/n4js/n4idl/resolution/MigrationArgumentType";
import {MigrationDistanceComputer} from "org/eclipse/n4js/n4idl/resolution/MigrationDistanceComputer";
import {Iterables} from "org/eclipse/n4js/n4idl/util/Iterables";

/**
 * A {@link DistanceProband} encapsulates information on a migration signature, 
 * argument values and the corresponding migration distance.
 */
export public class DistanceProband {
	/**
	 * Convenience static factory method for {@link DistanceProband} instances.
	 */
	public static new(
		parameterTypes : [type{N4Object}] | Array<type{N4Object} | TypeTypeRef<Object> | string>,
		distance : number,
		args : [any] = []
	) : DistanceProband {
		const c = new DistanceProband();
		c.arguments = args;
		c.parameterTypes = parameterTypes;
		c.distance = distance;
		return c;
	}
	
	/**
	 * Sort function which sorts probands by migration distance.
	 */
	public static sortByDistance = function(c1 : DistanceProband, c2 : DistanceProband) : number {
		return c1.distance - c2.distance;
	}
	
	public arguments : [any] 
	public parameterTypes : [type{N4Object}] | Array<type{N4Object} | TypeTypeRef<Object> | string>
	public distance : number
	
	@Override
	public toString() : string {
		return `${N4TypeUtils.typesToString(this.arguments)} -> ${N4TypeUtils.typesToString(this.parameterTypes as [any])} (d=${this.distance})` 
	}
}

/**
 * Returns all combinations that can be formed by choosing one element from 
 * each of the given element {@code sets}.
 */
export public function <T> combinations(sets : [[T]]) : [[T]] {
	if (sets.length == 1) {
		return sets[0].map(e => [e]);
	} else {
		const first = sets.shift();
		// recursively generate combinations that can be formed by the remaining sets (minus first)
		const remainingCombinations = combinations(sets);
		// for each remaining combinations, create new combination with each of the current set elements
		const newCombinations : [[[T]]]= remainingCombinations
			.map(comb => first.map(e => Iterables.wrap([e]).concat([comb]).toArray()))
		return Iterables.wrap(Iterables.concat(newCombinations)).toArray();
	}
}

/**
 * Computes the migration distance between the given arguments and parameter type info (meta-representation as
 * in generated code).
 * 
 * Convenience test method for {@link MigrationDistanceComputer#compute}.
 */
export public function d(
	values : [any], 
	parameterTypeInfo : [any] | [type{N4Object}]) : number {
	const computer = new MigrationDistanceComputer();
	const argTypes = computer.computeArgumentTypes(values);
	
	// synthesize test candidate
	const candidate = makeCandidate(parameterTypeInfo as  [type{N4Object} | TypeTypeRef<Object> | string]);
	
	return computer.compute(argTypes, candidate);
}

/**
 * Synthesizes a dummy {@link MigrationCandidate} with the
 * given value for {@code parameterTypes}.
 */
export public function makeCandidate(parameterTypes : [type{N4Object}] | [type{N4Object}|string] | Array<type{N4Object} | TypeTypeRef<Object> | string>) : MigrationCandidate {
	return {
		migration: () => console.log("dummy migration"),
		parameterTypes : parameterTypes as Array<type{N4Object} | TypeTypeRef<Object> | string>
	};
}

/**
 * 
 */
export public function migrationArguments(parameterTypes : Array<type{N4Object} | TypeTypeRef<Object> | string>) : [MigrationArgumentTypeDescription] {
	return new MigrationDistanceComputer().computeMigrationArgumentTypes(
		makeCandidate(parameterTypes));
}

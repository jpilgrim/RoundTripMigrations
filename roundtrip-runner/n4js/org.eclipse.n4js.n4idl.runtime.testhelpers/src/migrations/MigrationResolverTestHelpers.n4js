import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {AssertionError} from "org/eclipse/n4js/mangelhaft/assert/AssertionError";
import {AmbiguousMigrationCallException} from "org/eclipse/n4js/n4idl/controller/MigrationRuntimeException";
import {MigrationRuntimeException} from "org/eclipse/n4js/n4idl/controller/MigrationRuntimeException";
import {NoSuchMigrationException} from "org/eclipse/n4js/n4idl/controller/MigrationRuntimeException";
import {MigrationCandidate} from "org/eclipse/n4js/n4idl/model/N4IDLMigratable";
import {N4TypeUtils} from "org/eclipse/n4js/n4idl/model/N4TypeUtils";
import {MigrationResolver} from "org/eclipse/n4js/n4idl/resolution/MigrationResolver";
import {MigrationControllerImpl} from "org/eclipse/n4js/n4idl/controller/MigrationController";

/**
 * Asserts that a migration of the given list of migration arguments fails
 * with {@link NoSuchMigrationException} (no migration is declared that matches
 * the given list of migration arguments).
 * 
 * @param targetVersion The migration target version
 * @param args The list of migration arguments
 * @param migrationRuntimeException The expected {@link MigrationRuntimeException}. 
 * 	Expects {@link NoSuchMigrationException} by default. 
 */
export public function assertMigrationFails(targetVersion : int, args : [any], 
	migrationRuntimeException : type{MigrationRuntimeException} = NoSuchMigrationException) : void {
	
	try {
		const m : Function+ = findMigration(targetVersion, args);
		
		// check whether the result is expected to be null
		if (migrationRuntimeException == null || migrationRuntimeException == NoSuchMigrationException) {
			if (m != null) {
				// if the execution gets to this point, no exception has been thrown
				Assert.fail(`The migration resolution of (${N4TypeUtils.typesToString(args)}) did not` +
					`fail and returned migration ${m} instead`)
			} else {
				// otherwise the expectations were fulfilled
				return;
			}
		}
		
		// if the execution gets to this point, no exception has been thrown and some migration has been found
		Assert.fail(`The migration of (${N4TypeUtils.typesToString(args)}) did not` +
			`fail with a ${N4Type.of(migrationRuntimeException).name} as expected.`)
	} catch (e) {
		if (typeof e === 'object' && migrationRuntimeException != (e as Object).constructor) {
			const actualException = e;
			const expectedExceptionType = migrationRuntimeException != null ?  N4Type.of(migrationRuntimeException).name : "<null>";
			
			Assert.fail(`The migration of (${N4TypeUtils.typesToString(args)}) failed with a ` + 
				`${actualException} instead of a ${expectedExceptionType}:\n ${e}`)
			
		}
	}
		
	
}

/**
 * Asserts that the given list of migration arguments can successfully (e.g. there is 
 * only one migration that fits the given arguments best == unambiguously, the migration
 * arguments are well-formed) be migrated to the given target version.
 * 
 * @param targetVersion The migration target version
 * @param args The list of migration arguments
 */
export public function assertMigrationSucceeds(targetVersion : int, args : [any]) : void {
	try {
		findMigration(targetVersion, args);
	} catch (e) {
		Assert.fail("Migration resolution raised an exception: " + e);
	}
}

/**
 * Asserts that the given list of arguments can not unambiguously be migrated
 * to the given target version.
 * 
 * @param targetVersion The version to migrate to
 * @param args The migration arguments
 * @param migrations The expected list of ambiguous/conflicting migrations (function references)
 */
export public function assertAmbiguousWith(targetVersion : int, args : [any], migrations : [Function]) : void {
	// attempt to find best-matching migration (should throw ambiguous migration call exception)
	try {
		findMigration(targetVersion, args);
		// if the execution gets past this point, no exception was thrown
		Assert.fail(`Ambiguous migration call (${N4TypeUtils.typesToString(args)}) did not raise an ambiguous call exception`)
	} catch (e) {
		if (e instanceof AssertionError) {
			throw e;
		}
		if (!(e instanceof AmbiguousMigrationCallException)) {
			Assert.fail(`Ambiguous migration call (${N4TypeUtils.typesToString(args)}) did not raise the expected`
				+ " type of exception. Instead the exception was " + e);
		}
		const ambException = e as AmbiguousMigrationCallException;
		const ambiguousMigrations = ambException.candidates.map((c : MigrationCandidate) => c.migration);

		Assert.equal(ambiguousMigrations.length, migrations.length, "The number of ambiguous migration candidates does not match expectation.");
		
		for (let i=0; i<migrations.length; i++) {
			const m = ambiguousMigrations[i];
			Assert.equal(m, migrations[i], "ambiguous migration at index " + i + " does not match expectation");
		}
	}
}

/**
 * Instantiates a new {@link MigrationResolver} for the given target version
 * and resolves the migration which is applicable to the given arguments.
 */
export public function findMigration(targetVersion : int, args : [?]) : Function {
	const resolver = new MigrationResolver(targetVersion);
	const controller = new MigrationControllerImpl(resolver);
	
	// Attempt a migration of the given arguments.
	// In case of a failure this may throw an appropriate migration runtime exception
	controller.migrate(args);
	
	// if successful, return migration the resolver resolves to 
	return resolver.getMigration(args);
}

/**
 * Instantiates a new {@link MigrationResolver} for the given target version
 * and returns all migrations that are applicable to the given arguments.
 */
export public function findAllMigrations(targetVersion : int, args : [any]) : [MigrationCandidate] {
	const r = new MigrationResolver(targetVersion);
	return Array.from(r.findAllMigrations(args));
}
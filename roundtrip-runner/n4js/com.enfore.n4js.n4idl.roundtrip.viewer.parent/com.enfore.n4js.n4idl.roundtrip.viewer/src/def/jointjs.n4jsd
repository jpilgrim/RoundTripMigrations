import {JQueryElement} from "jquery";

export external public class UMLComposition extends Cell {
	constructor(initialiser : ~Object with {
		source: ~Object with {id : string},
		target: ~Object with {id : string},
		attrs: ~Object+
	});
	
	public label(index : int, attr : Object+)
}

export external public class UML {
	public static Composition : constructor{UMLComposition};	
}

export external public class ElementInitialiser {
	public position: ~Position;
    public size: ~Size;
    public attrs?: ~Object+;	
}

export external public class Size {
	public width : int
	public height  : int
}

export external public class BoundingBox extends Size {
	public get x() : int
	public get y() : int
	
	public corner() : Position
}

export external public class Observable {
	public on(event : string, callback : (arg1 : any+, arg2 : any+, arg3 : any+) => void, 
		thisval : Object = undefined);
	
	public trigger(event : string)
}

export external public class Graph extends Observable {
	public getBBox() : BoundingBox
	public getCells() : [Cell]
	
	public getCell(id : string) : Cell?
	
	public addCell(cell : Cell);
}

export external public class Element extends Cell {
	public get id() : string
	
	public size() : Size
	public position(x : int = undefined, y : int = undefined) : Position
	public getBBox() : BoundingBox

	public scale(sx : number, sy : number)
	public resize(width : int, height : int)
}

export external public class Paper extends Observable {
	public scale(sxOrScale : number = undefined, sy : number = undefined) 
		: ~Object with {sx: number, sy: number};
		
	public setDimensions(width : int, height : int)
	
	public el : HTMLElement
	public $el : JQueryElement
}

export external public class Position {
	public x : int
	public y : int
}

export external public class CellView {
	public getBBox(options : ~Object with {useModelGeometry?: boolean} = {}) : BoundingBox
}

export external public class Cell extends Observable {
	public findView(paper : Paper) : CellView
	public setEmbeddedPosition(x : int, y : int) : void
	
	public embed(element : Cell);
	public getEmbeddedCells() : [Cell];
	public toBack();
	
	public attr(objectOrKey: union{string, Object}, value : string = undefined);
	
	public get attributes() : ~Object with {type : string}
	
	public get(key : string) : any
	public set(keyOrObject : union{Object, string}, value : any = undefined)
}

export external public class Shapes {
	public static uml : type{UML}
}

export external public class DirectedGraphLayout {
	public static layout(cells : [Cell], options : Object+)
}

export external public class LinkInitialiser {
	public source : ~Element
	public target : ~Element
	public attrs : ~Object
	public smooth? : boolean
	
	public labels? : [~Object with {position? : number, attrs: ~Object}]
}

export external public class Link extends Cell {
	constructor(initialiser : ~LinkInitialiser)
}

export external public class Dia {
	public static Link : constructor{Link};
	public static Graph : constructor{Graph};
	public static Paper : constructor{Paper};
	
	public static Element : constructor{Element};
	public static Cell : constructor{Cell};
}

export external public class Layout {
	public static DirectedGraph : type{DirectedGraphLayout};
}

export external public class Util {
	 public static <T1, T2, T3, T4> defaultsDeep(arg1 : T1, arg2 : T2, arg3 : T3 = undefined, arg4 : T4 = undefined) : T1&T2&T3&T4
	 
	 @Override
	 public static <T1 extends Object, T2 extends Object, T3 extends Object, T4 extends Object> 
	 	assign(arg1 : T1, arg2 : T2 = undefined, arg3 : T3 = undefined, arg4 : T4 = undefined, ...remainder : Object) 
	 	: T1&T2&T3&T4&Object
}
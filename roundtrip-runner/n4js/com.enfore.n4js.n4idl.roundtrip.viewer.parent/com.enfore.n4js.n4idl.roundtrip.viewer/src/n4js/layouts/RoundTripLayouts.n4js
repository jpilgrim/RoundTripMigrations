import {Element} from "jointjs";

/** A layout for a round-trip {@link Viewer}. */
export public interface ViewerLayout {
	layout(elements : [? extends Element]);
}

/**
 * Layouts the given cells with a RoundTrip layout
 * without modification of the migrated instance.
 *
 * S1 -->
 *        S2
 * S3 <--
 *
 * @param {Array<Cell>} cells
 * @param {RoundTripLayout options} options
 */
export public class RoundTripWithoutModificationLayout extends RoundTripLayout {
	public constructor(options : RoundTripLayoutOptions = {}) {
		super(RoundTripLayoutOptions.override({
			slots: [
				{x: 0, y: 0, width: 1, height: 1},
				{x: 1, y: 0, width: 1, height: 2},
				{x: 0, y: 1, width: 1, height: 1}
			]
		}, options));
	}
	
	@Override
	public layout(elements : [? extends Element]) {
		super.layout(elements);
	}
}

/**
 * Layouts the given cells with a stack layout that 
 * stacks one round-trip stage after the other.
 *
 * S1 --> S2 --> S3 --> S4 --> S5
 *
 * @param {Array<Cell>} cells
 * @param {RoundTripLayout options} options
 */
export public class RoundTripStackLayout extends RoundTripLayout {
	public constructor(options : RoundTripLayoutOptions = {}) {
		super(RoundTripLayoutOptions.override({
			verticalSpacing: 80,
			horizontalSpacing: 100,
			slots: [
				{x: 0, y: 0, width: 1, height: 1},
				{x: 1, y: 0, width: 1, height: 1},
				{x: 2, y: 0, width: 1, height: 1},
				{x: 3, y: 0, width: 1, height: 1},
				{x: 4, y: 0, width: 1, height: 1}
			]
		}, options));
	}
	
	
	@Override
	public layout(elements : [? extends Element]) {
		super.layout(elements);
	}
}

class ~RoundTripLayoutSlot {
	public x: int;
	public y: int;
	public width: int;
	public height: int;
}

class ~RoundTripLayoutOptions {
	public horizontalSpacing? : int = 100
	public verticalSpacing? : int = 100
	public slots? : [~RoundTripLayoutSlot] = []
	
	/**
	 * Overrides the given options with the given
	 * override options.
	 */
	public static override(options : ~RoundTripLayoutOptions, overrides : ~RoundTripLayoutOptions) : ~RoundTripLayoutOptions {
		return Object.assign(options, overrides) as ~RoundTripLayoutOptions;
	}
}

/**
 * Layouts the given cells with a RoundTrip layout
 * with modification of the migrated instance.
 *
 * S1 --> S2
 *        ||
 *        \/
 * S4 <-- S3
 *
 * @param {Array<Cell>} cells
 * @param {RoundTripLayout options} options
 */
export public class RoundTripLayout implements ViewerLayout {
	
	private options : RoundTripLayoutOptions
	
	public constructor(options : RoundTripLayoutOptions = {}) {
		this.options = Object.assign({
			verticalSpacing: 30,
			horizontalSpacing: 60,
			slots: [
				{x: 0, y: 0, width: 1, height: 1},
				{x: 1, y: 0, width: 1, height: 1},
				{x: 1, y: 1, width: 1, height: 1},
				{x: 0, y: 1, width: 1, height: 1}
			]
		}, options) as ~RoundTripLayoutOptions;
	}
	@Override
	public layout(elements : [? extends Element]) {
		let maxWidth = elements.<number, Object>map(s => s.size().width)
			.reduce((a : number,b : number) => Math.max(a,b));
		let maxHeight = elements.<number, Object>map(s => s.size().height)
			.<number>reduce((a : number, b : number) => Math.max(a, b));
	
		// layout cells into grid slot layout
		let slots = (i : int) : RoundTripLayoutSlot => {
			let s = this.options.slots[i];
			return {
				x: s.x * (maxWidth + this.options.horizontalSpacing),
				y: s.y * (maxHeight + this.options.verticalSpacing),
				width: s.width * maxWidth,
				height: s.height * maxHeight
			};
		};
		
		for (let i=0; i<elements.length; i++) {
			let cell = elements[i];
			let slot = slots(i)
	
			let marginLeft = (slot.width - cell.size().width)/2.0
			let marginTop = (slot.height - cell.size().height)/2.0
			
			cell.setEmbeddedPosition(slot.x + marginLeft, slot.y + marginTop);
		}
	}
}

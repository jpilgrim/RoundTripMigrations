import {targetVersionFor} from "com/enfore/n4js/n4idl/context/RoundTripTestUtils";
import {AbstractRoundTripTest} from "com/enfore/n4js/n4idl/roundtrip/AbstractRoundTripTest";
import {MigrationContextImpl} from "org/eclipse/n4js/n4idl/context/MigrationContextImpl";
import {MigrationControllerImpl} from "org/eclipse/n4js/n4idl/controller/MigrationController";

/**
 * A subclass of {@link AbstractRoundTripTest<T1, T2>} that is aware
 * of a {@link MigrationContext} during the execution of migrations.
 */
@VersionAware
export abstract class ContextAwareRoundTripTest<T1 extends N4Object, T2 extends N4Object> 
	extends AbstractRoundTripTest<T1, T2> {
		
	private _migrationController : MigrationControllerImpl
	private _migrateBackController : MigrationControllerImpl
	
	/**
	 * Returns the migration controller for migrating from T1 to T2.
	 * 
	 * Note that this controller may already contain recorded traces in 
	 * case of inverse round-trips. 
	 */
	public migrationController(forObject : N4Object) : MigrationControllerImpl {
		if (typeof this._migrationController === "undefined") {
			// Initialise the migration controller based on the migrate-back controller
			// if present. Otherwise this call will initialise a controller with empty context. 
			this._migrationController = MigrationControllerImpl.forTargetVersion(targetVersionFor(forObject),
				MigrationContextImpl.newContext(this._migrateBackController));
		}
		
		return this._migrationController;
	}
	
	/**
	 * Returns the back-migration context for migrating from T2 to T1.
	 * 
	 * Note that this context may already contain recorded traces in 
	 * case of inverse round-trips. 
	 */
	public migrateBackController(forObject : N4Object) : MigrationControllerImpl {
		if (typeof this._migrateBackController === "undefined") {
			// Initialise the migration context as the inverse of the migrate-back context
			// if present. Otherwise this call will initialise an empty context. 
			this._migrateBackController = MigrationControllerImpl.forTargetVersion(targetVersionFor(forObject),
				MigrationContextImpl.newContext(this._migrationController));
		}
		
		return this._migrateBackController;
	}
	
	/**
	 * In order to provide a migration do not override this (final) method.
	 * 
	 * Please override #migrateWithContext instead.
	 */
	@Override
	@Final
	public migrate(o1 : T1) : T2 {
		return this.migrateWithController(this.migrationController(o1), o1);
	}
	
	/**
	 * In order to provide a back-migration do not override this (final) method.
	 * 
	 * Please override #migrateBackWithContext instead.
	 */
	@Override
	@Final
	public migrateBack(o2 : T2) : T1 {
		return this.migrateBackWithController(this.migrateBackController(o2), o2);
	}
	
	/** 
	 * Migrates the given instance of T1 to an instance of T2
	 * using the given {@link MigrationContext}. 
	 */
	public abstract migrateWithController(controller : MigrationController, args : T1) : T2
	
	/** 
	 * Migrates the given instance of T2 to an instance of T1
	 * using the given {@link MigrationContext}.
	 */
	public abstract migrateBackWithController(controller : MigrationController, args : T2) : T1 
}

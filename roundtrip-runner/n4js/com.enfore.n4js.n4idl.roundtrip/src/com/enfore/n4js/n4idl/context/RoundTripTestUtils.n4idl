
import {N4TypeUtils} from "org/eclipse/n4js/n4idl/model/N4TypeUtils";

/**
 * Returns the target version of a given value.
 * 
 * For values of version 1 that is 2 and vice-versa.
 */
@VersionAware
export public function targetVersionFor(value : N4Object) : number {
	const valueVersion = getVersion(value);
	if (valueVersion == 1) {
		return 2;
	} else {
		return 1;
	}
}

/**
 * Determines the type version of a given instance by
 * examining the N4Type#name field.
 * 
 * This implementation of retrieving the type version is a 
 * work-around and should be replaced with proper version 
 * reflection access, once available. 
 */
@VersionAware
export public function getVersion(value : N4Object) : number {
	if (null == value) {
		throw "FunctionContextRoundTripTest.getVersion: Cannot determine the version of null value."
	}
	
	const n4Type = N4Type.of(value);
	if (null == n4Type) {
		throw "FunctionContextRoundTripTest.getVersion: Failed to determine the type of value " + N4TypeUtils.typeDescription(value) + "."
	}
	
	const typeName = n4Type.name;
	const separatorIndex = typeName.indexOf("$");
	
	if (separatorIndex == -1) {
		throw "Failed to find N4IDL version separator index in name '" + typeName + "' of " + N4TypeUtils.typeDescription(value) + "."
	}
	
	const versionSegment = typeName.slice(separatorIndex + 1);
	const parsedVersion = parseInt(versionSegment);
	
	
	if (isNaN(parsedVersion)) {
		throw "Failed to find N4IDL version from version segment '" + versionSegment + "' of " + N4TypeUtils.typeDescription(value) + "."
	}
	
	return parsedVersion;
}

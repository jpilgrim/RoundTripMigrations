/**
 * A {@link Map}-like data structure that allows multiple values to be 
 * associated with a given key.
 * 
 * The values of the map are considered to be sets.
 */
export public class MultiMap<KeyT, ValueT> {
	private internalMap : Map<KeyT, [ValueT]> = new Map<KeyT, [ValueT]>();
	
	/**
	 * Returns the set of values associated with
	 * the given key or {@code undefined} if nothing
	 * has been associated with the given key.
	 */
	public get(key: KeyT) : [ValueT] {
		return this.internalMap.get(key);
	}
	
	/**
	 * Sets a key/value; returns the Map object.
	 * 
	 * @param value A new value (or mulitple values) to associate with the key 
	 * 				in addition to any existing values (value instanceof ValueT). 
	 */
	public set(key: KeyT, value: union{ValueT, Array<ValueT>}): this {
		let existing = this.get(key) || [];
		
		if (Array.isArray(value)) {
			(value as [ValueT]).forEach(v => {
				if (existing.indexOf(v) == -1) {
					existing.push(v)
				}
			});
		} else {
			if (existing.indexOf(value as ValueT) == -1) {
				existing.push(value as ValueT);
			}
		}
		
		this.internalMap.set(key, existing);
		
		return this;
	}
	
	/**
	 * Returns an iterable of all multi-map entries.
	 */
	public entries() : Iterable<Iterable2<KeyT, [ValueT]>> {
		return this.internalMap.entries();
	}
}

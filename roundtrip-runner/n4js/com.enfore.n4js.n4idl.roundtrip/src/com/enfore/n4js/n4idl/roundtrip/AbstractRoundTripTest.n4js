import {RoundTripMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripMigration";
import {AbstractRoundTripExecutor} from "com/enfore/n4js/n4idl/roundtrip/AbstractRoundTripExecutor";

export public abstract class AbstractRoundTripTest<T1 extends N4Object, T2 extends N4Object> 
	implements RoundTripMigration<T1, T2> {

	@Test
	public testRoundTripMigration() {
		let executor = new TestRoundTripExecutor<T1, T2>(this);
		// execute this test as a round-trip migration
		executor.executeRoundTrip(this);
	}
	
	/**
	 * Assert properties of the original instance.
	 */
	public assertOriginalInstance(instance : T1) {
		// assert nothing by default
	}
	
	/**
	 * Assert properties of the migrated instance.
	 */
	public assertMigratedInstance(migrated : T2) {
		// assert nothing by default
	}
	
	/**
	 * Assert properties of the modified migrated instance.
	 */
	public assertModifiedMigratedInstance(modified : T2) {
		// assert nothing by default
	}
	
	/**
	 * Assert properties of the round-trip migrated instance.
	 */
	public assertRoundTripInstance(roundTrip : T1) {
		// assert nothing by default
	}
}

/**
 * Concrete implementation of {@link RoundTripExecutor} that delegates
 * all handlers to the corresponding assert method of an {@link AbstractRoundTripTest}.
 */
class TestRoundTripExecutor<T1 extends N4Object, T2 extends N4Object> 
	extends AbstractRoundTripExecutor<T1, T2> {
	
	private test : AbstractRoundTripTest<T1, T2>
	
	constructor(test : AbstractRoundTripTest<T1, T2>) {
		this.test = test;
	}
	
	@Override
	protected handleOriginalInstance(scenario : RoundTripMigration<T1, T2>, original : T1) {
		this.test.assertOriginalInstance(original);
	}
	
	@Override
	protected handleMigratedInstance(scenario : RoundTripMigration<T1, T2>, migrated : T2) {
		this.test.assertMigratedInstance(migrated);
	}
	
	@Override
	protected handleModifiedMigratedInstance(scenario : RoundTripMigration<T1, T2>, migrated : T2) {
		this.test.assertModifiedMigratedInstance(migrated);
	}
	
	@Override
	protected handleRoundTripInstance(scenario : RoundTripMigration<T1, T2>, roundTrip: T1) {
		this.test.assertRoundTripInstance(roundTrip);
	}
}
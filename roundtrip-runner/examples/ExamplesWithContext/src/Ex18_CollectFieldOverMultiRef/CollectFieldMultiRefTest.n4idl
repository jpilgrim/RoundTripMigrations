import {CollectFieldMultiRef} from "Ex18_CollectFieldOverMultiRef/CollectFieldOverMultiRef";
import {Element} from "Ex18_CollectFieldOverMultiRef/CollectFieldOverMultiRef";
import {SourceClass} from "Ex18_CollectFieldOverMultiRef/CollectFieldOverMultiRef";
import {FunctionContextRoundTripTest} from "com/enfore/n4js/n4idl/context/FunctionContextRoundTripTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";


@VersionAware
export public class CollectFieldMultiRefTest 
	extends FunctionContextRoundTripTest<CollectFieldMultiRef#1, CollectFieldMultiRef#2> {
	
	@Override
	public instantiateOriginal() : CollectFieldMultiRef#1 {
		const cf = new CollectFieldMultiRef#1();

		const sc1 = new SourceClass#1();
		sc1.field = new Element#1();
		sc1.field.value = "value1";
		sc1.uncollectedField = "uncollectedValue1";
		
		const sc2 = new SourceClass#1();
		sc2.field = new Element#1();
		sc2.field.value = "value2";
		sc2.uncollectedField = "uncollectedValue2";
		
		cf.references = [sc1, sc2];
		
		return cf;
	}
	
	@Override
	public assertMigratedInstance(migrated: CollectFieldMultiRef#2) {
		Assert.equal(migrated.fieldValues[0].value, "value1");
		Assert.equal(migrated.fieldValues[1].value, "value2");
		
		Assert.equal(migrated.references[0].uncollectedField, "uncollectedValue1");
		Assert.equal(migrated.references[1].uncollectedField, "uncollectedValue2");
	}
	
	@Override
	public assertRoundTripInstance(roundTrip: CollectFieldMultiRef#1) {
		Assert.deepEqual(this.instantiateOriginal(), roundTrip);
	}
}
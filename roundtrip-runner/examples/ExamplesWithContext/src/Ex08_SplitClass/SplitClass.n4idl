import {copy} from "org/eclipse/n4js/n4idl/migrations/Migrations";

// @section v1
export public class SplitClass#1 {
	public f : Combined
}
export public enum CombinedType#1 { INT, STRING }
export public class Combined#1 {
	public type : CombinedType
	public stringValue? : string
	public intValue? : int
}

// @section v2
export public class SplitClass#2 {
	public f : IntValue
}

export public class IntValue#2 {
	public intValue : int
}

export public class StringValue#2 {
	public stringValue : string
}

// @section migrations
@Migration
function migrate(sc1 : SplitClass#1) : SplitClass#2 {
	const sc2 = new SplitClass#2();
	
	// delegate migration of 'f'
	sc2.f = migrate(sc1.f);
	
	return sc2;
}

@Migration 
function migrateBack(sc2 : SplitClass#2) : SplitClass#1 {
	const sc1 = new SplitClass#1();
	const previousRevision = context.getTrace(sc2)[0] as SplitClass#1;
	
	if (previousRevision && !context.isModified(sc2.f)) {
		sc1.f = copy(Combined#1, previousRevision.f);
	} else {
		// migrate instance of IntValue to Combined by delegation
		sc1.f = migrate(sc2.f);
	}
	return sc1;
}

@Migration
function migrateIntValue(combined : Combined#1) : IntValue#2 {
	const iv = new IntValue#2();
	if (combined.type != CombinedType#1.INT) {
		// choose default value if 'combined' is of wrong type
		iv.intValue = 12;
	} else {
		iv.intValue = combined.intValue;
	}
	return iv;
}

@Migration
function migrateBackIntValue(iv : IntValue#2) : Combined#1 {
	const c = new Combined#1();
	c.type = CombinedType#1.INT;
	c.intValue = iv.intValue;
	return c;
}

// @endsection

@Migration
function migrateBackStringValue(sv : StringValue#2) : Combined#1 {
	const c = new Combined#1();
	c.type = CombinedType#1.STRING;
	c.stringValue = sv.stringValue;
	return c;
}

@VersionAware
function migrateStringValue(combined : Combined#1) : StringValue#2 {
	const sv = new StringValue#2();
	if (combined.type != CombinedType#1.STRING) {
		// choose default value if combined is of wrong type
		sv.stringValue = "default";
	} else {
		sv.stringValue = combined.stringValue;
	}
	return sv;
}
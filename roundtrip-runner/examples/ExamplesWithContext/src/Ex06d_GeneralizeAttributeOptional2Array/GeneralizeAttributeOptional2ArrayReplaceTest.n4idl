import {Element} from "Ex06d_GeneralizeAttributeOptional2Array/GeneralizeAttributeOptional2Array";
import {GeneralizeAttributeOptional2Array} from "Ex06d_GeneralizeAttributeOptional2Array/GeneralizeAttributeOptional2Array";
import {ModificationMappingTest} from "com/enfore/n4js/n4idl/context/ModificationMappingTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * Any modification of the first element of 'field' in #2 is 
 * translated to 'field' in version 1.
 * 
 * All other modifications (to other elements) are not visible in #1. 
 */
@VersionAware
export public class GeneralizeAttributeOptional2ArrayReplaceTest extends 
	ModificationMappingTest<GeneralizeAttributeOptional2Array#1, GeneralizeAttributeOptional2Array#2> {

	@Override
	public instantiateOriginal() : GeneralizeAttributeOptional2Array#1 {
		let o1 = new GeneralizeAttributeOptional2Array#1();
	
		o1.field = new Element#1();
		o1.field.value = "originalValue";
		
		return o1;
	}
	
	@Override
	public modifyMigratedInstance(migrated : GeneralizeAttributeOptional2Array#2) {
		// replace/change value of single element
		migrated.field[0].value = "modified";
		
		// append a new element
		const newElement = new Element#2();
		newElement.value = "newElementValue";
		migrated.field.push(newElement);
	}

	@Override
	public modifyOriginalInstance(original : GeneralizeAttributeOptional2Array#1)Â {
		// only the replacing of the first elements has an effect on #1
		original.field.value = "modified";
	}
	
	@Override
	public assertMigratedInstance(migrated: GeneralizeAttributeOptional2Array#2) {
		Assert.equal(migrated.field.length, 1, "The original 'field' has been migrated to a single-element array.");
		Assert.equal(migrated.field[0].value, "originalValue", "The single element of the migrated 'field' has the original value.");
	}
}

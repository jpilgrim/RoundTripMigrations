import {Element} from "Ex06d_GeneralizeAttributeOptional2Array/GeneralizeAttributeOptional2Array";
import {GeneralizeAttributeOptional2Array} from "Ex06d_GeneralizeAttributeOptional2Array/GeneralizeAttributeOptional2Array";
import {FunctionContextRoundTripTest} from "com/enfore/n4js/n4idl/context/FunctionContextRoundTripTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/** 
 * #1 -> #2 -> #1
 * 
 * A simple RTM without modification. 
 * 
 * The present value of 'field' is preserved throughout the migration. 
 */
@VersionAware
export public class GeneralizeAttributeOptional2ArrayNoModTest extends
	FunctionContextRoundTripTest<GeneralizeAttributeOptional2Array#1, GeneralizeAttributeOptional2Array#2> {
	
	@Override
	public instantiateOriginal() : GeneralizeAttributeOptional2Array#1 {
		const o1 = new GeneralizeAttributeOptional2Array#1();
		
		o1.field = new Element#1()
		o1.field.value = "SomeValue";
		
		return o1;
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : GeneralizeAttributeOptional2Array#1) {
		Assert.isNotUndefined(roundTrip.field, "The value of 'field' of the migrated instance is retained.")
		Assert.equal(roundTrip.field.value, "SomeValue" ,"The value of 'field' of the round-trip instance is the original value.")
	}
	@Override
	public assertMigratedInstance(migrated : GeneralizeAttributeOptional2Array#2) {
		Assert.equal(migrated.field.length, 1, "The value of field 'field' is migrated to a singleton array.")
		Assert.equal(migrated.field[0].value, "SomeValue", "The single array value is the original value.")		
	}
}
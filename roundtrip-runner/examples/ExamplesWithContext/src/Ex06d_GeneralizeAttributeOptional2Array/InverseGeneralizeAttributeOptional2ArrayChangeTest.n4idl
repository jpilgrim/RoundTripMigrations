import {Element} from "Ex06d_GeneralizeAttributeOptional2Array/GeneralizeAttributeOptional2Array";
import {GeneralizeAttributeOptional2Array} from "Ex06d_GeneralizeAttributeOptional2Array/GeneralizeAttributeOptional2Array";
import {ModificationMappingTest} from "com/enfore/n4js/n4idl/context/ModificationMappingTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/** 
 * #2 -> #1 -> #2
 * 
 * The 'field' in #2 is a single-element array which is mapped to 
 * an optional with this single value. In #1 the value is changed 
 * to something else. The round-trip migrated instance is now expected
 * to reflect that change in the first element of 'field'.
 */
@VersionAware
export public class InverseGeneralizeAttributeOptional2ArrayEmptyTest extends 
	ModificationMappingTest<GeneralizeAttributeOptional2Array#2, GeneralizeAttributeOptional2Array#1> {

	@Override
	public instantiateOriginal() : GeneralizeAttributeOptional2Array#2 {
		let o2 = new GeneralizeAttributeOptional2Array#2();
	
		o2.field = [new Element#2()];
		o2.field[0].value = "oldValue"
		
		return o2;
	}
	
	@Override
	public modifyMigratedInstance(migrated : GeneralizeAttributeOptional2Array#1) {
		// change the value of 'field.value'.
		migrated.field.value = "newValue";
	}

	@Override
	public modifyOriginalInstance(original : GeneralizeAttributeOptional2Array#2)Â {
		// change the value of 'field[0].value'
		original.field[0].value = "newValue";
	}
	
	@Override
	public assertMigratedInstance(migrated: GeneralizeAttributeOptional2Array#1) {
		Assert.equal(migrated.field.value, "oldValue", "A single-element array is mapped to a corresponding optional with the single value.")
	}
}
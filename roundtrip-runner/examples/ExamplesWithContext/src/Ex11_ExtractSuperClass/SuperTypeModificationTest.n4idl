import {ExtractSuperClass} from "Ex11_ExtractSuperClass/ExtractSuperClass";
import {SuperClass} from "Ex11_ExtractSuperClass/ExtractSuperClass";
import {ModificationMappingTest} from "com/enfore/n4js/n4idl/context/ModificationMappingTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";


@VersionAware
export public class SuperClassModificationTest 
	extends ModificationMappingTest<SuperClass#2, ExtractSuperClass#1> {
	
	@Override
	public instantiateOriginal() : SuperClass#2 {
		const s = new SuperClass#2();
		s.genericField = "genericValue";
		return s;
	}
	
	@Override 
	public modifyMigratedInstance(migrated: ExtractSuperClass#1) {
		migrated.genericField = "modifiedGeneric";
		migrated.specificField = "modifiedSpecific";
	}
	
	@Override 
	public modifyOriginalInstance(original: SuperClass#2) {
		// not used, see #assertRoundTripInstance
	}
	
	@Override
	public assertMigratedInstance(migrated: ExtractSuperClass#1) {
		Assert.equal(migrated.genericField, "genericValue");
		Assert.equal(migrated.specificField, "defaultValue");
	}
	
	@Override
	public assertRoundTripInstance(roundTrip: SuperClass#2) {
		// instantiate an instance that represents our expectations
		// to the original modified instance
		const originalModified = new ExtractSuperClass#2();
		originalModified.genericField = "modifiedGeneric";
		originalModified.specificField = "modifiedSpecific";
		
		Assert.deepEqual(originalModified, roundTrip);
	}
}
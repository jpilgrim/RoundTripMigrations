import {Element} from "Ex06c_GeneralizeAttributeArray/GeneralizeAttributeArray";
import {GeneralizeAttributeArray} from "Ex06c_GeneralizeAttributeArray/GeneralizeAttributeArray";
import {ModificationMappingTest} from "com/enfore/n4js/n4idl/context/ModificationMappingTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * #1 -> #2 -> #2
 * 
 * In version 2, the first element of 'field' is replaced and another
 * element is appended.
 * 
 * Due to the implementation of the migrations, the result of operations on field[0] in #2
 * are mapped back into #1. All other operations (e.g. appending a new element) are not visible
 * in #1.
 */
@VersionAware
export public class GeneralizeAttributeArrayReplaceTest extends 
	ModificationMappingTest<GeneralizeAttributeArray#1, GeneralizeAttributeArray#2> {

	@Override
	public instantiateOriginal() : GeneralizeAttributeArray#1 {
		let o1 = new GeneralizeAttributeArray#1();
		
		o1.field = new Element#1();
		o1.field.value = "originalValue";
		
		return o1;
	}
	
	@Override
	public modifyMigratedInstance(migrated : GeneralizeAttributeArray#2) {
		// replace the first element
		migrated.field[0] = new Element#2();
		migrated.field[0].value = "insertedElement";
		
		// add another element to the end
		migrated.field.push(new Element#2());
		migrated.field[1].value = "appendedElement";
		
	}

	@Override
	public modifyOriginalInstance(original : GeneralizeAttributeArray#1)Â {
		// Any operation on the first element in #2, should affect the 
		// value of 'field' in #1. Any operation on other elements in #2 are
		// ignored (cf. field[1].value = "appendedElement"). 
		original.field.value = "insertedElement";
	}
	
	@Override
	public assertMigratedInstance(migrated: GeneralizeAttributeArray#2) {
		Assert.equal(migrated.field.length, 1, "The migrated 'field' array has exactly one element.");
		Assert.equal(migrated.field[0].value, "originalValue", "The migrated 'field[0]' has the original value.");
	}
}

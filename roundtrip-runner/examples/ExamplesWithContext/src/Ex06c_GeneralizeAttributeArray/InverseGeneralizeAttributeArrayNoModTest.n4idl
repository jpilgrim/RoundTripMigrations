import {Element} from "Ex06c_GeneralizeAttributeArray/GeneralizeAttributeArray";
import {GeneralizeAttributeArray} from "Ex06c_GeneralizeAttributeArray/GeneralizeAttributeArray";
import {InstanceAssert} from "com/enfore/n4js/n4idl/assert/InstanceAssert";
import {FunctionContextRoundTripTest} from "com/enfore/n4js/n4idl/context/FunctionContextRoundTripTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

@VersionAware
export public class InverseGeneralizeAttributeArrayNoModTest 
	extends FunctionContextRoundTripTest<GeneralizeAttributeArray#2, GeneralizeAttributeArray#1> {
	
	@Override
	public instantiateOriginal() : GeneralizeAttributeArray#2 {
		let o2 = new GeneralizeAttributeArray#2();
	
		const element : (string) => Element#2 = (value) => {
			let e = new Element#2();
			e.value = value;
			return e;
		}
	
		o2.field = [
			element("value1"),
			element("value2"),
		]	
		
		return o2;
	}
	
	@Override
	public assertMigratedInstance(migrated : GeneralizeAttributeArray#1) {
		Assert.equal(migrated.field.value, "value1", "The migrated 'field' has the original value of 'field[0]'.");
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : GeneralizeAttributeArray#2) {
		InstanceAssert.equalSerialisation(roundTrip, this.instantiateOriginal(), "The serialisation of the round-trip" + 
			"instance matches the serialisation of the original instance");
	}
}

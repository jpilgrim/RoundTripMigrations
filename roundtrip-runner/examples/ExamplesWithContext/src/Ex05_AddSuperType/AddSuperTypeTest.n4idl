import {AddSuperType} from "Ex05_AddSuperType/AddSuperType";
import {InstanceAssert} from "com/enfore/n4js/n4idl/assert/InstanceAssert";
import {FunctionContextRoundTripTest} from "com/enfore/n4js/n4idl/context/FunctionContextRoundTripTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

@VersionAware
export public class AddSuperTypeTest extends FunctionContextRoundTripTest<AddSuperType#1, AddSuperType#2> {
	
	@Override
	public instantiateOriginal() : AddSuperType#1 {
		let o1 = new AddSuperType#1();
	
		o1.ownedField = "ownedValue";
		
		return o1;
	}
	
	
	@Override
	public assertMigratedInstance(migrated: AddSuperType#2) {
		Assert.equal(migrated.ownedField, "ownedValue", "'ownedField' of the migrated instance has the original value.");
		Assert.equal(migrated.superField1, "defaultSuperValue1", "'superField1' of the migrated instance was set to a default value.");
		Assert.equal(migrated.superField2, "defaultSuperValue2", "'superField2' of the migrated instance was set to a default value.");
	}
	
	@Override
	public assertRoundTripInstance(roundTrip: AddSuperType#1) {
		InstanceAssert.equalSerialisation(roundTrip, this.instantiateOriginal(), 
			"The serialisation of the round-trip matches the original serialisation.");
	}
}

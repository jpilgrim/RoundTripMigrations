import {CreateDeleteDependentField} from "Ex01b_c_CreateDeleteDependentField/CreateDeleteDependentField";
import {InstanceAssert} from "com/enfore/n4js/n4idl/assert/InstanceAssert";
import {ModifyingFunctionContextRoundTripTest} from "com/enfore/n4js/n4idl/context/ModifyingFunctionContextRoundTripTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

@VersionAware
export public class InverseCreateDeleteDependentFieldTest 
	extends ModifyingFunctionContextRoundTripTest<CreateDeleteDependentField#2, CreateDeleteDependentField#1> {
	
	@Override
	public instantiateOriginal() : CreateDeleteDependentField#2 {
		let o1 = new CreateDeleteDependentField#2();
	
		o1.hereToStay = "hereToStayValue";
		
		return o1;
	}
	
	
	@Override
	public assertRoundTripInstance(roundTrip : CreateDeleteDependentField#2) {
		InstanceAssert.equalSerialisation(roundTrip, this.instantiateOriginal(),
			"The round-trip instance equals the original instance in its serialisation.")
	}
	
	@Override
	public modifyMigratedInstance(migrated : CreateDeleteDependentField#1) {
		migrated.hereToStayTwice = "modified";
	}
	
	@Override
	public assertMigratedInstance(migrated : CreateDeleteDependentField#1) {
		Assert.equal(migrated.hereToStay, "hereToStayValue", "The 'hereToStay' value of the migrated instance has the original value.");
		Assert.equal(migrated.hereToStayTwice, "hereToStayValue hereToStayValue", "The 'hereToStayTwice' value was correctly computed using the original value of 'hereToStay'.");
	}
}

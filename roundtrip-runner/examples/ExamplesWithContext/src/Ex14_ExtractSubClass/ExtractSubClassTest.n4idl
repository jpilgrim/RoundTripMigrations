import {A} from "Ex14_ExtractSubClass/ExtractSubClass";
import {ExtractSubClass} from "Ex14_ExtractSubClass/ExtractSubClass";
import {SubA} from "Ex14_ExtractSubClass/ExtractSubClass";
import {FunctionContextRoundTripTest} from "com/enfore/n4js/n4idl/context/FunctionContextRoundTripTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";


@VersionAware
export public class ExtractSubClassTest 
	extends FunctionContextRoundTripTest<ExtractSubClass#1, ExtractSubClass#2> {
	
	@Override
	public instantiateOriginal() : ExtractSubClass#1 {
		const es = new ExtractSubClass#1();
		es.f1 = new A#1();
		es.f1.genericField = "genericValue1";
		es.f1.specificField = "specificValue1";
		
		return es;
	}
	
	@Override
	public assertMigratedInstance(migrated: ExtractSubClass#2) {
		Assert.equal(migrated.f1.genericField, "genericValue1");
		Assert.isInstanceOf(migrated.f1, SubA#2);
		Assert.equal((migrated.f1 as SubA#2).specificField, "specificValue1");
	}
	
	@Override
	public assertRoundTripInstance(roundTrip: ExtractSubClass#1) {
		Assert.deepEqual(this.instantiateOriginal(), roundTrip);
	}
}
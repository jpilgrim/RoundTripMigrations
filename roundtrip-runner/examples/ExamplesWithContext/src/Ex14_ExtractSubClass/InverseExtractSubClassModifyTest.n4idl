import {A} from "Ex14_ExtractSubClass/ExtractSubClass";
import {ExtractSubClass} from "Ex14_ExtractSubClass/ExtractSubClass";
import {SubA} from "Ex14_ExtractSubClass/ExtractSubClass";
import {ModificationMappingTest} from "com/enfore/n4js/n4idl/context/ModificationMappingTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";


@VersionAware
export public class ExtractSubClassTest 
	extends ModificationMappingTest<ExtractSubClass#2, ExtractSubClass#1> {
	
	@Override
	public instantiateOriginal() : ExtractSubClass#2 {
		const es = new ExtractSubClass#2();
		es.f1 = new A#2();
		es.f1.genericField = "genericValue1";
		
		return es;
	}
	
	@Override
	public assertMigratedInstance(migrated: ExtractSubClass#1) {
		Assert.isInstanceOf(migrated.f1, A#1);
		Assert.equal(migrated.f1.genericField, "genericValue1");
		Assert.equal(migrated.f1.specificField, "defaultValue");
	}
	
	@Override
	public modifyMigratedInstance(migrated : ExtractSubClass#1) {
		migrated.f1.specificField = "modified";
	}
	
	@Override
	public modifyOriginalInstance(original : ExtractSubClass#2) {
		const oldA = original.f1;
		original.f1 = new SubA#2();
		original.f1.genericField = oldA.genericField;
		(original.f1 as SubA#2).specificField = "modified";
	}
}
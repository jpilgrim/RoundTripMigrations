import {ExtractSuperClass} from "Ex11_ExtractSuperClass/ExtractSuperClass";

import {InverseRoundTrip} from "com/enfore/n4js/n4idl/roundtrip/InverseRoundTrip";

import {RoundTripMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripMigration";
import {ExtractSuperClassTest} from "Ex11_ExtractSuperClass/ExtractSuperClassTest"
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * 
 * Inverse ExtractSuperClass.
 * 
 * ExtractSuperClass#2 -> ExtractSuperClass#1 -> ExtractSuperClass#2
 * 
 * Inverse round-trip of {@link ExtractSuperClassTest}.
 */
@VersionAware
export public class InverseExtractSuperClassTest extends InverseRoundTrip<ExtractSuperClass#1, ExtractSuperClass#2> {
	
	@Override
	public getRoundTripMigration() : RoundTripMigration<ExtractSuperClass#1, ExtractSuperClass#2> {
		return new ExtractSuperClassTest();
	}
	
	@Override
	public instantiateOriginal() : ExtractSuperClass#2 {
		return new ExtractSuperClass#2({
			specificField: "specificFieldValue",
			genericField: "genericFieldValue"
		});
	}
	
	@Override
	public assertMigratedInstance(migrated : ExtractSuperClass#1) {
		Assert.equal(migrated.specificField, "specificFieldValue", "The original value of 'specificField' was retained in the migrated instance.");
		Assert.equal(migrated.genericField, "genericFieldValue", "The original value of 'genericField' was retained in the migrated instance.");
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : ExtractSuperClass#2) {
		Assert.equal(roundTrip.specificField, "specificFieldValue", "The original value of 'specificField' was retained in the round-trip instance.");
		Assert.equal(roundTrip.genericField, "genericFieldValue", "The original value of 'genericField' was retained in the round-trip instance.");
	}
}

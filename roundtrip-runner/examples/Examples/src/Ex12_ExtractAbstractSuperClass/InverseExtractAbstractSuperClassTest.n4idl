import {ExtractAbstractSuperClass} from "Ex12_ExtractAbstractSuperClass/ExtractAbstractSuperClass";

import {InverseRoundTrip} from "com/enfore/n4js/n4idl/roundtrip/InverseRoundTrip";

import {RoundTripMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripMigration";
import {ExtractAbstractSuperClassTest} from "Ex12_ExtractAbstractSuperClass/ExtractAbstractSuperClassTest"
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * 
 * Inverse ExtractAbstractSuperClass.
 * 
 * ExtractAbstractSuperClass#2 -> ExtractAbstractSuperClass#1 -> ExtractAbstractSuperClass#2
 * 
 * Inverse round-trip of {@link ExtractAbstractSuperClassTest}.
 */
@VersionAware
export public class InverseExtractAbstractSuperClassTest extends InverseRoundTrip<ExtractAbstractSuperClass#1, ExtractAbstractSuperClass#2> {
	
	@Override
	public getRoundTripMigration() : RoundTripMigration<ExtractAbstractSuperClass#1, ExtractAbstractSuperClass#2> {
		return new ExtractAbstractSuperClassTest();
	}
	
	@Override
	public instantiateOriginal() : ExtractAbstractSuperClass#2 {
		return new ExtractAbstractSuperClass#2({
			specificField: "specificFieldValue",
			genericField: "genericFieldValue"
		});
	}
	
	@Override
	public assertMigratedInstance(migrated : ExtractAbstractSuperClass#1) {
		Assert.equal(migrated.specificField, "specificFieldValue", "The original value of 'specificField' was retained in the migrated instance.");
		Assert.equal(migrated.genericField, "genericFieldValue", "The original value of 'genericField' was retained in the migrated instance.");
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : ExtractAbstractSuperClass#2) {
		Assert.equal(roundTrip.specificField, "specificFieldValue", "The original value of 'specificField' was retained in the round-trip instance.");
		Assert.equal(roundTrip.genericField, "genericFieldValue", "The original value of 'genericField' was retained in the round-trip instance.");
	}
}

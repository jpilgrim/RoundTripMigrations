import {
	CollectFeatureOverRef,
	SourceClass
} from "Ex17_CollectFeatureOverRef/CollectFeatureOverRef";

import {InverseRoundTrip} from "com/enfore/n4js/n4idl/roundtrip/InverseRoundTrip";

import {RoundTripMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripMigration";
import {CollectFeatureOverRefTest} from "Ex17_CollectFeatureOverRef/CollectFeatureOverRefTest"
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * 
 * Inverse CollectFeatureOverRef.
 * 
 * CollectFeatureOverRef#2 -> CollectFeatureOverRef#1 -> CollectFeatureOverRef#2
 * 
 * Inverse round-trip of {@link CollectFeatureOverRefTest}.
 */
@VersionAware
export public class InverseCollectFeatureOverRefTest extends InverseRoundTrip<CollectFeatureOverRef#1, CollectFeatureOverRef#2> {
	
	@Override
	public getRoundTripMigration() : RoundTripMigration<CollectFeatureOverRef#1, CollectFeatureOverRef#2> {
		return new CollectFeatureOverRefTest();
	}
	
	@Override
	public instantiateOriginal() : CollectFeatureOverRef#2 {
		return new CollectFeatureOverRef#2({
			field: "SomeValue",
			reference: new SourceClass#2({
				someOtherField: "someOtherValue"
			})
		});
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : CollectFeatureOverRef#2) {
		Assert.equal(roundTrip.field, "SomeValue", "The value of field 'field' was retained in the round-trip instance.");
		Assert.equal(roundTrip.reference.someOtherField, "someOtherValue", "The value of field 'reference.someOtherField' was retained in the round-trip instance.");
	}
	
	@Override
	public assertMigratedInstance(migrated : CollectFeatureOverRef#1) {
		Assert.equal(migrated.reference.field, "SomeValue", "The value of field 'reference.field' was retained in the migrated instance.");
		Assert.equal(migrated.reference.someOtherField, "someOtherValue", "The value of field 'reference.someOtherValue' was retained in the migrated instance."
		);
	}
}

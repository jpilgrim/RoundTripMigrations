import {CollectFeatureOverRef} from "Ex17_CollectFeatureOverRef/CollectFeatureOverRef";
import {CollectFeatureOverRefTest} from "Ex17_CollectFeatureOverRef/CollectFeatureOverRefTest";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * CollectFeatureOverRef
 * 
 * CollectFeatureOverRef#1 -> CollectFeatureOverRef#2 -> CollectFeatureOverRef#1
 * 
 * Similar to the super-scenario, only that the reference in version 1 to 'SourceClass' is 
 * absent. This results in field 'field' being absent in version 2 as well.
 */
@VersionAware
export public class CollectFeatureOverRefAbsentTest extends CollectFeatureOverRefTest {
	@Override
	public instantiateOriginal() : CollectFeatureOverRef#1 {
		return new CollectFeatureOverRef#1({
			reference: undefined
		});
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : CollectFeatureOverRef#1) {
		Assert.isUndefined(roundTrip.reference, "The round-trip instance has no value set for optional field 'reference'.");	
	}
	
	@Override
	public assertMigratedInstance(migrated : CollectFeatureOverRef#2) {
		Assert.isUndefined(migrated.field, "The optional field 'field' in the migrated instance is absent/undefined.");
		Assert.isUndefined(migrated.reference, "The field 'reference' is not present in the migrated instance.");
	}
}
	
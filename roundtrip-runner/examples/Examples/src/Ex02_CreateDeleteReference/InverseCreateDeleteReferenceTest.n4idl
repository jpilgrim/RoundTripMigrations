import {CreateDeleteReference} from "Ex02_CreateDeleteReference/CreateDeleteReference";

import {InverseRoundTrip} from "com/enfore/n4js/n4idl/roundtrip/InverseRoundTrip";

import {RoundTripMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripMigration";
import {CreateDeleteReferenceTest} from "Ex02_CreateDeleteReference/CreateDeleteReferenceTest"
import {InstanceAssert} from "com/enfore/n4js/n4idl/assert/InstanceAssert";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * 
 * Inverse CreateDeleteReference.
 * 
 * CreateDeleteReference#1 -> CreateDeleteReference#2 -> CreateDeleteReference#1
 * 
 * Inverse round-trip of {@link CreateDeleteReferenceTest}.
 */
@VersionAware
export public class InverseCreateDeleteReferenceTest extends InverseRoundTrip<CreateDeleteReference#2, CreateDeleteReference#1> {
	
	@Override
	public getRoundTripMigration() : RoundTripMigration<CreateDeleteReference#2, CreateDeleteReference#1> {
		return new CreateDeleteReferenceTest();
	}
	
	@Override
	public instantiateOriginal() : CreateDeleteReference#1 {
		return new CreateDeleteReference#1();
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : CreateDeleteReference#1) {
		InstanceAssert.hasOwnPropertyNames(roundTrip, [], "The round-trip instance has no 'own'-properties.")
	}
	
	@Override
	public assertMigratedInstance(migrated : CreateDeleteReference#2) {
		Assert.isUndefined(migrated.field1, "The 'field1' of the migrated instance is undefined.");
	}
}

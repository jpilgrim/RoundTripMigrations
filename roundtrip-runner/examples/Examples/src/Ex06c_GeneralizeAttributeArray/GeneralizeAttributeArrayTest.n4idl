import {AbstractRoundTripTest} from "com/enfore/n4js/n4idl/roundtrip/AbstractRoundTripTest";
import {GeneralizeAttributeArray} from "Ex06c_GeneralizeAttributeArray/GeneralizeAttributeArray";
import {Element} from "Ex06c_GeneralizeAttributeArray/GeneralizeAttributeArray";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * GeneralizeAttributeArray
 * 
 * GeneralizeAttributeArray#1 -> GeneralizeAttributeArray#2 -> GeneralizeAttributeArray#1
 * 
 * The field 'field' of GeneralizeAttributeArray is generalized in terms of its
 * multiplicity. In version 2 it can hold multiple values (array) of type Elements,
 * whereas in version 1 it can only hold one value (simple non-optional field).
 * 
 * To migrate this metamodel change, a new singleton array is created when upgrading,
 * while downgrading dismisses all but the first element of the array. In case of an
 * empty array, the downgrade migration chooses a default value, to prevent an undefined non-optional field.
 */
@VersionAware
export public class GeneralizeAttributeArrayTest extends AbstractRoundTripTest<GeneralizeAttributeArray#1, GeneralizeAttributeArray#2> {
	
	@Override
	public instantiateOriginal() : GeneralizeAttributeArray#1 {
		return new GeneralizeAttributeArray#1({
			field: new Element#1({value: "singleElementValue"})
		});
	}
	
	@Override
	public migrate(o1 : GeneralizeAttributeArray#1) : GeneralizeAttributeArray#2 {
		return new GeneralizeAttributeArray#2({
			field: [o1.field]
		});
	}

	@Override
	public migrateBack(o2 : GeneralizeAttributeArray#2) : GeneralizeAttributeArray#1 {
		return new GeneralizeAttributeArray#1({
			field: o2.field.length > 0 ? o2.field[0] : new Element#1({value: "defaultValue"})
		});
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : GeneralizeAttributeArray#1) {
		Assert.equal(roundTrip.field.value, "singleElementValue", "The value of 'field' of the round-trip instance was retained.");	
	}
	
	@Override
	public assertMigratedInstance(migrated : GeneralizeAttributeArray#2) {
		Assert.equal(migrated.field.length, 1, "'field' was migrated to a single-element array.");
		Assert.equal(migrated.field[0].value, "singleElementValue", "The original value of 'field' was migrated to the only element of the migrated 'field'.")
	}
}
	
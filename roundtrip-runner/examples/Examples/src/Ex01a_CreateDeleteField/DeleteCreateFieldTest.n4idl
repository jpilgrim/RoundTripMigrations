
import {AddField} from "Ex01a_CreateDeleteField/AddField";
import {CreateDeleteFieldTest} from "Ex01a_CreateDeleteField/CreateDeleteFieldTest";
import {InverseRoundTrip} from "com/enfore/n4js/n4idl/roundtrip/InverseRoundTrip";
import {RoundTripMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripMigration";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
/**
 * 
 * Delete + Create Field
 * 
 * AddField#1 -> AddField#2 -> AddField#1
 * 
 * Inverse round-trip of {@link CreateDeleteFieldTest}.
 */
@VersionAware
export public class DeleteCreateFieldTest extends InverseRoundTrip<AddField#2, AddField#1> {
	
	@Override
	public getRoundTripMigration() : RoundTripMigration<AddField#2, AddField#1> {
		return new CreateDeleteFieldTest();
	}
	
	@Override
	public instantiateOriginal() : AddField#1 {
		return new AddField#1({field1 : "value1"});
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : AddField#1) {
		Assert.equal(roundTrip.field1, "value1", "Value of field1 matches");
		
		let dynamicAccess : Object+ = roundTrip;
		Assert.isUndefined(dynamicAccess.field2, "field2 is not present in the round-trip instance");
	}
	
	@Override
	public assertMigratedInstance(migrated : AddField#2) {
		Assert.equal(migrated.field1, "value1", "Value of field1 is migrated correctly");
		Assert.equal(migrated.field2, "defaultValue2", "Value of field2 assumes the default value");
	}
}

import {AbstractRoundTripTest} from "com/enfore/n4js/n4idl/roundtrip/AbstractRoundTripTest";

import {Course} from "Ex19_AggregateTypeIntoValue/AggregateTypeIntoValue";
import {Exam} from "Ex19_AggregateTypeIntoValue/AggregateTypeIntoValue";
import {RoundTripModificationMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripModificationMigration";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * AggregateTypeIntoValue
 * 
 * Course#1 -> Course#2 -> Course#1
 * 
 * The marks of the exams of the course instances are reduced into an average mark using the
 * non bidirectional average function (in general f(x1, x2) = x1 + x2 does not have an inverse).
 * 
 * While this can easily be migrated from version 1 to 2, it is impossible 
 * to migrate a modified instance of Course#2 back to version 1, without
 * loosing information (all the exam instances). It is not clear, how a change
 * to the average mark in version 2 affects the Exam instances in version 1.
 * 
 * In this case a change in value of field 'averageMark' cannot be handled.
 * 
 * One possible solution for this scenario would be to impose a constraint on 
 * the mutability of the field (e.g. force averageMark to be an @Final field).  
 */
@VersionAware
export public class AggregateTypeIntoValueTest 
	extends AbstractRoundTripTest<Course#1, Course#2>
	implements RoundTripModificationMigration<Course#1, Course#2> {
	
	@Override
	public instantiateOriginal() : Course#1 {
		return new Course#1({
			exams: [
				new Exam#1({mark: 1.0}),
				new Exam#1({mark: 2.0}),
				new Exam#1({mark: 1.3})
			]
		})
	}
	
	@Override
	public migrate(o1 : Course#1) : Course#2 {
		let sum = o1.exams
				.map(e => e.mark)
				.reduce((accumulator, mark) => accumulator + (mark as number), 0.0);
		let average = (sum / o1.exams.length);
		
		return new Course#2({
			averageMark: average
		});
	}
	
	@Override
	public modifyMigratedInstance(o2 : Course#2) {
		o2.averageMark = 2;
	}

	@Override
	public migrateBack(o2 : Course#2) : Course#1 {
		return new Course#1({
			exams: [
				new Exam#1({mark: o2.averageMark})
			]
		})
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : Course#1) {
		Assert.equal(roundTrip.exams.length, 1, "Only one exam instance is left in the round-trip instance.");
		Assert.equal(roundTrip.exams[0].mark, 2, "The only exam has the newly set average mark in the round-trip instance.");	
	}
	
	@Override
	public assertMigratedInstance(migrated : Course#2) {
		Assert.equal(migrated.averageMark, (1+2+1.3)/3.0, "The migrated instance correctly preserves the average mark of the original exams.");	
	}
	
	@Override
	public assertModifiedMigratedInstance(modified : Course#2) {
		Assert.equal(modified.averageMark, 2, "The average grade is modified to be 2 in the modified migrated instance.");
	}
}
	
import {Course} from "Ex19_AggregateTypeIntoValue/AggregateTypeIntoValue";

import {InverseRoundTrip} from "com/enfore/n4js/n4idl/roundtrip/InverseRoundTrip";

import {RoundTripMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripMigration";
import {AggregateTypeIntoValueTest} from "Ex19_AggregateTypeIntoValue/AggregateTypeIntoValueTest"
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * 
 * Inverse AggregateTypeIntoValue.
 * 
 * Course#2 -> Course#1 -> Course#2
 * 
 * Inverse round-trip of {@link AggregateTypeIntoValueTest}.
 */
@VersionAware
export public class InverseAggregateTypeIntoValueTest extends InverseRoundTrip<Course#1, Course#2> {
	
	@Override
	public getRoundTripMigration() : RoundTripMigration<Course#1, Course#2> {
		return new AggregateTypeIntoValueTest();
	}
	
	@Override
	public instantiateOriginal() : Course#2 {
		return new Course#2({
			averageMark: 1.3
		});
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : Course#2) {
		Assert.equal(roundTrip.averageMark, 1.3, "The average mark is retained in the round-trip instance.");
	}
	
	@Override
	public assertMigratedInstance(migrated : Course#1) {
		Assert.equal(migrated.exams.length, 1, "The migrated instance contains a single exam.");
		Assert.equal(migrated.exams[0].mark, 1.3, "The migrated instance contains a single exam with the exact average mark.");
	}
}

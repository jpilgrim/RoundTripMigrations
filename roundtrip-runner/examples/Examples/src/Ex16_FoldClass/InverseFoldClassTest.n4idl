import {
	FoldClass,
	OtherClass
} from "Ex16_FoldClass/FoldClass";

import {InverseRoundTrip} from "com/enfore/n4js/n4idl/roundtrip/InverseRoundTrip";

import {RoundTripMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripMigration";
import {FoldClassTest} from "Ex16_FoldClass/FoldClassTest"
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * 
 * Inverse FoldClass.
 * 
 * FoldClass#2 -> FoldClass#1 -> FoldClass#2
 * 
 * Inverse round-trip of {@link FoldClassTest}.
 */
@VersionAware
export public class InverseFoldClassTest extends InverseRoundTrip<FoldClass#1, FoldClass#2> {
	
	@Override
	public getRoundTripMigration() : RoundTripMigration<FoldClass#1, FoldClass#2> {
		return new FoldClassTest();
	}
	
	@Override
	public instantiateOriginal() : FoldClass#2 {
		return new FoldClass#2({
			delegate: new OtherClass#2({
				field: "fieldValue"
			})
		})
	}
	
	@Override
	public assertMigratedInstance(migrated : FoldClass#1) {
		Assert.equal(migrated.field, "fieldValue", "The value of 'field' was retained in the migrated instance.");	
	}
	
	@Override 
	public assertRoundTripInstance(roundTrip : FoldClass#2) {
		Assert.equal(roundTrip.delegate.field, "fieldValue", "The value of 'field' was retained in the round-trip instance.");
	}
}

import {SplitClass} from "Ex08_SplitClass/SplitClass";
import {IntValue} from "Ex08_SplitClass/SplitClass";

import {InverseRoundTrip} from "com/enfore/n4js/n4idl/roundtrip/InverseRoundTrip";

import {RoundTripMigration} from "com/enfore/n4js/n4idl/roundtrip/RoundTripMigration";
import {SplitClassTest} from "Ex08_SplitClass/SplitClassTest"
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

/**
 * 
 * Inverse SplitClass.
 * 
 * SplitClass#2 -> SplitClass#1 -> SplitClass#2
 * 
 * Inverse round-trip of {@link SplitClassTest}.
 */
@VersionAware
export public class InverseSplitClassTest extends InverseRoundTrip<SplitClass#1, SplitClass#2> {
	
	@Override
	public getRoundTripMigration() : RoundTripMigration<SplitClass#1, SplitClass#2> {
		return new SplitClassTest();
	}
	
	@Override
	public instantiateOriginal() : SplitClass#2 {
		return new SplitClass#2({
			field: new IntValue#2({
				intValue: 42
			})
		});
	}
	
	@Override
	public assertRoundTripInstance(roundTrip : SplitClass#2) {
		Assert.equal(roundTrip.field.intValue, 42, "The 'intValue' of the round-trip instance retains the original value.");
	}
	
	@Override
	public assertMigratedInstance(migrated : SplitClass#1) {
		Assert.equal(migrated.field.type, "int", "The 'type' field of the migrated instance is 'int'.");
		Assert.isUndefined(migrated.field.stringValue, "The 'stringValue' of the migrated instance is undefined.");
		Assert.equal(migrated.field.intValue, 42, "The 'intValue' of the migrated instance is the original value.");
	}
}
